[java.awt.Paint.createContext(ColorModel,Rectangle,Rectangle2D,AffineTransform,RenderingHints);param 5;!=;null]
[java.awt.AlphaComposite.getInstance(int,float);param 2;>=;0.0]
[java.awt.AlphaComposite.getInstance(int,float);param 2;<=;1.0]
[java.awt.AlphaComposite.derive(float);param 1;>=;0.0]
[java.awt.AlphaComposite.derive(float);param 1;<=;1.0]
[java.awt.AWTEventMulticaster.getListeners(EventListener,Class);param 2;!=;null]
[java.awt.AWTKeyStroke.getAWTKeyStroke(Character,int);param 1;!=;null]
[java.awt.AWTPermission.AWTPermission(String);param 1;!=;null]
[java.awt.BasicStroke.BasicStroke(float,int,int,float,float[],float);param 1;>=;0]
[java.awt.BasicStroke.BasicStroke(float,int,int,float,float[],float);param 5;!=;null]
[java.awt.BasicStroke.BasicStroke(float,int,int,float,float[],float);param 5;>;0]
[java.awt.BasicStroke.BasicStroke(float,int,int,float);param 1;>=;0]
[java.awt.BasicStroke.BasicStroke(float,int,int,float);param 4;>=;1]
[java.awt.BasicStroke.BasicStroke(float,int,int);param 1;>=;0]
[java.awt.BasicStroke.BasicStroke(float);param 1;>=;0]
[java.awt.BufferCapabilities.BufferCapabilities(ImageCapabilities,ImageCapabilities,BufferCapabilities.FlipContents);param 2;!=;null]
[java.awt.Canvas.createBufferStrategy(int,BufferCapabilities);param 2;!=;null]
[java.awt.Checkbox.getListeners(Class);param 1;!=;null]
[java.awt.CheckboxMenuItem.getListeners(Class);param 1;!=;null]
[java.awt.Choice.addItem(String);param 1;!=;null]
[java.awt.Choice.select(int);Choice.getItemCount;precedes;select]
[java.awt.Choice.select(int);param 1;>=;0]
[java.awt.Color.Color(int,int,int,int);param 1;>=;0]
[java.awt.Color.Color(int,int,int,int);param 1;<=;255]
[java.awt.Color.Color(int,int,int,int);param 2;>=;0]
[java.awt.Color.Color(int,int,int,int);param 2;<=;255]
[java.awt.Color.Color(int,int,int,int);param 3;>=;0]
[java.awt.Color.Color(int,int,int,int);param 3;<=;255]
[java.awt.Color.Color(int,int,int,int);param 4;>=;0]
[java.awt.Color.Color(int,int,int,int);param 4;<=;255]
[java.awt.Color.Color(ColorSpace,float[],float);param 2;>=;0.0]
[java.awt.Color.Color(ColorSpace,float[],float);param 2;<=;1.0]
[java.awt.Color.Color(ColorSpace,float[],float);param 3;>=;0.0]
[java.awt.Color.Color(ColorSpace,float[],float);param 3;<=;1.0]
[java.awt.Component.getLocationOnScreen();Component.isShowing;precedes;getLocationOnScreen]
[java.awt.Container.getComponent(int);param 1;>=;0]
[java.awt.Container.add(Component,int);param 2;>=;0]
[java.awt.Container.add(Component,Object,int);param 2;!=;null]
[java.awt.Container.remove(Component);param 1;!=;null]
[java.awt.Container.setFocusTraversalKeys(int,Set);param 1;!=;KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS]
[java.awt.Container.setFocusTraversalKeys(int,Set);param 1;!=;KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS]
[java.awt.Container.setFocusTraversalKeys(int,Set);param 1;!=;KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS]
[java.awt.ContainerOrderFocusTraversalPolicy.getComponentAfter(Container,Component);Container.isFocusCycleRoot;precedes;getComponentAfter]
[java.awt.Desktop.getDesktop();Desktop.isDesktopSupported;precedes;getDesktop]
[java.awt.Desktop.open(File);File.exists;precedes;open]
[java.awt.Desktop.browse(URI);Desktop.isDesktopSupported;precedes;browse]
[Dialog.Dialog(Frame);GraphicsEnvironment.isHeadless;precedes;GraphicsEnvironment.isHeadless]
[Dialog.Dialog(Frame,String);GraphicsEnvironment.isHeadless;precedes;GraphicsEnvironment.isHeadless]
[java.awt.Dialog.Dialog(Dialog,String);GraphicsEnvironment.isHeadless;precedes;GraphicsEnvironment.isHeadless]
[java.awt.Dialog.public Dialog(Window,String,Dialog.ModalityType);GraphicsEnvironment.isHeadless;precedes;GraphicsEnvironment.isHeadless]
[Dialog.public Dialog(Window,String,Dialog.ModalityType,GraphicsConfiguration);param 4;!=;null]
[java.awt.FocusTraversalPolicy.getComponentAfter(Container,Component);Container.isFocusCycleRoot;precedes;getComponentAfter]
[java.awt.Font.canDisplay(int);Character.isValidCodePoint;precedes;canDisplay]
[java.awt.GradientPaint.GradientPaint(float,float,Color,float,float,Color);param 3;!=;null]
[java.awt.GradientPaint.GradientPaint(Point2D,Color,Point2D,Color);param 2;!=;null]
[java.awt.GradientPaint.GradientPaint(Point2D,Color,Point2D,Color);param 4;!=;null]
[java.awt.Graphics2D.setComposite(Composite);param 1;!=;null]
[java.awt.GraphicsEnvironment.getMaximumWindowBounds();GraphicsEnvironment.isHeadless;precedes;getMaximumWindowBounds]
[java.awt.GridLayout.GridLayout(int,int,int,int);param 2;!=;0]
[java.awt.Image.setAccelerationPriority(float);param 1;>=;0]
[java.awt.Image.setAccelerationPriority(float);param 1;<=;1]
[java.awt.JobAttributes.setCopies(int);param 1;>;0]
[java.awt.JobAttributes.setDefaultSelection(DefaultSelectionType);param 1;!=;null]
[java.awt.JobAttributes.setFromPage(int);param 1;>=;0]
[java.awt.JobAttributes.setMaxPage(int);param 1;>=;0]
[java.awt.JobAttributes.setMinPage(int);param 1;>=;0]
[java.awt.JobAttributes.setMultipleDocumentHandling(JobAttributes.MultipleDocumentHandlingType);param 1;!=;null]
[java.awt.JobAttributes.setSides(JobAttributes.SidesType);param 1;!=;null]
[java.awt.JobAttributes.setToPage(int);param 1;>;0]
[java.awt.JobAttributes.public JobAttributes(int,JobAttributes.DefaultSelectionType,JobAttributes.DestinationType,JobAttributes.DialogType,String,int,int,JobAttributes.MultipleDocumentHandlingType,int[][],String,JobAttributes.SidesType);param 1;>=;0]
[java.awt.KeyboardFocusManager.getGlobalFocusOwner();KeyboardFocusManager.setCurrentKeyboardFocusManager;precedes;getGlobalFocusOwner]
[java.awt.KeyboardFocusManager.getGlobalPermanentFocusOwner();KeyboardFocusManager.setCurrentKeyboardFocusManager;precedes;getGlobalPermanentFocusOwner]
[java.awt.KeyboardFocusManager.setDefaultFocusTraversalPolicy(FocusTraversalPolicy);param 1;!=;null]
[java.awt.List.getListeners(Class);param 1;!=;null]
[java.awt.MediaTracker.waitForID(int);Thread.interrupted;precedes;waitForID]
[java.awt.Menu.insert(MenuItem,int);param 2;>=;0]
[java.awt.Menu.insert(String,int);param 2;>=;0]
[java.awt.MenuItem.public MenuItem(String);GraphicsEnvironment.isHeadless;precedes;GraphicsEnvironment.isHeadless]
[java.awt.PageAttributes.setColor(PageAttributes.ColorType);param 1;!=;null]
[java.awt.PageAttributes.setOrientationRequested(PageAttributes.OrientationRequestedType);param 1;!=;null]
[java.awt.PageAttributes.setOrigin(PageAttributes.OriginType);param 1;!=;null]
[java.awt.PageAttributes.setPrintQuality(PageAttributes.PrintQualityType);param 1;!=;null]
[java.awt.PageAttributes.setPrinterResolution(int);param 1;>;0]
[java.awt.PopupMenu.show(Component,int,int);Component.isShowing;precedes;show]
[java.awt.RadialGradientPaint.RadialGradientPaint(float,float,float,float[],Color[]);param 5;!=;null]
[java.awt.RadialGradientPaint.RadialGradientPaint(Point2D,float,float[],Color[]);param 4;!=;null]
[java.awt.RadialGradientPaint.RadialGradientPaint(float,float,float,float[],Color[],MultipleGradientPaint.CycleMethod);param 5;!=;null]
[java.awt.RadialGradientPaint.RadialGradientPaint(float,float,float,float[],Color[],MultipleGradientPaint.CycleMethod);param 6;!=;null]
[java.awt.RadialGradientPaint.RadialGradientPaint(Point2D,float,float[],Color[],MultipleGradientPaint.CycleMethod);param 1;!=;null]
[java.awt.RadialGradientPaint.RadialGradientPaint(Point2D,float,float[],Color[],MultipleGradientPaint.CycleMethod);param 4;!=;null]
[java.awt.RadialGradientPaint.RadialGradientPaint(Point2D,float,float[],Color[],MultipleGradientPaint.CycleMethod);param 5;!=;null]
[java.awt.RadialGradientPaint.RadialGradientPaint(float,float,float,float,float,float[],Color[],MultipleGradientPaint.CycleMethod);param 7;!=;null]
[java.awt.RadialGradientPaint.RadialGradientPaint(float,float,float,float,float,float[],Color[],MultipleGradientPaint.CycleMethod);param 8;!=;null]
[java.awt.RenderingHints.put(Object,Object);param 1;!=;null]
[java.awt.Robot.setAutoDelay(int);param 1;>=;0]
[java.awt.Robot.setAutoDelay(int);param 1;<=;60000]
[java.awt.Robot.delay(int);param 1;>=;0]
[java.awt.Robot.delay(int);param 1;<=;60000]
[java.awt.ScrollPaneAdjustable.setMinimum(int);param 1;>=;0]
[java.awt.ScrollPaneAdjustable.setMaximum(int);param 1;>=;0]
[java.awt.ScrollPaneAdjustable.setVisibleAmount(int);param 1;!=;null]
[java.awt.TextArea.setRows(int);param 1;>=;0]
[java.awt.TextArea.setColumns(int);param 1;>=;0]
[java.awt.TextComponent.setCaretPosition(int);param 1;>=;0]
[java.awt.TextField.setColumns(int);param 1;>=;0]
[java.awt.Toolkit.removeAWTEventListener(AWTEventListener);param 1;!=;null]
[java.awt.TrayIcon.displayMessage(String,String,TrayIcon.MessageType);param 2;!=;null]
[java.awt.Window.createBufferStrategy(int);param 1;>=;1]
[java.awt.Window.createBufferStrategy(int,BufferCapabilities);param 1;>=;1]
[java.awt.Window.createBufferStrategy(int,BufferCapabilities);param 2;!=;null]
[java.awt.Window.setBackground(Color);param 1;>=;1.0f]
[Window.public Window(Frame);GraphicsEnvironment.isHeadless;precedes;GraphicsEnvironment.isHeadless]
[Window.public Window(Window);GraphicsEnvironment.isHeadless;precedes;GraphicsEnvironment.isHeadless]
[java.awt.color.ICC_ProfileRGB.getGamma(int);getTRC;precedes;getGamma]
[java.awt.datatransfer.SystemFlavorMap.setNativesForFlavor(DataFlavor,String[]);param 2;!=;null]
[java.awt.datatransfer.SystemFlavorMap.setFlavorsForNative(String,DataFlavor[]);param 2;!=;null]
[java.awt.dnd.DragGestureEvent.startDrag(Cursor,Image,Point,Transferable,DragSourceListener);param 4;!=;null]
[java.awt.dnd.DragGestureEvent.DragGestureEvent(DragGestureRecognizer,int,Point,List);param 3;!=;null]
[java.awt.dnd.DragSource.createDragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener);param 1;!=;null]
[java.awt.dnd.DragSource.createDragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener);param 2;!=;null]
[java.awt.dnd.DragSource.createDragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener);param 4;!=;null]
[java.awt.dnd.DragSource.createDragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener);param 5;!=;null]
[java.awt.dnd.DragSource.createDragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener);param 6;!=;null]
[java.awt.dnd.DragSource.createDragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener);param 2;!=;DnDConstants.ACTION_NONE]
[java.awt.dnd.DragSourceContext.addDragSourceListener(DragSourceListener);param 1;!=;null]
[DragSourceContext.DragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener);param 2;!=;null]
[DragSourceContext.DragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener);param 4;!=;null]
[DragSourceContext.DragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener);param 5;!=;null]
[DragSourceContext.DragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener);param 6;!=;null]
[DragSourceContext.DragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener);DragSourceListener;!=;null]
[DragSourceContext.DragSourceContext(DragSourceContextPeer,DragGestureEvent,Cursor,Image,Point,Transferable,DragSourceListener);param 2;!=;DnDConstants.ACTION_NONE]
[java.awt.dnd.DropTarget.dragEnter(DropTargetDragEvent);DropTarget.isActive;precedes;dragEnter]
[java.awt.dnd.DropTargetDragEvent.DropTargetDragEvent(DropTargetContext,Point,int,int);param 2;!=;null]
[java.awt.dnd.DropTargetDropEvent.DropTargetDropEvent(DropTargetContext,Point,int,int);param 2;!=;null]
[java.awt.event.InputEvent.getMaskForButton(int);param 1;>=;0]
[java.awt.font.GlyphVector.getGlyphCodes(int,int,int[]);param 2;>=;0]
[java.awt.font.GlyphVector.getGlyphPositions(int,int,float[]);param 2;>=;0]
[java.awt.font.TextLayout.getJustifiedLayout(float);param 1;>;0]
[java.awt.geom.Area.add(Area);param 1;!=;null]
[java.awt.geom.Area.subtract(Area);param 1;!=;null]
[java.awt.geom.Area.intersect(Area);param 1;!=;null]
[java.awt.geom.Area.exclusiveOr(Area);param 1;!=;null]
[java.awt.geom.FlatteningPathIterator.FlatteningPathIterator(PathIterator,double,int);param 2;>=;0]
[java.awt.geom.FlatteningPathIterator.FlatteningPathIterator(PathIterator,double,int);param 3;>=;0]
[java.awt.im.spi.InputMethodContext.createInputMethodJFrame(String,boolean);GraphicsEnvironment.isHeadless;precedes;GraphicsEnvironment.isHeadless]
[java.awt.image.ColorConvertOp.filter(BufferedImage,BufferedImage);param 2;!=;null]
[java.awt.image.ColorConvertOp.createCompatibleDestImage(BufferedImage,ColorModel);param 2;!=;null]
[java.awt.image.ColorConvertOp.ColorConvertOp(ColorSpace,ColorSpace,RenderingHints);param 2;!=;null]
[java.awt.image.ColorModel.createCompatibleSampleModel(int,int);param 1;>;0]
[java.awt.image.ComponentColorModel.getDataElements(int,Object);param 2;!=;null]
[java.awt.image.ComponentColorModel.getDataElements(int[],int,Object);param 3;!=;null]
[java.awt.image.ComponentColorModel.getNormalizedComponents(Object,float[],int);param 2;>=;null]
[java.awt.image.ComponentSampleModel.getPixel(int,int,int[],DataBuffer);param 4;!=;null]
[java.awt.image.ComponentSampleModel.getPixel(int,int,int[],DataBuffer);param 3;!=;null]
[java.awt.image.ComponentSampleModel.getPixel(int,int,int[],DataBuffer);param 3;!=;0]
[java.awt.image.ComponentSampleModel.ComponentSampleModel(int,int,int,int,int,int[]);param 4;>=;0]
[java.awt.image.ComponentSampleModel.ComponentSampleModel(int,int,int,int,int,int[]);numBands;>=;1]
[java.awt.image.ComponentSampleModel.ComponentSampleModel(int,int,int,int,int,int[],int[]);param 4;>=;0]
[java.awt.image.ComponentSampleModel.ComponentSampleModel(int,int,int,int,int,int[],int[]);param 6;>=;0]
[java.awt.image.DirectColorModel.getComponents(int[],int);param 2;>=;0]
[java.awt.image.IndexColorModel.getComponents(Object,int[],int);param 2;>=;param 3]
[java.awt.image.IndexColorModel.convertToIntDiscrete(Raster,boolean);IndexColorModel.isCompatibleRaster;precedes;convertToIntDiscrete]
[java.awt.image.LookupTable.protected LookupTable(int,int);param 2;>=;1]
[java.awt.image.MultiPixelPackedSampleModel.getDataElements(int,int,Object,DataBuffer);param 3;!=;null]
[java.awt.image.PackedColorModel.getMask(int);param 1;>=;0]
[java.awt.image.PixelInterleavedSampleModel.PixelInterleavedSampleModel(int,int,int,int,int,int[]);param 6;<=;param 5]
[java.awt.image.Raster.createBandedRaster(int,int,int,int,int[],int[],Point);param 5;!=;null]
[java.awt.image.Raster.createBandedRaster(int,int,int,int,int[],int[],Point);param 6;!=;null]
[java.awt.image.Raster.createInterleavedRaster(DataBuffer,int,int,int,int,int[],Point);param 3;!=;Integer.MAX_VALUE]
[java.awt.image.Raster.createPackedRaster(DataBuffer,int,int,int,int[],Point);param 3;!=;Integer.MAX_VALUE]
[java.awt.image.Raster.getDataElements(int,int,int,int,Object);param 5;!=;null]
[java.awt.image.Raster.getPixel(int,int,float[]);param 3;!=;null]
[Raster.protected Raster(SampleModel,Point);param 2;!=;null]
[Raster.protected Raster(SampleModel,DataBuffer,Rectangle,Point,Raster);param 4;!=;null]
[java.awt.image.ReplicateScaleFilter.ReplicateScaleFilter(int,int);param 1;!=;0]
[java.awt.image.ReplicateScaleFilter.ReplicateScaleFilter(int,int);param 2;!=;0]
[java.awt.image.RescaleOp.filter(BufferedImage,BufferedImage);getNumFactors;precedes;filter]
[java.awt.image.RescaleOp.filter(Raster,WritableRaster);getNumFactors;precedes;filter]
[java.awt.image.RGBImageFilter.filterIndexColorModel(IndexColorModel);param 1;!=;null]
[java.awt.image.SampleModel.getPixel(int,int,int[],DataBuffer);param 4;!=;null]
[java.awt.image.SampleModel.getDataElements(int,int,int,int,Object,DataBuffer);param 6;!=;null]
[java.awt.image.SampleModel.setDataElements(int,int,int,int,Object,DataBuffer);param 6;!=;null]
[java.awt.image.SampleModel.getPixel(int,int,float[],DataBuffer);param 4;!=;null]
[java.awt.image.SampleModel.getPixel(int,int,double[],DataBuffer);param 4;!=;null]
[java.awt.image.SampleModel.getPixels(int,int,int,int,int[],DataBuffer);param 6;!=;null]
[java.awt.image.SampleModel.getPixels(int,int,int,int,float[],DataBuffer);param 6;!=;null]
[java.awt.image.SampleModel.getPixels(int,int,int,int,double[],DataBuffer);param 6;!=;null]
[java.awt.image.SampleModel.getSampleFloat(int,int,int,DataBuffer);param 4;!=;null]
[java.awt.image.SampleModel.getSamples(int,int,int,int,int,int[],DataBuffer);param 7;!=;null]
[java.awt.image.SampleModel.getSamples(int,int,int,int,int,float[],DataBuffer);param 7;!=;null]
[java.awt.image.SampleModel.getSamples(int,int,int,int,int,double[],DataBuffer);param 7;!=;null]
[java.awt.image.SampleModel.setSamples(int,int,int,int,int,double[],DataBuffer);param 6;!=;null]
[java.awt.image.WritableRaster.setRect(int,int,Raster);param 3;!=;null]
[java.awt.image.WritableRaster.setPixel(int,int,int[]);param 3;!=;null]
[java.awt.image.WritableRaster.setPixel(int,int,float[]);param 3;!=;null]
[java.awt.image.WritableRaster.setPixel(int,int,double[]);param 3;!=;null]
[java.awt.image.WritableRaster.setPixels(int,int,int,int,int[]);param 5;!=;null]
[java.awt.image.WritableRaster.setPixels(int,int,int,int,int[]);param 5;>;0]
[java.awt.image.WritableRaster.setPixels(int,int,int,int,float[]);param 5;!=;null]
[java.awt.image.WritableRaster.setPixels(int,int,int,int,double[]);param 5;!=;null]
[java.awt.print.Book.append(Printable,PageFormat);param 1;!=;null]
[java.awt.print.Book.append(Printable,PageFormat,int);param 1;!=;null]
[java.beans.EventHandler.create(Class,Object,String);param 3;!=;null]
[java.beans.VetoableChangeSupport.fireVetoableChange(String,int,int);param 3;>=;0]
[java.beans.XMLEncoder.XMLEncoder(OutputStream,String,boolean,int);Charset.canEncode;precedes;XMLEncoder]
[java.beans.beancontext.BeanContextSupport.addAll(Collection);param 1;!=;null]
[java.beans.beancontext.BeanContextSupport.removeAll(Collection);Collection.isEmpty;precedes;removeAll]
[java.beans.beancontext.BeanContextSupport.retainAll(Collection);Collection.isEmpty;precedes;retainAll]
[java.beans.beancontext.BeanContextSupport.writeChildren(ObjectOutputStream);param 1;!=;null]
[java.io.DataOutput.write(byte[]);param 1;!=;null]
[java.io.DataOutput.writeByte(int);param 1;!=;null]
[java.io.DataOutput.writeLong(long);param 1;!=;null]
[java.io.DataOutput.writeDouble(double);param 1;!=;null]
[java.io.DataOutput.writeBytes(String);param 1;!=;null]
[java.io.ObjectInput.skip(long);param 1;>=;0]
[java.io.ObjectOutput.writeObject(Object);param 1;!=;null]
[java.io.BufferedReader.mark(int);param 1;>=;0]
[java.io.ByteArrayOutputStream.ByteArrayOutputStream(int);param 1;>=;0]
[java.io.CharArrayReader.read(char[],int,int);param 1;!=;null]
[java.io.CharArrayReader.skip(long);param 1;>=;0]
[java.io.CharArrayReader.mark(int);param 1;>=;0]
[java.io.CharArrayReader.CharArrayReader(char[],int,int);param 2;>=;0]
[java.io.CharArrayWriter.public CharArrayWriter(int);param 1;>=;0]
[java.io.DataInputStream.skipBytes(int);param 1;>=;0]
[java.io.DataInputStream.readBoolean();FilterInputStream.close;precedes;readBoolean]
[java.io.DataOutputStream.writeLong(long);param 1;!=;null]
[java.io.File.renameTo(File);param 1;!=;null]
[java.io.File.setLastModified(long);param 1;>=;0]
[File.public File(File,String);param 2;!=;null]
[java.io.FileInputStream.skip(long);param 1;>=;0]
[FileReader.FileReader(String);File.exists;precedes;FileReader]
[FileReader.FileReader(String);File.isFile;precedes;FileReader]
[java.io.FilterInputStream.skip(long);param 1;>=;0]
[java.io.FilterOutputStream.write(int);param 1;!=;null]
[java.io.FilterReader.skip(long);param 1;>=;0]
[java.io.FilterReader.mark(int);param 1;>=;0]
[java.io.FilterWriter.write(int);param 1;!=;null]
[java.io.InputStream.skip(long);param 1;>;0]
[java.io.InputStream.mark(int);param 1;>=;0]
[java.io.LineNumberInputStream.read(byte[],int,int);param 1;!=;null]
[java.io.LineNumberInputStream.skip(long);param 1;>=;0]
[java.io.LineNumberReader.skip(long);param 1;>=;0]
[java.io.LineNumberReader.mark(int);param 1;>=;0]
[java.io.ObjectInputStream.resolveObject(Object);param 1;!=;null]
[java.io.ObjectOutputStream.write(int);param 1;!=;null]
[java.io.ObjectOutputStream.writeByte(int);param 1;!=;null]
[java.io.ObjectOutputStream.writeShort(int);param 1;>=;Short.MIN_VALUE]
[java.io.ObjectOutputStream.writeShort(int);param 1;<=;Short.MAX_VALUE]
[java.io.ObjectOutputStream.writeChar(int);param 1;!=;null]
[java.io.ObjectOutputStream.writeInt(int);param 1;!=;null]
[java.io.PipedInputStream.connect(PipedOutputStream);param 1;!=;null]
[java.io.PipedInputStream.receive(int);param 1;!=;null]
[java.io.PipedInputStream.read();PipedInputStream.connect;precedes;read]
[java.io.PipedInputStream.read(byte[],int,int);PipedInputStream.connect;precedes;read]
[java.io.PipedInputStream.read(byte[],int,int);param 1;!=;null]
[PipedInputStream.PipedInputStream(PipedOutputStream);param 1;!=;null]
[PipedInputStream.PipedInputStream(int);param 1;>;0]
[java.io.PipedOutputStream.connect(PipedInputStream);param 1;!=;null]
[PipedOutputStream.PipedOutputStream(PipedInputStream);param 1;!=;null]
[java.io.PipedReader.connect(PipedWriter);param 1;!=;null]
[java.io.PipedReader.read();PipedReader.ready;precedes;read]
[PipedReader.PipedReader(PipedWriter);param 1;!=;null]
[PipedReader.PipedReader(PipedWriter,int);param 1;!=;null]
[PipedReader.PipedReader(PipedWriter,int);param 2;>;0]
[PipedReader.PipedReader(int);param 1;>;0]
[java.io.PipedWriter.connect(PipedReader);param 1;!=;null]
[PipedWriter.PipedWriter(PipedReader);param 1;!=;null]
[java.io.PushbackReader.unread(int);param 1;!=;null]
[java.io.PushbackReader.mark(int);param 1;>=;0]
[java.io.PushbackReader.skip(long);param 1;>=;0]
[java.io.RandomAccessFile.readFully(byte[]);param 1;!=;null]
[java.io.RandomAccessFile.skipBytes(int);param 1;>=;0]
[java.io.RandomAccessFile.seek(long);param 1;>=;0]
[java.io.RandomAccessFile.setLength(long);param 1;>=;0]
[java.io.RandomAccessFile.writeByte(int);param 1;>;0]
[java.io.RandomAccessFile.writeShort(int);param 1;>=;Short.MIN_VALUE]
[java.io.RandomAccessFile.writeShort(int);param 1;<=;Short.MAX_VALUE]
[java.io.RandomAccessFile.writeLong(long);param 1;>;0]
[java.io.RandomAccessFile.writeUTF(String);param 1;!=;null]
[RandomAccessFile.RandomAccessFile(File,String);File.exists;precedes;RandomAccessFile]
[java.io.Reader.skip(long);param 1;>;0]
[java.io.Reader.mark(int);Reader.markSupported;precedes;mark]
[java.io.Reader.mark(int);param 1;>=;0]
[java.io.StringReader.skip(long);param 1;>=;0]
[StringWriter.StringWriter(int);param 1;>=;0]
[java.io.Writer.write(int);param 1;!=;null]
[java.io.Writer.write(String);param 1;!=;null]
[java.lang.Appendable.append(CharSequence);param 1;!=;null]
[java.lang.Appendable.append(char);param 1;!=;null]
[java.lang.CharSequence.subSequence(int,int);param 1;<;param 2]
[java.lang.Boolean.compareTo(Boolean);param 1;!=;null]
[java.lang.Byte.parseByte(String);radix;<=;Character.MAX_RADIX]
[java.lang.Byte.valueOf(String,int);param 1;!=;null]
[java.lang.Byte.decode(String);param 1;!=;null]
[java.lang.Character.toChars(int,char[],int);Character.isValidCodePoint;precedes;toChars]
[java.lang.Character.toChars(int);Character.isValidCodePoint;precedes;toChars]
[java.lang.Character.getName(int);Character.isValidCodePoint;precedes;getName]
[java.lang.ClassLoader.defineClass(byte[],int,int);param 3;>=;0]
[java.lang.ClassLoader.defineClass(String,byte[],int,int);param 4;>=;0]
[java.lang.ClassLoader.defineClass(String,byte[],int,int,ProtectionDomain);param 4;>=;0]
[java.lang.Integer.valueOf(String,int);param 1;!=;null]
[java.lang.Long.valueOf(String);param 1;!=;null]
[java.lang.Math.negateExact(int);param 1;!=;Integer.MIN_VALUE]
[java.lang.Math.negateExact(long);param 1;!=;Long.MIN_VALUE]
[java.lang.Math.floorDiv(int,int);param 2;!=;0]
[java.lang.Math.floorDiv(long,long);param 2;!=;0]
[java.lang.Object.wait(long);param 1;>=;0]
[java.lang.Object.wait(long,int);param 1;>=;0]
[java.lang.Process.waitFor(long,TimeUnit);param 2;!=;null]
[java.lang.Runtime.exec(String[]);param 1;!=;null]
[java.lang.Runtime.exec(String[],String[],File);param 1;!=;null]
[java.lang.Runtime.exec(String[],String[],File);param 2;!=;null]
[java.lang.SecurityManager.checkPermission(Permission);param 1;!=;null]
[java.lang.SecurityManager.checkPermission(Permission,Object);param 1;!=;null]
[java.lang.SecurityManager.checkWrite(FileDescriptor);param 1;!=;null]
[java.lang.SecurityManager.checkTopLevelWindow(Object);param 1;!=;null]
[java.lang.Short.valueOf(String);param 1;!=;null]
[java.lang.StrictMath.floorDiv(int,int);param 2;!=;0]
[java.lang.StrictMath.floorMod(long,long);param 2;!=;0]
[java.lang.String.codePointCount(int,int);param 1;>=;0]
[java.lang.String.offsetByCodePoints(int,int);param 2;!=;0]
[java.lang.String.substring(int,int);param 1;>=;0]
[java.lang.String.substring(int);param 1;>=;0]
[java.lang.String.substring(int,int);param 1;>=;0]
[java.lang.String.subSequence(int,int);param 1;>=;0]
[java.lang.StringBuffer.setLength(int);param 1;>=;0]
[java.lang.StringBuffer.delete(int,int);param 1;>=;0]
[java.lang.StringBuffer.replace(int,int,String);param 1;>=;0]
[java.lang.StringBuffer.substring(int);param 1;>=;0]
[java.lang.StringBuffer.substring(int,int);param 1;>=;0]
[java.lang.StringBuffer.substring(int,int);param 2;>=;0]
[java.lang.StringBuffer.insert(int,char[],int,int);param 3;>=;0]
[java.lang.StringBuffer.insert(int,char[],int,int);param 4;>=;0]
[java.lang.StringBuffer.insert(int,CharSequence,int,int);param 3;>=;0]
[java.lang.StringBuffer.insert(int,CharSequence,int,int);param 4;>=;0]
[java.lang.StringBuilder.delete(int,int);param 1;>=;0]
[java.lang.StringBuilder.replace(int,int,String);param 1;>=;0]
[java.lang.StringBuilder.insert(int,char[],int,int);param 3;>=;0]
[java.lang.StringBuilder.insert(int,char[],int,int);param 4;>=;0]
[java.lang.StringBuilder.insert(int,CharSequence,int,int);param 4;>=;0]
[java.lang.StringBuilder.setLength(int);param 1;>=;0]
[java.lang.StringBuilder.codePointCount(int,int);param 1;>=;0]
[java.lang.StringBuilder.substring(int);param 1;>=;0]
[java.lang.StringBuilder.substring(int,int);param 1;>=;0]
[java.lang.StringBuilder.substring(int,int);param 2;>=;0]
[java.lang.System.setProperty(String,String);param 2;!=;null]
[java.lang.Thread.sleep(long);param 1;>=;0]
[java.lang.Thread.join(long);param 1;>=;0]
[java.lang.Thread.join(long);Thread.interrupted;precedes;join]
[java.lang.ThreadGroup.setMaxPriority(int);ThreadGroup.checkAccess;precedes;setMaxPriority]
[java.lang.ThreadGroup.enumerate(Thread[]);ThreadGroup.checkAccess;precedes;enumerate]
[java.lang.ThreadGroup.enumerate(ThreadGroup[]);ThreadGroup.checkAccess;precedes;enumerate]
[java.lang.Throwable.addSuppressed(Throwable);param 1;!=;null]
[java.lang.instrument.Instrumentation.removeTransformer(ClassFileTransformer);param 1;!=;null]
[java.lang.invoke.MethodHandle.asSpreader(Class,int);param 2;>=;0]
[java.lang.invoke.MethodHandles.dropArguments(MethodHandle,int,List);param 3;!=;void.class]
[java.lang.invoke.MethodHandles.dropArguments(MethodHandle,int,Class...);param 3;!=;void.class]
[java.lang.invoke.MethodType.genericMethodType(int);param 1;<=;255]
[java.lang.invoke.MethodType.insertParameterTypes(int,Class...);param 2;!=;void.class]
[java.lang.invoke.MethodType.insertParameterTypes(int,Class...);param 2;!=;null]
[java.lang.invoke.MethodType.appendParameterTypes(Class...);param 1;!=;null]
[java.lang.invoke.MethodType.insertParameterTypes(int,List);param 2;!=;null]
[java.lang.invoke.MethodType.appendParameterTypes(List);param 1;!=;null]
[java.lang.invoke.SwitchPoint.invalidateAll(SwitchPoint[]);param 1;!=;null]
[java.lang.management.MemoryPoolMXBean.getUsageThreshold();MemoryPoolMXBean.isUsageThresholdSupported;precedes;getUsageThreshold]
[java.lang.management.MemoryPoolMXBean.isUsageThresholdExceeded();MemoryPoolMXBean.isUsageThresholdSupported;precedes;isUsageThresholdExceeded]
[java.lang.management.MemoryPoolMXBean.getUsageThresholdCount();MemoryPoolMXBean.isUsageThresholdSupported;precedes;getUsageThresholdCount]
[java.lang.management.MemoryPoolMXBean.setCollectionUsageThreshold(long);param 1;>=;0]
[java.lang.management.MemoryPoolMXBean.setCollectionUsageThreshold(long);MemoryPoolMXBean.isCollectionUsageThresholdSupported;precedes;setCollectionUsageThreshold]
[java.lang.management.MemoryPoolMXBean.isCollectionUsageThresholdExceeded();MemoryPoolMXBean.isUsageThresholdSupported;precedes;isCollectionUsageThresholdExceeded]
[java.lang.management.MemoryPoolMXBean.getCollectionUsageThresholdCount();MemoryPoolMXBean.isCollectionUsageThresholdSupported;precedes;getCollectionUsageThresholdCount]
[java.lang.management.RuntimeMXBean.getInputArguments();ManagementFactory.getRuntimeMXBean;precedes;getInputArguments]
[java.lang.management.ThreadMXBean.getThreadInfo(long);param 1;>;0]
[java.lang.management.ThreadMXBean.getThreadInfo(long,int);param 2;>=;0]
[java.lang.management.ThreadMXBean.getThreadInfo(long[],int);param 2;>=;0]
[java.lang.management.ThreadMXBean.getThreadInfo(long[],int);param 1;>;0]
[java.lang.management.ThreadMXBean.getCurrentThreadCpuTime();ThreadMXBean.isCurrentThreadCpuTimeSupported;precedes;getCurrentThreadCpuTime]
[java.lang.management.ThreadMXBean.getCurrentThreadUserTime();ThreadMXBean.isCurrentThreadCpuTimeSupported;precedes;getCurrentThreadUserTime]
[java.lang.management.ThreadMXBean.getThreadCpuTime(long);param 1;>;0]
[java.lang.management.ThreadMXBean.getThreadCpuTime(long);ThreadMXBean.isThreadCpuTimeSupported;precedes;getThreadCpuTime]
[java.lang.management.ThreadMXBean.getThreadUserTime(long);param 1;>;0]
[java.lang.management.ThreadMXBean.getThreadUserTime(long);ThreadMXBean.isThreadCpuTimeSupported;precedes;getThreadUserTime]
[java.lang.ref.ReferenceQueue.remove(long);param 1;>=;0]
[java.lang.reflect.Method.invoke(Object,Object...);Object.isInstance;precedes;invoke]
[java.lang.reflect.Proxy.getProxyClass(ClassLoader,Class...);param 2;!=;null]
[java.math.BigDecimal.subtract(BigDecimal,MathContext);param 1;!=;null]
[java.math.BigDecimal.divide(BigDecimal,int,RoundingMode);param 3;!=;RoundingMode.UNNECESSARY]
[java.math.BigDecimal.divide(BigDecimal,RoundingMode);param 2;!=;RoundingMode.UNNECESSARY]
[java.math.BigDecimal.divideToIntegralValue(BigDecimal);param 1;!=;0]
[java.math.BigDecimal.divideToIntegralValue(BigDecimal,MathContext);param 1;!=;0]
[java.math.BigDecimal.remainder(BigDecimal);param 1;!=;0]
[java.math.BigDecimal.divideAndRemainder(BigDecimal);param 1;!=;0]
[java.math.BigDecimal.pow(int,MathContext);param 1;>;0]
[java.math.BigDecimal.setScale(int);param 1;>=;0]
[BigDecimal.BigDecimal(int,MathContext);param 1;>=;0]
[BigDecimal.BigDecimal(long,MathContext);param 1;>;0]
[java.math.BigInteger.modPow(BigInteger,BigInteger);param 1;>=;0]
[java.math.BigInteger.testBit(int);param 1;>=;0]
[java.math.BigInteger.setBit(int);param 1;>=;0]
[java.math.BigInteger.clearBit(int);param 1;>=;0]
[java.math.BigInteger.flipBit(int);param 1;>=;0]
[MathContext.MathContext(int);param 1;>=;0]
[java.math.MathContext.MathContext(int,RoundingMode);param 2;!=;null]
[java.net.CookieStore.remove(URI,HttpCookie);param 2;!=;null]
[java.net.SocketOptions.getOption(int);Socket.isClosed;precedes;getOption]
[java.net.DatagramPacket.setLength(int);param 1;>=;0]
[java.net.DatagramSocket.setSoTimeout(int);param 1;>=;0]
[java.net.DatagramSocket.setReuseAddress(boolean);Socket.isClosed;precedes;setReuseAddress]
[java.net.DatagramSocket.setDatagramSocketImplFactory(DatagramSocketImplFactory);param 1;!=;null]
[java.net.DatagramSocketImpl.bind(int,InetAddress);param 1;>;0]
[java.net.DatagramSocketImpl.send(DatagramPacket);param 1;!=;null]
[java.net.DatagramSocketImpl.peek(InetAddress);InetAddress;!=;null]
[java.net.DatagramSocketImpl.peekData(DatagramPacket);param 1;!=;null]
[java.net.DatagramSocketImpl.receive(DatagramPacket);param 1;!=;null]
[java.net.DatagramSocketImpl.join(InetAddress);param 1;!=;null]
[java.net.DatagramSocketImpl.leave(InetAddress);param 1;!=;null]
[java.net.HttpURLConnection.setFixedLengthStreamingMode(int);param 1;>=;0]
[java.net.HttpURLConnection.setFixedLengthStreamingMode(long);param 1;>=;0]
[java.net.InetAddress.isReachable(int);param 1;>=;0]
[java.net.InetSocketAddress.createUnresolved(String,int);param 2;>=;0]
[java.net.InetSocketAddress.createUnresolved(String,int);param 2;<=;65535]
[java.net.InetSocketAddress.createUnresolved(String,int);param 1;!=;null]
[java.net.InetSocketAddress.InetSocketAddress(int);param 1;>=;0]
[java.net.InetSocketAddress.InetSocketAddress(int);param 1;<=;65535]
[java.net.InetSocketAddress.InetSocketAddress(InetAddress,int);param 2;>=;0]
[java.net.InetSocketAddress.InetSocketAddress(InetAddress,int);param 2;<=;65535]
[java.net.NetworkInterface.getByName(String);param 1;!=;null]
[java.net.NetworkInterface.getByIndex(int);param 1;>=;0]
[java.net.ProxySelector.connectFailed(URI,SocketAddress,IOException);param 1;!=;null]
[java.net.ServerSocket.setSoTimeout(int);param 1;>;0]
[java.net.ServerSocket.setReuseAddress(boolean);ServerSocket.isClosed;precedes;setReuseAddress]
[java.net.ServerSocket.setSocketFactory(SocketImplFactory);param 1;!=;null]
[java.net.Socket.sendUrgentData(int);param 1;!=;null]
[java.net.Socket.setSoTimeout(int);param 1;>;0]
[java.net.Socket.setSendBufferSize(int);param 1;>;0]
[java.net.Socket.setReceiveBufferSize(int);param 1;!=;0]
[java.net.Socket.setSocketImplFactory(SocketImplFactory);param 1;!=;null]
[Socket.protected Socket(SocketImpl);param 1;!=;null]
[Socket.Socket(String,int);param 2;>=;0]
[Socket.Socket(String,int);param 2;<=;65535]
[java.net.SocketImpl.listen(int);param 1;>;0]
[java.net.SocketImpl.sendUrgentData(int);param 1;!=;null]
[java.net.URLConnection.setConnectTimeout(int);param 1;>=;0]
[java.net.URLConnection.setReadTimeout(int);param 1;>=;0]
[java.net.URLConnection.setContentHandlerFactory(ContentHandlerFactory);param 1;!=;null]
[java.nio.Buffer.position(int);param 1;>=;0]
[java.nio.ByteBuffer.allocateDirect(int);param 1;>=;0]
[java.nio.ByteBuffer.allocate(int);param 1;>=;0]
[java.nio.ByteBuffer.get(byte[],int,int);Buffer.hasRemaining;precedes;get]
[java.nio.ByteBuffer.get(byte[]);Buffer.hasRemaining;precedes;get]
[java.nio.ByteBuffer.array();ByteBuffer.hasArray;precedes;array]
[java.nio.ByteBuffer.arrayOffset();ByteBuffer.hasArray;precedes;arrayOffset]
[java.nio.CharBuffer.allocate(int);param 1;>=;0]
[java.nio.CharBuffer.array();CharBuffer.hasArray;precedes;array]
[java.nio.CharBuffer.arrayOffset();CharBuffer.hasArray;precedes;arrayOffset]
[java.nio.DoubleBuffer.allocate(int);param 1;>;0]
[java.nio.DoubleBuffer.get(int);param 1;>=;0]
[java.nio.DoubleBuffer.array();DoubleBuffer.hasArray;precedes;array]
[java.nio.DoubleBuffer.arrayOffset();DoubleBuffer.hasArray;precedes;arrayOffset]
[java.nio.FloatBuffer.allocate(int);param 1;>=;0]
[java.nio.FloatBuffer.get(float[],int,int);FloatBuffer.hasRemaining;precedes;get]
[java.nio.FloatBuffer.arrayOffset();FloatBuffer.hasArray;precedes;arrayOffset]
[java.nio.IntBuffer.allocate(int);param 1;>=;0]
[java.nio.IntBuffer.get(int);param 1;>=;0]
[java.nio.IntBuffer.get(int[],int,int);IntBuffer.hasRemaining;precedes;get]
[java.nio.IntBuffer.array();IntBuffer.hasArray;precedes;array]
[java.nio.IntBuffer.arrayOffset();IntBuffer.hasArray;precedes;arrayOffset]
[java.nio.LongBuffer.get(int);param 1;>=;0]
[java.nio.LongBuffer.array();LongBuffer.hasArray;precedes;array]
[java.nio.LongBuffer.arrayOffset();LongBuffer.asArray;precedes;arrayOffset]
[java.nio.ShortBuffer.allocate(int);param 1;>=;0]
[java.nio.ShortBuffer.array();ShortBuffer.hasArray;precedes;array]
[java.nio.ShortBuffer.arrayOffset();ShortBuffer.hasArray;precedes;arrayOffset]
[java.nio.channels.NetworkChannel.bind(SocketAddress);Channel.isOpen;precedes;bind]
[java.nio.channels.NetworkChannel.bind(SocketAddress);param 1;!=;null]
[java.nio.channels.NetworkChannel.setOption(SocketOption,T);Channel.isOpen;precedes;setOption]
[java.nio.channels.NetworkChannel.getOption(SocketOption);param 1;!=;null]
[java.nio.channels.SeekableByteChannel.position(long);Channel.isOpen;precedes;position]
[java.nio.channels.SeekableByteChannel.position(long);param 1;>=;0]
[java.nio.channels.SeekableByteChannel.truncate(long);Channel.isOpen;precedes;truncate]
[java.nio.channels.SeekableByteChannel.truncate(long);param 1;>=;0]
[java.nio.channels.AsynchronousChannelGroup.withFixedThreadPool(int,ThreadFactory);param 1;>;0]
[java.nio.channels.AsynchronousChannelGroup.withCachedThreadPool(ExecutorService,int);param 1;!=;null]
[java.nio.channels.AsynchronousChannelGroup.withThreadPool(ExecutorService);param 1;!=;null]
[java.nio.channels.AsynchronousFileChannel.truncate(long);Channel.isOpen;precedes;truncate]
[java.nio.channels.AsynchronousFileChannel.truncate(long);param 1;>=;0]
[java.nio.channels.AsynchronousFileChannel.force(boolean);Channel.isOpen;precedes;force]
[java.nio.channels.AsynchronousFileChannel.read(ByteBuffer,long,A,CompletionHandler);Channel.isOpen;precedes;read]
[java.nio.channels.AsynchronousFileChannel.read(ByteBuffer,long);Channel.isOpen;precedes;read]
[java.nio.channels.AsynchronousFileChannel.write(ByteBuffer,long,A,CompletionHandler);Channel.isOpen;precedes;METHOD]
[java.nio.channels.AsynchronousFileChannel.write(ByteBuffer,long,A,CompletionHandler);Channel.isOpen;precedes;write]
[java.nio.channels.AsynchronousServerSocketChannel.bind(SocketAddress);param 1;!=;null]
[java.nio.channels.AsynchronousServerSocketChannel.bind(SocketAddress);Channel.isOpen;precedes;bind]
[java.nio.channels.AsynchronousServerSocketChannel.accept();AsynchronousServerSocketChannel.bind;precedes;accept]
[java.nio.channels.AsynchronousServerSocketChannel.getLocalAddress();Channel.isOpen;precedes;getLocalAddress]
[java.nio.channels.AsynchronousSocketChannel.bind(SocketAddress);Channel.isOpen;precedes;bind]
[java.nio.channels.AsynchronousSocketChannel.bind(SocketAddress);param 1;!=;null]
[java.nio.channels.AsynchronousSocketChannel.setOption(SocketOption,T);param 1;!=;null]
[java.nio.channels.AsynchronousSocketChannel.getRemoteAddress();Channel.isOpen;precedes;getRemoteAddress]
[java.nio.channels.AsynchronousSocketChannel.connect(SocketAddress);AsynchronousSocketChannel.open;precedes;connect]
[java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer,long,TimeUnit,A,CompletionHandler);isConnected;precedes;read]
[java.nio.channels.AsynchronousSocketChannel.getLocalAddress();Channel.isOpen;precedes;getLocalAddress]
[java.nio.channels.DatagramChannel.bind(SocketAddress);param 1;!=;null]
[java.nio.channels.DatagramChannel.connect(SocketAddress);param 1;!=;null]
[java.nio.channels.DatagramChannel.receive(ByteBuffer);Thread.interrupted;precedes;receive]
[java.nio.channels.DatagramChannel.receive(ByteBuffer);param 1;!=;null]
[java.nio.channels.DatagramChannel.send(ByteBuffer,SocketAddress);param 2;!=;null]
[java.nio.channels.DatagramChannel.read(ByteBuffer);param 1;!=;null]
[java.nio.channels.DatagramChannel.read(ByteBuffer[]);param 1;!=;null]
[java.nio.channels.DatagramChannel.write(ByteBuffer);param 1;!=;null]
[java.nio.channels.DatagramChannel.write(ByteBuffer[],int,int);param 2;>=;0]
[java.nio.channels.FileChannel.open(Path,Set,FileAttribute...);File.exists;precedes;open]
[java.nio.channels.FileChannel.read(ByteBuffer[]);Channel.isOpen;precedes;read]
[java.nio.channels.FileChannel.read(ByteBuffer[]);param 1;!=;null]
[java.nio.channels.FileChannel.write(ByteBuffer);param 1;!=;null]
[java.nio.channels.FileChannel.write(ByteBuffer[],int,int);param 2;>=;0]
[java.nio.channels.FileChannel.write(ByteBuffer[]);param 1;!=;null]
[java.nio.channels.FileChannel.position(long);param 1;>=;0]
[java.nio.channels.FileChannel.truncate(long);param 1;>=;0]
[java.nio.channels.FileChannel.transferTo(long,long,WritableByteChannel);Channel.isOpen;precedes;transferTo]
[java.nio.channels.FileChannel.transferFrom(ReadableByteChannel,long,long);Channel.isOpen;precedes;transferFrom]
[java.nio.channels.FileChannel.read(ByteBuffer,long);Channel.isOpen;precedes;read]
[java.nio.channels.FileChannel.read(ByteBuffer,long);param 2;>=;0]
[java.nio.channels.FileChannel.write(ByteBuffer,long);param 2;>=;0]
[java.nio.channels.FileChannel.write(ByteBuffer,long);Channel.isOpen;precedes;write]
[java.nio.channels.FileChannel.lock(long,long,boolean);Channel.isOpen;precedes;lock]
[java.nio.channels.FileChannel.tryLock(long,long,boolean);Channel.isOpen;precedes;tryLock]
[java.nio.channels.MembershipKey.block(InetAddress);param 1;!=;null]
[java.nio.channels.MembershipKey.unblock(InetAddress);MembershipKey.isValid;precedes;unblock]
[java.nio.channels.SelectableChannel.register(Selector,int,Object);Channel.isOpen;precedes;register]
[java.nio.channels.SelectableChannel.register(Selector,int);Channel.isOpen;precedes;register]
[java.nio.channels.SelectableChannel.configureBlocking(boolean);Channel.isOpen;precedes;configureBlocking]
[java.nio.channels.Selector.select(long);param 1;>=;0]
[java.nio.channels.SocketChannel.bind(SocketAddress);Channel.isOpen;precedes;bind]
[java.nio.channels.SocketChannel.bind(SocketAddress);param 1;!=;null]
[java.nio.channels.SocketChannel.connect(SocketAddress);param 1;!=;null]
[java.nio.channels.SocketChannel.finishConnect();Channel.isOpen;precedes;finishConnect]
[java.nio.channels.spi.AbstractSelectableChannel.register(Selector,int,Object);Channel.isOpen;precedes;register]
[java.nio.channels.spi.AbstractSelectableChannel.configureBlocking(boolean);Channel.isOpen;precedes;configureBlocking]
[java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousChannelGroup(int,ThreadFactory);param 1;>;0]
[java.nio.channels.spi.AsynchronousChannelProvider.openAsynchronousChannelGroup(ExecutorService,int);param 1;!=;null]
[java.nio.charset.CharsetEncoder.replaceWith(byte[]);param 1;!=;null]
[java.nio.charset.CharsetEncoder.protected CharsetEncoder(Charset,float,float);param 2;>;0]
[java.nio.charset.CoderResult.length();CoderResult.isError;precedes;length]
[java.nio.file.Path.getName(int);param 1;>=;0]
[java.nio.file.Path.subpath(int,int);param 1;>=;0]
[java.nio.file.Path.subpath(int,int);param 2;>;param 1]
[java.nio.file.Path.toRealPath(LinkOption...);param 1;!=;null]
[java.nio.file.SecureDirectoryStream.deleteDirectory(T);File.exists;precedes;deleteDirectory]
[java.nio.file.WatchService.poll(long,TimeUnit);param 1;>;0]
[java.nio.file.Files.newInputStream(Path,OpenOption...);File.exists;precedes;newInputStream]
[java.nio.file.Files.newByteChannel(Path,Set,FileAttribute...);File.exists;precedes;newByteChannel]
[java.nio.file.Files.newDirectoryStream(Path);File.isDirectory;precedes;newDirectoryStream]
[java.nio.file.Files.newDirectoryStream(Path,String);File.isDirectory;precedes;newDirectoryStream]
[java.nio.file.Files.newDirectoryStream(Path,DirectoryStream.Filter);File.isDirectory;precedes;newDirectoryStream]
[java.nio.file.Files.createDirectories(Path,FileAttribute...);File.isDirectory;precedes;createDirectories]
[java.nio.file.Files.createTempFile(Path,String,String,FileAttribute...);param 3;!=;null]
[java.nio.file.Files.createTempFile(Path,String,String,FileAttribute...);File.isDirectory;precedes;createTempFile]
[java.nio.file.Files.createTempFile(String,String,FileAttribute...);param 2;!=;null]
[java.nio.file.Files.delete(Path);File.exists;precedes;delete]
[java.nio.file.Files.copy(Path,Path,CopyOption...);File.exists;precedes;copy]
[java.nio.file.Files.readAttributes(Path,Class,LinkOption...);File.exists;precedes;readAttributes]
[java.nio.file.Files.readAttributes(Path,Class,LinkOption...);param 3;!=;null]
[java.nio.file.Files.setAttribute(Path,String,Object,LinkOption...);File.exists;precedes;setAttribute]
[java.nio.file.Files.getPosixFilePermissions(Path,LinkOption...);File.exists;precedes;getPosixFilePermissions]
[java.nio.file.Files.setPosixFilePermissions(Path,Set);File.exists;precedes;setPosixFilePermissions]
[java.nio.file.Files.walkFileTree(Path,Set,int,FileVisitor);param 3;>=;0]
[java.nio.file.Files.write(Path,Iterable,OpenOption...);param 3;!=;null]
[java.nio.file.Files.list(Path);File.isDirectory;precedes;list]
[java.nio.file.Files.walk(Path,int,FileVisitOption...);param 2;>=;0]
[java.nio.file.Files.find(Path,int,BiPredicate,FileVisitOption...);param 2;>=;0]
[java.nio.file.AccessMode.valueOf(String);param 1;!=;null]
[java.nio.file.attribute.AclFileAttributeView.setAcl(List);param 1;!=;null]
[java.nio.file.attribute.FileOwnerAttributeView.setOwner(UserPrincipal);param 1;!=;null]
[java.nio.file.attribute.PosixFileAttributeView.setGroup(GroupPrincipal);param 1;!=;null]
[java.nio.file.attribute.UserDefinedFileAttributeView.size(String);param 1;!=;null]
[java.nio.file.attribute.UserDefinedFileAttributeView.write(String,ByteBuffer);param 2;!=;null]
[java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByName(String);param 1;!=;null]
[java.nio.file.spi.FileSystemProvider.newFileChannel(Path,Set,FileAttribute...);checkAccess;precedes;newFileChannel]
[java.nio.file.spi.FileSystemProvider.readSymbolicLink(Path);FileSystemProvider.isSymbolicLink;precedes;readSymbolicLink]
[java.nio.file.spi.FileSystemProvider.copy(Path,Path,CopyOption...);FileSystemProvider.isSymbolicLink;precedes;source]
[java.rmi.MarshalledObject.MarshalledObject(T);param 1;!=;null]
[java.rmi.activation.ActivationInstantiator.newInstance(ActivationID,ActivationDesc);ActivationInstantiator.activate;precedes;newInstance]
[java.rmi.activation.ActivationSystem.activeGroup(ActivationGroupID,ActivationInstantiator,long);ActivationInstantiator.registerGroup;precedes;activeGroup]
[java.rmi.activation.ActivationGroup.inactiveObject(ActivationID);param 1;!=;null]
[java.rmi.activation.ActivationGroup.inactiveGroup();ActivationInstantiator.registerGroup;precedes;inactiveGroup]
[java.rmi.registry.Registry.unbind(String);param 1;!=;null]
[java.security.AlgorithmConstraints.permits(Set,String,AlgorithmParameters);param 2;!=;null]
[java.security.AlgorithmConstraints.permits(Set,Key);param 2;!=;null]
[java.security.AccessController.doPrivilegedWithCombiner(PrivilegedAction,AccessControlContext,Permission...);param 1;!=;null]
[java.security.AccessController.doPrivilegedWithCombiner(PrivilegedExceptionAction,AccessControlContext,Permission...);param 1;!=;null]
[java.security.AccessController.checkPermission(Permission);param 1;!=;null]
[java.security.AuthProvider.setCallbackHandler(CallbackHandler);param 1;!=;null]
[java.security.DigestOutputStream.write(int);param 1;!=;null]
[java.security.Identity.setPublicKey(PublicKey);param 1;!=;null]
[java.security.Identity.setInfo(String);param 1;!=;null]
[java.security.Identity.removeCertificate(Certificate);param 1;!=;null]
[java.security.IdentityScope.removeIdentity(Identity);param 1;!=;null]
[java.security.KeyStore.getInstance(String,String);param 2;!=;null]
[java.security.KeyStore.setKeyEntry(String,Key,char[],Certificate[]);param 2;!=;null]
[java.security.KeyStore.setKeyEntry(String,byte[],Certificate[]);param 2;!=;null]
[java.security.KeyStoreSpi.engineSetKeyEntry(String,byte[],Certificate[]);param 2;!=;null]
[java.security.KeyStoreSpi.engineGetEntry(String,KeyStore.ProtectionParameter);param 2;!=;null]
[java.security.MessageDigest.getInstance(String,String);param 2;!=;null]
[java.security.Provider.removeService(Provider.Service);param 1;!=;null]
[SecureClassLoader.protected SecureClassLoader(ClassLoader);param 1;!=;null]
[java.security.Signature.initVerify(Certificate);param 1;!=;null]
[java.security.Signature.verify(byte[],int,int);param 2;>=;0]
[java.security.Signature.getParameter(String);param 1;!=;null]
[java.security.SignatureSpi.engineSetParameter(String,Object);param 1;!=;null]
[java.security.SignatureSpi.engineGetParameter(String);param 1;!=;null]
[java.security.Signer.setKeyPair(KeyPair);param 1;!=;null]
[java.security.acl.Acl.addEntry(Principal,AclEntry);Acl.isOwner;precedes;addEntry]
[java.security.acl.Acl.removeEntry(Principal,AclEntry);Acl.isOwner;precedes;removeEntry]
[java.security.acl.Owner.addOwner(Principal,Principal);Acl.isOwner;precedes;addOwner]
[java.security.acl.Owner.deleteOwner(Principal,Principal);Acl.isOwner;precedes;deleteOwner]
[java.security.cert.CertPathValidatorSpi.engineValidate(CertPath,CertPathParameters);param 2;!=;null]
[java.security.cert.CertStore.getInstance(String,CertStoreParameters,String);param 3;!=;null]
[java.security.cert.LDAPCertStoreParameters.LDAPCertStoreParameters(String);param 1;!=;null]
[java.security.cert.PKIXCertPathBuilderResult.PKIXCertPathBuilderResult(CertPath,TrustAnchor,PolicyNode,PublicKey);param 4;!=;null]
[java.security.cert.PKIXCertPathValidatorResult.PKIXCertPathValidatorResult(TrustAnchor,PolicyNode,PublicKey);param 3;!=;null]
[java.security.cert.TrustAnchor.TrustAnchor(,PublicKey,byte[]);param 2;!=;null]
[java.security.cert.X509CertSelector.setSubject(String);param 1;!=;null]
[java.security.cert.X509CertSelector.setPathToNames(Collection);Collection.isEmpty;precedes;setPathToNames]
[java.security.cert.X509CertSelector.addPathToName(int,byte[]);param 2;!=;null]
[java.security.cert.X509CRLSelector.setIssuerNames(Collection);Collection.isEmpty;precedes;setIssuerNames]
[java.security.cert.X509CRLSelector.addIssuerName(String);param 1;!=;null]
[java.security.cert.X509CRLSelector.addIssuerName(byte[]);param 1;!=;null]
[java.security.interfaces.DSAKeyPairGenerator.initialize(DSAParams,SecureRandom);param 1;!=;null]
[java.security.spec.ECFieldFp.ECFieldFp(BigInteger);param 1;!=;null]
[java.security.spec.ECGenParameterSpec.ECGenParameterSpec(String);param 1;!=;null]
[java.security.spec.ECPublicKeySpec.ECPublicKeySpec(ECPoint,ECParameterSpec);param 1;!=;null]
[java.security.spec.ECPublicKeySpec.ECPublicKeySpec(ECPoint,ECParameterSpec);param 1;!=;ECPoint.POINT_INFINITY]
[java.security.spec.PSSParameterSpec.PSSParameterSpec(String,String,AlgorithmParameterSpec,int,int);param 1;!=;null]
[java.security.spec.PSSParameterSpec.PSSParameterSpec(String,String,AlgorithmParameterSpec,int,int);param 2;!=;null]
[java.security.spec.PSSParameterSpec.PSSParameterSpec(String,String,AlgorithmParameterSpec,int,int);param 4;>=;0]
[java.security.spec.PSSParameterSpec.PSSParameterSpec(String,String,AlgorithmParameterSpec,int,int);param 5;>=;0]
[java.security.spec.PSSParameterSpec.PSSParameterSpec(int);param 1;>=;0]
[java.security.spec.RSAMultiPrimePrivateCrtKeySpec.RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,RSAOtherPrimeInfo[],AlgorithmParameterSpec);param 1;!=;null]
[java.security.spec.RSAOtherPrimeInfo.RSAOtherPrimeInfo(BigInteger,BigInteger,BigInteger);param 1;!=;null]
[java.sql.Array.getResultSet(long,int);param 1;>=;0]
[java.sql.Array.getResultSet(long,int);param 2;>;0]
[java.sql.Blob.getBytes(long,int);param 1;>=;0]
[java.sql.CallableStatement.registerOutParameter(int,int);param 1;>;0]
[java.sql.CallableStatement.registerOutParameter(int,int,String);param 1;>;0]
[java.sql.CallableStatement.getRef(String);param 1;!=;null]
[java.sql.Clob.setAsciiStream(long);param 1;>=;1]
[java.sql.Clob.setCharacterStream(long);param 1;>;0]
[java.sql.Clob.truncate(long);param 1;>=;0]
[java.sql.Connection.createStatement();Connection.isValid;precedes;createStatement]
[java.sql.Connection.prepareCall(String);Connection.isClosed;precedes;prepareCall]
[java.sql.Connection.nativeSQL(String);Connection.isClosed;precedes;nativeSQL]
[java.sql.Connection.prepareStatement(String,int,int);Connection.isClosed;precedes;prepareStatement]
[java.sql.Connection.getHoldability();isClosed;precedes;getHoldability]
[java.sql.Connection.releaseSavepoint(Savepoint);param 1;!=;null]
[java.sql.Connection.createSQLXML();Connection.isClosed;precedes;createSQLXML]
[java.sql.Connection.isValid(int);param 1;>=;0]
[java.sql.Connection.createStruct(String,Object[]);Connection.isClosed;precedes;createStruct(String typeName, Object]
[java.sql.Connection.setSchema(String);param 1;!=;null]
[java.sql.Connection.setNetworkTimeout(Executor,int);param 2;>;0]
[java.sql.Connection.setNetworkTimeout(Executor,int);Connection.isClosed;precedes;setNetworkTimeout]
[java.sql.ParameterMetaData.isNullable(int);param 1;!=;null]
[java.sql.ParameterMetaData.getScale(int);param 1;!=;null]
[java.sql.PreparedStatement.setNull(int,int);param 1;>;0]
[java.sql.ResultSet.next();ResultSet.isClosed;precedes;next]
[java.sql.ResultSet.wasNull();ResultSet.isClosed;precedes;wasNull]
[java.sql.ResultSet.getWarnings();ResultSet.isClosed;precedes;getWarnings]
[java.sql.ResultSet.clearWarnings();ResultSet.isClosed;precedes;clearWarnings]
[java.sql.ResultSet.getCursorName();ResultSet.isClosed;precedes;getCursorName]
[java.sql.ResultSet.getMetaData();ResultSet.isClosed;precedes;getMetaData]
[java.sql.ResultSet.findColumn(String);ResultSet.isClosed;precedes;findColumn]
[java.sql.ResultSet.isFirst();ResultSet.isClosed;precedes;isFirst]
[java.sql.ResultSet.isLast();ResultSet.isClosed;precedes;isLast]
[java.sql.ResultSet.relative(int);param 1;>=;0]
[java.sql.ResultSet.setFetchSize(int);param 1;>;0]
[java.sql.ResultSet.getFetchSize();ResultSet.isClosed;precedes;getFetchSize]
[java.sql.ResultSet.getType();ResultSet.isClosed;precedes;getType]
[java.sql.ResultSet.getConcurrency();ResultSet.isClosed;precedes;getConcurrency]
[java.sql.ResultSet.rowUpdated();ResultSet.isClosed;precedes;rowUpdated]
[java.sql.ResultSet.getStatement();ResultSet.isClosed;precedes;getStatement]
[java.sql.ResultSet.getTimestamp(String,Calendar);ResultSet.isClosed;precedes;getTimestamp]
[java.sql.ResultSet.getHoldability();ResultSet.isClosed;precedes;getHoldability]
[java.sql.ResultSet.getObject(int,Class);param 2;!=;null]
[java.sql.ResultSet.getObject(String,Class);param 2;!=;null]
[java.sql.SQLOutput.writeString(String);param 1;!=;null]
[java.sql.SQLOutput.writeByte(byte);param 1;!=;null]
[java.sql.SQLOutput.writeLong(long);param 1;!=;null]
[java.sql.SQLOutput.writeBigDecimal(BigDecimal);param 1;!=;null]
[java.sql.SQLOutput.writeBytes(byte[]);param 1;!=;null]
[java.sql.SQLOutput.writeTime(Time);param 1;!=;null]
[java.sql.SQLOutput.writeTimestamp(Timestamp);param 1;!=;null]
[java.sql.SQLOutput.writeCharacterStream(Reader);param 1;!=;null]
[java.sql.SQLOutput.writeBinaryStream(InputStream);param 1;!=;null]
[java.sql.SQLOutput.writeRef(Ref);param 1;!=;null]
[java.sql.SQLOutput.writeBlob(Blob);param 1;!=;null]
[java.sql.SQLOutput.writeClob(Clob);param 1;!=;null]
[java.sql.SQLOutput.writeStruct(Struct);param 1;!=;null]
[java.sql.SQLOutput.writeNString(String);param 1;!=;null]
[java.sql.SQLOutput.writeNClob(NClob);param 1;!=;null]
[java.sql.SQLOutput.writeSQLXML(SQLXML);param 1;!=;null]
[java.sql.Statement.getMaxFieldSize();Statement.isClosed;precedes;getMaxFieldSize]
[java.sql.Statement.getMaxRows();Statement.isClosed;precedes;getMaxRows]
[java.sql.Statement.setMaxRows(int);param 1;>;0]
[java.sql.Statement.setMaxRows(int);Statement.isClosed;precedes;setMaxRows]
[java.sql.Statement.setQueryTimeout(int);param 1;>;0]
[java.sql.Statement.cancel();Statement.isClosed;precedes;cancel]
[java.sql.Statement.getWarnings();Statement.isClosed;precedes;getWarnings]
[java.sql.Statement.getResultSet();Statement.isClosed;precedes;getResultSet]
[java.sql.Statement.getUpdateCount();Statement.isClosed;precedes;getUpdateCount]
[java.sql.Statement.getMoreResults();Statement.isClosed;precedes;getMoreResults]
[java.sql.Statement.setFetchSize(int);param 1;>;0]
[java.sql.Statement.getFetchSize();Statement.isClosed;precedes;getFetchSize]
[java.sql.Statement.getResultSetConcurrency();isClosed;precedes;getResultSetConcurrency]
[java.sql.Statement.getResultSetType();Statement.isClosed;precedes;getResultSetType]
[java.sql.Statement.addBatch(String);Statement.isClosed;precedes;addBatch]
[java.sql.Statement.getConnection();Statement.isClosed;precedes;getConnection]
[java.sql.Statement.getGeneratedKeys();Statement.isClosed;precedes;getGeneratedKeys]
[java.sql.Statement.executeUpdate(String,int);Statement.isClosed;precedes;executeUpdate]
[java.sql.Statement.executeUpdate(String,int[]);param 2;!=;null]
[java.sql.Statement.executeUpdate(String,int[]);Statement.isClosed;precedes;executeUpdate(String sql, int]
[java.sql.Statement.executeUpdate(String,String[]);Statement.isClosed;precedes;executeUpdate(String sql, String]
[java.sql.Statement.execute(String,int);Statement.isClosed;precedes;execute]
[java.sql.Statement.execute(String,int[]);param 2;!=;null]
[java.sql.Statement.execute(String,String[]);setQueryTimeout;precedes;execute]
[java.sql.Statement.getResultSetHoldability();Statement.isClosed;precedes;getResultSetHoldability]
[java.sql.Statement.setPoolable(boolean);Statement.isClosed;precedes;setPoolable]
[java.sql.Statement.closeOnCompletion();Statement.isClosed;precedes;closeOnCompletion]
[java.sql.Statement.getLargeUpdateCount();Statement.isClosed;precedes;getLargeUpdateCount]
[java.sql.Statement.setLargeMaxRows(long);param 1;>=;0]
[java.sql.Statement.setLargeMaxRows(long);Statement.isClosed;precedes;setLargeMaxRows]
[java.sql.Statement.getLargeMaxRows();Statement.isClosed;precedes;getLargeMaxRows]
[java.sql.Statement.executeLargeUpdate(String,int);Statement.isClosed;precedes;executeLargeUpdate]
[java.sql.Statement.executeLargeUpdate(String,int[]);param 2;!=;null]
[java.sql.Statement.executeLargeUpdate(String,int[]);Statement.isClosed;precedes;executeLargeUpdate(String sql, int]
[java.sql.Statement.executeLargeUpdate(String,String[]);Statement.isClosed;precedes;executeLargeUpdate]
[java.sql.Date.setMinutes(int);param 1;>;0]
[java.sql.Date.setSeconds(int);param 1;>;0]
[java.sql.DriverManager.registerDriver(Driver);param 1;!=;null]
[java.sql.Time.setYear(int);param 1;>;0]
[java.sql.Timestamp.setNanos(int);param 1;<=;999999999]
[java.sql.Timestamp.setNanos(int);param 1;>=;0]
[java.sql.Timestamp.Timestamp(int,int,int,int,int,int,int);param 7;>=;0]
[java.text.Normalizer.isNormalized(CharSequence,Normalizer.Form);param 2;!=;null]
[java.text.NumberFormat.setCurrency(Currency);param 1;!=;null]
[java.text.RuleBasedCollator.compare(String,String);param 2;!=;null]
[java.text.spi.CollatorProvider.getInstance(Locale);CollatorProvider.getAvailableLocales;precedes;getInstance]
[java.text.spi.DecimalFormatSymbolsProvider.getInstance(Locale);CollatorProvider.getAvailableLocales;precedes;getInstance]
[java.time.Duration.plusHours(long);param 1;<=;Long.MAX_VALUE]
[java.time.Duration.plusSeconds(long);param 1;<=;Long.MAX_VALUE]
[java.time.Duration.plusMillis(long);param 1;<=;Long.MAX_VALUE]
[java.time.Duration.plusNanos(long);param 1;<=;Long.MAX_VALUE]
[java.time.Duration.minusDays(long);param 1;<=;Long.MAX_VALUE]
[java.time.Duration.minusMinutes(long);param 1;<=;Long.MAX_VALUE]
[java.time.Duration.minusSeconds(long);param 1;<=;Long.MAX_VALUE]
[java.time.Duration.minusMillis(long);param 1;!=;Long.MIN_VALUE]
[java.time.Duration.minusNanos(long);param 1;!=;Long.MIN_VALUE]
[java.time.Duration.dividedBy(long);param 1;!=;0]
[java.time.Duration.addTo(Temporal);Duration.isZero;precedes;addTo]
[java.time.Instant.get(TemporalField);Instant.isValidValue;precedes;get]
[java.time.Instant.minus(TemporalAmount);param 1;!=;null]
[java.time.Instant.minus(long,TemporalUnit);param 1;>;0]
[java.time.Instant.minusSeconds(long);param 1;<=;Long.MAX_VALUE]
[java.time.Instant.minusMillis(long);param 1;!=;Long.MIN_VALUE]
[java.time.Instant.query(TemporalQuery);Instant.isValidValue;precedes;query]
[java.time.Instant.compareTo(Instant);param 1;!=;null]
[java.time.Instant.isAfter(Instant);param 1;!=;null]
[java.time.Instant.isBefore(Instant);param 1;!=;null]
[java.time.LocalDate.plusDays(long);param 1;>=;0]
[java.time.LocalDate.minus(TemporalAmount);param 1;!=;null]
[java.time.LocalDateTime.get(TemporalField);LocalDateTime.isSupported;precedes;get]
[java.time.LocalDateTime.truncatedTo(TemporalUnit);param 1;!=;null]
[java.time.LocalDateTime.plus(TemporalAmount);param 1;!=;null]
[java.time.LocalDateTime.plus(long,TemporalUnit);param 1;>=;0]
[LocalDateTime.minus(TemporalAmount);param 1;!=;null]
[java.time.LocalTime.ofNanoOfDay(long);param 1;>=;0]
[java.time.LocalTime.get(TemporalField);LocalTime.isSupported;precedes;get]
[java.time.LocalTime.getLong(TemporalField);LocalTime.isSupported;precedes;getLong]
[java.time.LocalTime.with(TemporalField,long);LocalTime.isSupported;precedes;with]
[java.time.LocalTime.truncatedTo(TemporalUnit);param 1;!=;null]
[java.time.LocalTime.plus(TemporalAmount);param 1;!=;null]
[java.time.LocalTime.plus(long,TemporalUnit);param 1;>=;0]
[java.time.LocalTime.minus(TemporalAmount);param 1;!=;null]
[java.time.LocalTime.compareTo(LocalTime);param 1;!=;null]
[java.time.MonthDay.range(TemporalField);MonthDay.isSupported;precedes;range]
[java.time.OffsetDateTime.range(TemporalField);MonthDay.isSupported;precedes;range]
[java.time.OffsetDateTime.get(TemporalField);MonthDay.isSupported;precedes;get]
[OffsetDateTime.with(TemporalField,long);OffsetDateTime.isSupported;precedes;Check if the field is supported]
[java.time.OffsetDateTime.truncatedTo(TemporalUnit);param 1;!=;null]
[java.time.OffsetDateTime.plus(TemporalAmount);param 1;!=;null]
[java.time.OffsetDateTime.plus(long,TemporalUnit);param 1;>=;0]
[java.time.OffsetDateTime.plusNanos(long);param 1;>;0]
[java.time.OffsetDateTime.minus(long,TemporalUnit);param 1;>;0]
[java.time.OffsetTime.range(TemporalField);OffsetDateTime.isSupported;precedes;range]
[java.time.OffsetTime.get(TemporalField);OffsetDateTime.isSupported;precedes;get]
[java.time.OffsetTime.truncatedTo(TemporalUnit);param 1;!=;null]
[java.time.OffsetTime.plus(TemporalAmount);param 1;!=;null]
[java.time.OffsetTime.plus(long,TemporalUnit);param 1;>=;0]
[java.time.OffsetTime.compareTo(OffsetTime);param 1;!=;null]
[java.time.Period.plusYears(long);param 1;<=;Long.MAX_VALUE]
[java.time.Period.minusYears(long);param 1;<=;Long.MAX_VALUE]
[java.time.Period.minusMonths(long);param 1;<=;Long.MAX_VALUE]
[java.time.Year.plus(long,TemporalUnit);param 1;>=;0]
[java.time.Year.plus(long,TemporalUnit);param 1;<=;Long.MAX_VALUE]
[java.time.Year.atDay(int);param 1;<;366]
[java.time.Year.atDay(int);Year.isLeap;precedes;atDay]
[java.time.YearMonth.with(TemporalField,long);param 2;>=;null]
[java.time.YearMonth.plus(long,TemporalUnit);param 1;>;0]
[java.time.YearMonth.minus(TemporalAmount);param 1;!=;null]
[java.time.ZoneOffset.range(TemporalField);ZoneOffset.isSupported;precedes;range]
[java.time.ZoneOffset.get(TemporalField);ZoneOffset.isSupported;precedes;get]
[java.time.ZoneOffset.get(TemporalField);ZoneOffset.isValidValue;precedes;get]
[java.time.ZoneOffset.getLong(TemporalField);ZoneOffset.isSupported;precedes;getLong]
[java.time.chrono.ChronoLocalDate.plus(TemporalAmount);param 1;!=;null]
[java.time.chrono.ChronoLocalDate.until(ChronoLocalDate);param 1;!=;null]
[java.time.chrono.ChronoLocalDateTime.format(DateTimeFormatter);param 1;!=;null]
[java.time.chrono.Chronology.dateYearDay(int,int);param 1;>;0]
[java.time.chrono.ChronoPeriod.minus(TemporalAmount);param 1;!=;null]
[java.time.chrono.ChronoZonedDateTime.minus(long,TemporalUnit);param 1;<=;Long.MAX_VALUE]
[java.time.chrono.ChronoZonedDateTime.format(DateTimeFormatter);param 1;!=;null]
[java.time.chrono.Era.range(TemporalField);param 1;!=;null]
[java.time.chrono.HijrahChronology.dateYearDay(Era,int,int);param 2;>;0]
[java.time.chrono.IsoChronology.dateYearDay(Era,int,int);param 2;>;0]
[java.time.chrono.IsoChronology.dateYearDay(int,int);param 1;>;0]
[java.time.chrono.JapaneseChronology.dateYearDay(Era,int,int);param 2;>;0]
[java.time.chrono.JapaneseChronology.dateYearDay(int,int);param 1;>;0]
[java.time.chrono.JapaneseEra.range(TemporalField);JapaneseEra.isSupported;precedes;range]
[java.time.chrono.JapaneseEra.range(TemporalField);param 1;!=;null]
[java.time.chrono.MinguoChronology.dateYearDay(Era,int,int);param 2;>;0]
[java.time.chrono.ThaiBuddhistChronology.dateYearDay(Era,int,int);param 2;>;0]
[java.time.chrono.HijrahEra.valueOf(String);param 1;!=;null]
[java.time.format.DateTimeFormatterBuilder.getLocalizedDateTimePattern(FormatStyle,FormatStyle,Chronology,Locale);param 2;!=;null]
[java.time.format.DateTimeFormatterBuilder.appendLocalized(FormatStyle,FormatStyle);param 2;!=;null]
[java.time.format.DateTimeFormatterBuilder.optionalEnd();DateTimeFormatterBuilder.optionalStart;precedes;optionalEnd]
[java.time.format.SignStyle.valueOf(String);param 1;!=;null]
[java.time.format.TextStyle.valueOf(String);param 1;!=;null]
[java.time.temporal.Temporal.with(TemporalField,long);Temporal.isSupported;precedes;with]
[java.time.temporal.Temporal.plus(TemporalAmount);Temporal.isValidValue;precedes;plus]
[java.time.temporal.Temporal.minus(TemporalAmount);param 1;!=;null]
[java.time.temporal.TemporalAccessor.range(TemporalField);TemporalAccessor.isSupported;precedes;range]
[java.time.temporal.TemporalAccessor.get(TemporalField);TemporalAccessor.isSupported;precedes;get]
[java.time.temporal.TemporalAccessor.get(TemporalField);TemporalAccessor.isIntValue;precedes;get]
[java.time.temporal.TemporalField.rangeRefinedBy(TemporalAccessor);TemporalField.isSupported;precedes;rangeRefinedBy]
[java.time.temporal.TemporalField.getFrom(TemporalAccessor);TemporalField.isSupported;precedes;getFrom]
[java.time.temporal.TemporalField.getFrom(TemporalAccessor);TemporalField.range;precedes;getFrom]
[java.time.temporal.TemporalField.adjustInto(R,long);TemporalField.isSupported;precedes;adjustInto]
[java.time.temporal.TemporalField.resolve(Map,TemporalAccessor,ResolverStyle);TemporalField.isSupported;precedes;resolve]
[java.time.temporal.TemporalUnit.addTo(temporal,amount);param 2;!=;null]
[java.time.temporal.ValueRange.of(long,long,long);param 2;<=;param 3]
[java.time.temporal.ValueRange.of(long,long,long,long);param 3;<=;param 4]
[java.time.temporal.WeekFields.of(DayOfWeek,int);param 2;>=;1]
[java.time.temporal.WeekFields.of(DayOfWeek,int);param 2;<=;7]
[java.time.zone.ZoneRulesProvider.registerProvider(ZoneRulesProvider);param 1;!=;null]
[java.time.zone.ZoneRulesProvider.refresh();ZoneRulesProvider.provideRefresh;precedes;refresh]
[java.util.Collection.contains(Object);param 1;!=;null]
[java.util.Collection.add(E);param 1;!=;null]
[java.util.Collection.remove(Object);param 1;!=;null]
[java.util.Collection.containsAll(Collection);param 1;!=;null]
[java.util.Collection.addAll(Collection);param 1;!=;null]
[java.util.Collection.removeIf(Predicate);param 1;!=;null]
[java.util.Comparator.compare(T,T);param 1;!=;null]
[java.util.Comparator.compare(T,T);param 2;!=;null]
[java.util.Comparator.thenComparing(Function,Comparator);param 1;!=;null]
[java.util.Comparator.thenComparing(Function);param 1;!=;null]
[java.util.Comparator.thenComparingLong(ToLongFunction);param 1;!=;null]
[java.util.Deque.addFirst(E);param 1;!=;null]
[java.util.Deque.addLast(E);param 1;!=;null]
[java.util.Deque.offerFirst(E);param 1;!=;null]
[java.util.Deque.offerLast(E);param 1;!=;null]
[java.util.Deque.removeFirstOccurrence(Object);param 1;!=;null]
[java.util.Deque.removeLastOccurrence(Object);param 1;!=;null]
[java.util.Deque.add(E);param 1;!=;null]
[java.util.Deque.offer(E);param 1;!=;null]
[java.util.Deque.push(E);param 1;!=;null]
[java.util.Deque.remove(Object);specified element;!=;null]
[java.util.Deque.remove(Object);param 1;!=;null]
[java.util.Deque.contains(Object);param 1;!=;null]
[java.util.Enumeration.nextElement();Enumeration.hasMoreElements;precedes;nextElement]
[java.util.Iterator.next();Iterator.hasNext;precedes;next]
[java.util.Iterator.remove();Iterator.next;precedes;remove]
[java.util.List.contains(Object);param 1;!=;null]
[java.util.List.add(E);param 1;!=;null]
[java.util.List.remove(Object);param 1;!=;null]
[java.util.List.containsAll(Collection);param 1;!=;null]
[java.util.ListIterator.next();ListIterator.hasNext;precedes;next]
[java.util.ListIterator.remove();ListIterator.next;precedes;remove]
[java.util.ListIterator.set(E);param 1;!=;null]
[java.util.ListIterator.set(E);ListIterator.previous;precedes;set]
[java.util.Map.containsKey(Object);param 1;!=;null]
[java.util.Map.containsValue(Object);param 1;!=;null]
[java.util.Map.get(Object);param 1;!=;null]
[java.util.Map.put(K,V);param 2;!=;null]
[java.util.Map.remove(Object);param 1;!=;null]
[java.util.Map.forEach(BiConsumer);param 1;!=;null]
[java.util.Map.replaceAll(BiFunction);param 1;!=;null]
[java.util.Map.remove(Object,Object);param 2;!=;null]
[java.util.Map.remove(Object,Object);param 1;!=;null]
[java.util.Map.replace(K,V);param 2;!=;null]
[java.util.Map.merge(K,V,BiFunction);param 2;!=;null]
[java.util.Map.merge(K,V,BiFunction);param 3;!=;null]
[java.util.NavigableMap.lowerEntry(K);param 1;!=;null]
[java.util.NavigableMap.floorEntry(K);param 1;!=;null]
[java.util.NavigableMap.ceilingEntry(K);param 1;!=;null]
[java.util.NavigableMap.higherEntry(K);param 1;!=;null]
[java.util.NavigableMap.headMap(K);param 1;!=;null]
[java.util.NavigableMap.tailMap(K);param 1;!=;null]
[java.util.NavigableSet.lower(E);param 1;!=;null]
[java.util.NavigableSet.floor(E);param 1;!=;null]
[java.util.NavigableSet.ceiling(E);param 1;!=;null]
[java.util.NavigableSet.higher(E);param 1;!=;null]
[java.util.NavigableSet.tailSet(E);param 1;!=;null]
[java.util.Queue.add(E);param 1;!=;null]
[java.util.Queue.element();Queue.isEmpty;precedes;element]
[java.util.SortedMap.tailMap(K);param 1;!=;null]
[java.util.SortedSet.subSet(E,E);param 1;!=;null]
[java.util.SortedSet.subSet(E,E);param 2;!=;null]
[java.util.SortedSet.headSet(E);param 1;!=;null]
[java.util.SortedSet.tailSet(E);param 1;!=;null]
[java.util.SortedSet.last();SortedSet.isEmpty;precedes;last]
[java.util.Spliterator.forEachRemaining(Consumer);param 1;!=;null]
[java.util.AbstractCollection.contains(Object);param 1;!=;null]
[java.util.AbstractCollection.add(E);param 1;!=;null]
[java.util.AbstractCollection.remove(Object);param 1;!=;null]
[java.util.AbstractCollection.containsAll(Collection);param 1;!=;null]
[java.util.AbstractCollection.addAll(Collection);param 1;!=;null]
[java.util.AbstractList.add(E);param 1;!=;null]
[java.util.AbstractList.indexOf(Object);param 1;!=;null]
[java.util.AbstractList.lastIndexOf(Object);param 1;!=;null]
[java.util.AbstractList.addAll(int,Collection);param 2;!=;null]
[java.util.AbstractMap.containsValue(Object);param 1;!=;null]
[java.util.AbstractMap.containsKey(Object);param 1;!=;null]
[java.util.AbstractMap.get(Object);param 1;!=;null]
[java.util.AbstractMap.remove(Object);AbstractMap.containsKey;precedes;remove]
[java.util.AbstractMap.remove(Object);param 1;!=;null]
[java.util.AbstractQueue.add(E);param 1;!=;null]
[java.util.AbstractQueue.addAll(Collection);param 1;!=;null]
[java.util.AbstractSequentialList.set(int,E);param 2;!=;null]
[java.util.ArrayDeque.addLast(E);param 1;!=;null]
[java.util.ArrayDeque.offerFirst(E);param 1;!=;null]
[java.util.ArrayDeque.offerLast(E);param 1;!=;null]
[java.util.ArrayDeque.add(E);param 1;!=;null]
[java.util.ArrayDeque.offer(E);param 1;!=;null]
[java.util.ArrayDeque.push(E);param 1;!=;null]
[java.util.ArrayDeque.toArray(T[]);a;>;null]
[ArrayList.ArrayList(int);param 1;>=;0]
[java.util.Arrays.sort(int[],int,int);param 3;<=;param 1.length]
[java.util.Arrays.sort(short[],int,int);param 3;<=;param 1.length]
[java.util.Arrays.sort(char[],int,int);param 3;<=;param 1.length]
[java.util.Arrays.sort(double[],int,int);param 3;<=;param 1.length]
[java.util.Arrays.parallelSort(byte[],int,int);param 3;<=;param 1.length]
[java.util.Arrays.parallelSort(char[],int,int);param 3;<=;param 1.length]
[java.util.Arrays.parallelSort(short[],int,int);param 3;<=;param 1.length]
[java.util.Arrays.parallelSort(int[],int,int);param 3;<=;param 1.length]
[java.util.Arrays.parallelSort(long[],int,int);param 3;<=;param 1.length]
[java.util.Arrays.parallelSort(float[],int,int);param 3;<=;param 1.length]
[java.util.Arrays.parallelSort(double[],int,int);param 3;<=;param 1.length]
[java.util.Arrays.parallelSort(T[],int,int,Comparator);param 3;<=;param 1.length]
[java.util.Arrays.sort(Object[],int,int);param 3;<=;param 1.length]
[java.util.Arrays.sort(T[],int,int,Comparator);param 3;<=;param 1.length]
[java.util.Arrays.parallelPrefix(T[],int,int,BinaryOperator);param 3;<=;param 1.length]
[java.util.Arrays.parallelPrefix(long[],int,int,LongBinaryOperator);param 4;!=;null]
[java.util.Arrays.parallelPrefix(double[],int,int,DoubleBinaryOperator);param 4;!=;null]
[java.util.Arrays.parallelPrefix(int[],int,int,IntBinaryOperator);param 3;<=;param 1.length]
[java.util.Arrays.binarySearch(Object[],int,int,Object);param 3;<=;param 1.length]
[java.util.Arrays.copyOf(T[],int);param 2;>=;0]
[java.util.Arrays.copyOf(U[],int,Class);param 2;>=;0]
[java.util.Arrays.copyOf(byte[],int);param 2;>=;0]
[java.util.Arrays.copyOf(short[],int);param 2;>=;0]
[java.util.Arrays.copyOf(int[],int);param 2;>=;0]
[java.util.Arrays.copyOf(long[],int);param 2;>=;0]
[java.util.Arrays.copyOf(char[],int);param 2;>=;0]
[java.util.Arrays.copyOf(float[],int);param 2;>=;0]
[java.util.Arrays.copyOfRange(U[],int,int,Class);param 1;!=;null]
[java.util.Arrays.stream(T[],int,int);param 2;>=;0]
[java.util.Arrays.stream(long[],int,int);param 2;>=;0]
[java.util.Arrays.stream(double[],int,int);param 2;>=;0]
[java.util.Arrays.stream(double[],int,int);param 3;<=;param 1.length]
[java.util.BitSet.flip(int,int);param 1;>=;0]
[java.util.BitSet.flip(int,int);param 2;>=;0]
[java.util.BitSet.set(int,int);param 1;>=;0]
[java.util.BitSet.set(int,int);param 2;>=;0]
[java.util.BitSet.clear(int,int);param 1;>=;0]
[java.util.BitSet.clear(int,int);param 2;>=;0]
[java.util.BitSet.clear(int,int);param 1;<;param 2]
[java.util.BitSet.get(int,int);param 1;>=;0]
[java.util.BitSet.get(int,int);param 2;>=;0]
[java.util.Collections.disjoint(Collection,Collection);param 1;!=;null]
[java.util.Collections.disjoint(Collection,Collection);param 2;!=;null]
[java.util.Collections.addAll(Collection,T...);param 2;!=;null]
[java.util.Collections.newSetFromMap(Map);Collections.isEmpty;precedes;newSetFromMap]
[java.util.Currency.getInstance(String);param 1;!=;null]
[java.util.Dictionary.put(K,V);param 2;!=;null]
[java.util.Formatter.Formatter(String,String);File.isWritable;precedes;Formatter]
[java.util.Formatter.Formatter(String,String);File.exists;precedes; Formatter]
[java.util.Formatter.Formatter(File);File.isWritable;precedes;public Formatter]
[java.util.Formatter.Formatter(File);File.exists;precedes;public Formatter]
[java.util.Formatter.Formatter(File,String);File.isWritable;precedes;Formatter]
[java.util.HashMap.HashMap(int,float);param 2;>;0]
[java.util.HashSet.HashSet(int,float);param 2;>;0]
[java.util.HashSet.HashSet(int);param 1;>=;0]
[java.util.Hashtable.contains(Object);param 1;!=;null]
[java.util.Hashtable.containsValue(Object);param 1;!=;null]
[java.util.Hashtable.put(K,V);param 2;!=;null]
[java.util.Hashtable.remove(Object);param 1;!=;null]
[java.util.Hashtable.Hashtable(int,float);param 2;>;0]
[java.util.Hashtable.public Hashtable(int);param 1;>=;0]
[java.util.IdentityHashMap.IdentityHashMap(int);param 1;>=;0]
[java.util.LinkedHashMap.LinkedHashMap(int,float);param 2;>;0]
[java.util.LinkedHashMap.LinkedHashMap(int);param 1;>=;0]
[java.util.LinkedHashSet.LinkedHashSet(int,float);param 2;>;0]
[java.util.Locale.filter(List,Collection,Locale.FilteringMode);param 1;!=;null]
[java.util.Locale.filterTags(List,Collection,Locale.FilteringMode);param 1;!=;null]
[java.util.Observable.addObserver(Observer);param 1;!=;null]
[java.util.Optional.get();Optional.isPresent;precedes;get]
[java.util.OptionalLong.getAsLong();Optional.isPresent;precedes;getAsLong]
[java.util.PriorityQueue.add(E);param 1;!=;null]
[java.util.PriorityQueue.offer(E);param 1;!=;null]
[java.util.PriorityQueue.PriorityQueue(int);param 1;>=;1]
[java.util.PriorityQueue.PriorityQueue(Collection);param 1;!=;null]
[java.util.PriorityQueue.PriorityQueue(PriorityQueue);param 1;!=;null]
[java.util.Random.ints(long);param 1;>=;0]
[java.util.Random.ints(long,int,int);param 2;<;param 3]
[java.util.Random.longs(long);param 1;>=;0]
[java.util.Random.longs(long,long,long);param 2;<;param 3]
[java.util.Random.doubles(long);param 1;>=;0]
[java.util.Random.doubles(long,double,double);param 2;<=;param 3]
[java.util.Scanner.next();Scanner.hasNext;precedes;next]
[java.util.Scanner.next(String);Scanner.hasNext;precedes;next]
[java.util.Scanner.next(Pattern);Scanner.hasNext;precedes;next]
[java.util.Scanner.nextLine();Scanner.hasNextLine;precedes;nextLine]
[java.util.Scanner.findWithinHorizon(String,int);param 2;>=;0]
[java.util.Scanner.findWithinHorizon(Pattern,int);param 2;>=;0]
[java.util.Scanner.nextBoolean();Scanner.hasNextBoolean;precedes;nextBoolean]
[java.util.Scanner.nextByte();Scanner.hasNextByte;precedes;nextByte]
[java.util.Scanner.nextShort();Scanner.hasNextShort;precedes;nextShort]
[java.util.Scanner.nextInt();Scanner.hasNextInt;precedes;nextInt]
[java.util.Scanner.nextFloat();Scanner.hasNextFloat;precedes;nextFloat]
[java.util.SimpleTimeZone.getOffset(int,int,int,int,int,int);param 6;>=;0]
[java.util.Spliterators.spliterator(int[],int,int,int);param 2;>=;0]
[java.util.Spliterators.spliterator(int[],int,int,int);param 3;>=;param 2]
[java.util.Spliterators.spliterator(long[],int,int,int);param 3;<=;param 1.length]
[java.util.Spliterators.spliterator(double[],int,int,int);param 3;>=;param 2]
[java.util.SplittableRandom.ints(long);param 1;>=;0]
[java.util.SplittableRandom.ints(long,int,int);param 2;<;param 3]
[java.util.SplittableRandom.longs(long);param 1;>=;0]
[java.util.SplittableRandom.longs(long,long,long);param 2;<;param 3]
[java.util.SplittableRandom.doubles(long);param 1;>=;0]
[java.util.SplittableRandom.doubles(long,double,double);param 2;<=;param 3]
[java.util.Stack.pop();Stack.empty;precedes;pop]
[java.util.StringJoiner.setEmptyValue(CharSequence);param 1;!=;null]
[java.util.StringJoiner.merge(StringJoiner);param 1;!=;null]
[java.util.StringTokenizer.nextToken();StringTokenizer.hasMoreTokens;precedes;nextToken]
[java.util.StringTokenizer.nextToken(String);StringTokenizer.hasMoreTokens;precedes;nextToken]
[java.util.StringTokenizer.nextElement();StringTokenizer.hasMoreTokens;precedes;nextElement]
[java.util.Timer.schedule(TimerTask,long);param 2;>=;0]
[java.util.Timer.schedule(TimerTask,long,long);param 3;>;0]
[java.util.Timer.schedule(TimerTask,Date,long);param 3;>;0]
[java.util.Timer.scheduleAtFixedRate(TimerTask,long,long);param 3;>;0]
[java.util.Timer.scheduleAtFixedRate(TimerTask,Date,long);param 3;>;0]
[java.util.TreeMap.containsKey(Object);param 1;!=;null]
[java.util.TreeMap.get(Object);param 1;!=;null]
[java.util.TreeMap.remove(Object);param 1;!=;null]
[java.util.TreeMap.remove(Object);TreeMap.containsKey;precedes;remove]
[java.util.TreeMap.lowerEntry(K);param 1;!=;null]
[java.util.TreeMap.lowerKey(K);param 1;!=;null]
[java.util.TreeMap.floorEntry(K);param 1;!=;null]
[java.util.TreeMap.floorKey(K);param 1;!=;null]
[java.util.TreeMap.ceilingEntry(K);param 1;!=;null]
[java.util.TreeMap.ceilingKey(K);param 1;!=;null]
[java.util.TreeMap.higherEntry(K);param 1;!=;null]
[java.util.TreeMap.higherKey(K);param 1;!=;null]
[java.util.TreeMap.headMap(K);param 1;!=;null]
[java.util.TreeSet.contains(Object);param 1;!=;null]
[java.util.TreeSet.add(E);param 1;!=;null]
[java.util.TreeSet.remove(Object);param 1;!=;null]
[java.util.TreeSet.addAll(Collection);param 1;!=;null]
[java.util.TreeSet.tailSet(E);param 1;!=;null]
[java.util.TreeSet.first();TreeSet.isEmpty;precedes;first]
[java.util.TreeSet.last();TreeSet.isEmpty;precedes;last]
[java.util.TreeSet.lower(E);param 1;!=;null]
[java.util.TreeSet.floor(E);param 1;!=;null]
[java.util.TreeSet.ceiling(E);param 1;!=;null]
[java.util.Vector.setSize(int);param 1;>=;0]
[java.util.Vector.Vector(int);param 1;>=;0]
[java.util.WeakHashMap.public WeakHashMap(int,float);param 2;>;0]
[java.util.WeakHashMap.public WeakHashMap(int);param 1;>=;0]
[java.util.concurrent.BlockingDeque.addFirst(E);param 1;!=;null]
[java.util.concurrent.BlockingDeque.addFirst(E);BlockingDeque.contains;precedes;addFirst]
[java.util.concurrent.BlockingDeque.addLast(E);param 1;!=;null]
[java.util.concurrent.BlockingDeque.offerFirst(E);param 1;!=;null]
[java.util.concurrent.BlockingDeque.offerLast(E);param 1;!=;null]
[java.util.concurrent.BlockingDeque.putFirst(E);param 1;!=;null]
[java.util.concurrent.BlockingDeque.putLast(E);param 1;!=;null]
[java.util.concurrent.BlockingDeque.removeFirstOccurrence(Object);param 1;!=;null]
[java.util.concurrent.BlockingDeque.removeLastOccurrence(Object);param 1;!=;null]
[java.util.concurrent.BlockingDeque.add(E);param 1;!=;null]
[java.util.concurrent.BlockingDeque.add(E);BlockingDeque.contains;precedes;add]
[java.util.concurrent.BlockingDeque.offer(E);param 1;!=;null]
[java.util.concurrent.BlockingDeque.put(E);param 1;!=;null]
[java.util.concurrent.BlockingDeque.remove(Object);param 1;!=;null]
[java.util.concurrent.BlockingDeque.contains(Object);param 1;!=;null]
[java.util.concurrent.BlockingDeque.push(E);param 1;!=;null]
[java.util.concurrent.BlockingQueue.add(E);param 1;!=;null]
[java.util.concurrent.BlockingQueue.offer(E);param 1;!=;null]
[java.util.concurrent.BlockingQueue.put(E);param 1;!=;null]
[java.util.concurrent.BlockingQueue.remove(Object);param 1;!=;null]
[java.util.concurrent.BlockingQueue.contains(Object);param 1;!=;null]
[java.util.concurrent.Callable.call();Callable.isDone;precedes;call]
[java.util.concurrent.CompletionService.poll(long,TimeUnit);param 1;>;0]
[java.util.concurrent.ConcurrentMap.putIfAbsent(K,V);param 2;!=;null]
[java.util.concurrent.ConcurrentMap.remove(Object,Object);param 2;!=;null]
[java.util.concurrent.ConcurrentMap.replace(K,V,V);param 2;!=;null]
[java.util.concurrent.ConcurrentMap.replace(K,V);param 2;!=;null]
[java.util.concurrent.ConcurrentMap.replaceAll(BiFunction);param 1;!=;null]
[java.util.concurrent.ConcurrentMap.computeIfAbsent(K,Function);param 2;!=;null]
[java.util.concurrent.ConcurrentMap.computeIfPresent(K,BiFunction);param 2;!=;null]
[java.util.concurrent.ConcurrentMap.merge(K,V,BiFunction);param 2;!=;null]
[java.util.concurrent.ConcurrentMap.merge(K,V,BiFunction);param 3;!=;null]
[java.util.concurrent.ExecutorService.awaitTermination(long,TimeUnit);param 1;>;0]
[java.util.concurrent.ExecutorService.invokeAll(Collection>,long,TimeUnit);param 2;>=;0]
[java.util.concurrent.ExecutorService.invokeAll(Collection>,long,TimeUnit);param 1;!=;null]
[java.util.concurrent.ExecutorService.invokeAll(Collection>,long,TimeUnit);param 3;!=;null]
[java.util.concurrent.ExecutorService.invokeAny(Collection>,long,TimeUnit);param 2;>;0]
[java.util.concurrent.Future.get(long,TimeUnit);Thread.interrupted;precedes;get]
[java.util.concurrent.ScheduledExecutorService.schedule(Runnable,long,TimeUnit);param 2;>=;0]
[java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(Runnable,long,long,TimeUnit);param 3;>;0]
[java.util.concurrent.ScheduledExecutorService.scheduleWithFixedDelay(Runnable,long,long,TimeUnit);param 3;>;0]
[java.util.concurrent.TransferQueue.transfer(E);param 1;!=;null]
[java.util.concurrent.TransferQueue.tryTransfer(E,long,TimeUnit);param 1;!=;null]
[java.util.concurrent.AbstractExecutorService.invokeAny(Collection>,long,TimeUnit);param 2;>;0]
[java.util.concurrent.AbstractExecutorService.invokeAll(Collection>,long,TimeUnit);param 2;>=;0]
[java.util.concurrent.ArrayBlockingQueue.add(E);param 1;!=;null]
[java.util.concurrent.ArrayBlockingQueue.offer(E);param 1;!=;null]
[java.util.concurrent.ArrayBlockingQueue.put(E);param 1;!=;null]
[java.util.concurrent.ArrayBlockingQueue.take();Thread.interrupted;precedes;take]
[java.util.concurrent.ArrayBlockingQueue.poll(long,TimeUnit);param 1;>;0]
[java.util.concurrent.CompletableFuture.join();CompletableFuture.isCompletedExceptionally;precedes;join]
[java.util.concurrent.CompletableFuture.allOf(CompletableFuture...);param 1;!=;null]
[java.util.concurrent.CompletableFuture.anyOf(CompletableFuture...);param 1;!=;null]
[java.util.concurrent.ConcurrentHashMap.containsKey(Object);param 1;!=;null]
[java.util.concurrent.ConcurrentHashMap.containsValue(Object);param 1;!=;null]
[java.util.concurrent.ConcurrentHashMap.put(K,V);param 1;!=;null]
[java.util.concurrent.ConcurrentHashMap.put(K,V);param 2;!=;null]
[java.util.concurrent.ConcurrentHashMap.remove(Object);param 1;!=;null]
[java.util.concurrent.ConcurrentHashMap.putIfAbsent(K,V);param 2;!=;null]
[java.util.concurrent.ConcurrentHashMap.replace(K,V);param 2;!=;null]
[java.util.concurrent.ConcurrentHashMap.computeIfAbsent(K,Function);param 2;!=;null]
[java.util.concurrent.ConcurrentHashMap.computeIfAbsent(K,Function);param 1;!=;null]
[java.util.concurrent.ConcurrentHashMap.computeIfPresent(K,BiFunction);param 2;!=;null]
[java.util.concurrent.ConcurrentHashMap.merge(K,V,BiFunction);param 3;!=;null]
[java.util.concurrent.ConcurrentHashMap.contains(Object);param 1;!=;null]
[java.util.concurrent.ConcurrentHashMap.newKeySet(int);param 1;>=;0]
[java.util.concurrent.ConcurrentHashMap.keySet(V);param 1;!=;null]
[java.util.concurrent.ConcurrentHashMap.ConcurrentHashMap(int);param 1;>=;0]
[java.util.concurrent.ConcurrentHashMap.ConcurrentHashMap(int,float);param 2;>;0]
[java.util.concurrent.ConcurrentHashMap.ConcurrentHashMap(int,float,int);param 2;>;0]
[java.util.concurrent.ConcurrentHashMap.ConcurrentHashMap(int,float,int);param 3;>;0]
[java.util.concurrent.ConcurrentLinkedDeque.addFirst(E);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedDeque.addLast(E);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedDeque.offerFirst(E);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedDeque.offerLast(E);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedDeque.offer(E);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedDeque.add(E);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedDeque.pop();ConcurrentLinkedDeque.isEmpty;precedes;pop]
[java.util.concurrent.ConcurrentLinkedDeque.push(E);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedDeque.removeFirstOccurrence(Object);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedDeque.removeLastOccurrence(Object);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedDeque.remove(Object);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedDeque.addAll(Collection);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedDeque.ConcurrentLinkedDeque(Collection);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedQueue.add(E);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedQueue.offer(E);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedQueue.addAll(Collection);param 1;!=;null]
[java.util.concurrent.ConcurrentLinkedQueue.ConcurrentLinkedQueue(Collection);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.containsKey(Object);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.remove(Object);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.containsValue(Object);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.computeIfAbsent(K,Function);param 2;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.computeIfPresent(K,BiFunction);param 2;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.compute(K,BiFunction);param 2;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.merge(K,V,BiFunction);param 2;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.merge(K,V,BiFunction);param 3;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.putIfAbsent(K,V);param 2;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.remove(Object,Object);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.replace(K,V,V);param 2;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.replace(K,V);param 2;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.headMap(K);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.lowerEntry(K);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.floorKey(K);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.ceilingEntry(K);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.ceilingKey(K);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.higherEntry(K);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListMap.ConcurrentSkipListMap(Map);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListSet.contains(Object);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListSet.add(E);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListSet.remove(Object);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListSet.removeAll(Collection);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListSet.lower(E);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListSet.floor(E);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListSet.ceiling(E);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListSet.higher(E);param 1;!=;null]
[java.util.concurrent.ConcurrentSkipListSet.ConcurrentSkipListSet(Collection);param 1;!=;null]
[java.util.concurrent.CopyOnWriteArraySet.removeAll(Collection);param 1;!=;null]
[java.util.concurrent.CountDownLatch.await(long,TimeUnit);Thread.interrupted;precedes;await]
[java.util.concurrent.CountDownLatch.CountDownLatch(int);param 1;>=;0]
[java.util.concurrent.CyclicBarrier.await(long,TimeUnit);param 1;>;0]
[java.util.concurrent.CyclicBarrier.CyclicBarrier(int,Runnable);param 1;>=;1]
[java.util.concurrent.CyclicBarrier.CyclicBarrier(int);param 1;>=;1]
[java.util.concurrent.DelayQueue.poll(long,TimeUnit);param 1;>;0]
[java.util.concurrent.DelayQueue.DelayQueue(Collection);param 1;!=;null]
[java.util.concurrent.Exchanger.exchange(V,long,TimeUnit);Thread.interrupted;precedes;exchange]
[java.util.concurrent.ExecutorCompletionService.poll(long,TimeUnit);param 1;>;0]
[java.util.concurrent.Executors.newFixedThreadPool(int);param 1;>;0]
[java.util.concurrent.Executors.newFixedThreadPool(int,ThreadFactory);param 2;!=;null]
[java.util.concurrent.Executors.newScheduledThreadPool(int);param 1;>=;0]
[java.util.concurrent.Executors.newScheduledThreadPool(int,ThreadFactory);param 2;!=;null]
[java.util.concurrent.Executors.unconfigurableExecutorService(ExecutorService);param 1;!=;null]
[java.util.concurrent.ForkJoinPool.awaitTermination(long,TimeUnit);param 1;>;0]
[java.util.concurrent.ForkJoinTask.invokeAll(ForkJoinTask...);param 1;!=;null]
[java.util.concurrent.ForkJoinTask.invokeAll(Collection);param 1;!=;null]
[java.util.concurrent.ForkJoinTask.get(long,TimeUnit);param 1;>;0]
[java.util.concurrent.LinkedBlockingDeque.addFirst(E);param 1;!=;null]
[java.util.concurrent.LinkedBlockingDeque.addLast(E);param 1;!=;null]
[java.util.concurrent.LinkedBlockingDeque.offerFirst(E);param 1;!=;null]
[java.util.concurrent.LinkedBlockingDeque.offerLast(E);param 1;!=;null]
[java.util.concurrent.LinkedBlockingDeque.offerFirst(E,long,TimeUnit);param 1;!=;null]
[java.util.concurrent.LinkedBlockingDeque.offerLast(E,long,TimeUnit);param 2;>;0]
[java.util.concurrent.LinkedBlockingDeque.pollFirst(long,TimeUnit);param 1;>;0]
[java.util.concurrent.LinkedBlockingDeque.add(E);param 1;!=;null]
[java.util.concurrent.LinkedBlockingDeque.offer(E);param 1;!=;null]
[java.util.concurrent.LinkedBlockingDeque.offer(E,long,TimeUnit);param 1;!=;null]
[java.util.concurrent.LinkedBlockingDeque.element();LinkedBlockingDeque.isEmpty;precedes;element]
[java.util.concurrent.LinkedBlockingDeque.push(E);param 1;!=;null]
[java.util.concurrent.LinkedBlockingDeque.toArray(T[]);a;>;null]
[java.util.concurrent.LinkedBlockingDeque.LinkedBlockingDeque(Collection);param 1;!=;null]
[java.util.concurrent.LinkedBlockingQueue.offer(E);param 1;!=;null]
[java.util.concurrent.LinkedBlockingQueue.drainTo(Collection);LinkedBlockingQueue.contains;precedes;drainTo]
[java.util.concurrent.LinkedBlockingQueue.LinkedBlockingQueue(Collection);param 1;!=;null]
[java.util.concurrent.LinkedTransferQueue.offer(E,long,TimeUnit);param 1;!=;null]
[java.util.concurrent.LinkedTransferQueue.offer(E);param 1;!=;null]
[java.util.concurrent.LinkedTransferQueue.add(E);param 1;!=;null]
[java.util.concurrent.LinkedTransferQueue.tryTransfer(E);param 1;!=;null]
[java.util.concurrent.LinkedTransferQueue.tryTransfer(E,long,TimeUnit);param 1;!=;null]
[java.util.concurrent.Phaser.arrive();Phaser.isTerminated;precedes;arrive]
[java.util.concurrent.Phaser.arriveAndDeregister();Phaser.isTerminated;precedes;arriveAndDeregister]
[java.util.concurrent.Phaser.arriveAndAwaitAdvance();Phaser.isTerminated;precedes;arriveAndAwaitAdvance]
[java.util.concurrent.Phaser.arriveAndAwaitAdvance();Phaser.getUnarrivedParties;precedes;arriveAndAwaitAdvance]
[Phaser.Phaser(Phaser,int);param 2;>=;0]
[java.util.concurrent.PriorityBlockingQueue.add(E);param 1;!=;null]
[java.util.concurrent.PriorityBlockingQueue.offer(E);param 1;!=;null]
[java.util.concurrent.PriorityBlockingQueue.put(E);param 1;!=;null]
[java.util.concurrent.PriorityBlockingQueue.drainTo(Collection);PriorityBlockingQueue.contains;precedes;drainTo]
[java.util.concurrent.PriorityBlockingQueue.drainTo(Collection,int);param 1;!=;null]
[java.util.concurrent.PriorityBlockingQueue.PriorityBlockingQueue(int);param 1;>=;1]
[java.util.concurrent.PriorityBlockingQueue.PriorityBlockingQueue(Collection);param 1;!=;null]
[java.util.concurrent.ScheduledThreadPoolExecutor.schedule(Runnable,long,TimeUnit);param 2;>=;0]
[java.util.concurrent.ScheduledThreadPoolExecutor.scheduleWithFixedDelay(Runnable,long,long,TimeUnit);param 3;>;0]
[java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int);param 1;>=;0]
[java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int,ThreadFactory);param 1;>=;0]
[java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int,ThreadFactory);param 2;!=;null]
[java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int,RejectedExecutionHandler);param 2;!=;null]
[java.util.concurrent.ScheduledThreadPoolExecutor.ScheduledThreadPoolExecutor(int,ThreadFactory,RejectedExecutionHandler);param 3;!=;null]
[java.util.concurrent.Semaphore.tryAcquire(long,TimeUnit);Thread.interrupted;precedes;tryAcquire]
[java.util.concurrent.Semaphore.acquireUninterruptibly(int);param 1;>=;0]
[java.util.concurrent.Semaphore.tryAcquire(int);param 1;>=;0]
[java.util.concurrent.Semaphore.tryAcquire(int,long,TimeUnit);param 1;>=;0]
[java.util.concurrent.Semaphore.release(int);param 1;>=;0]
[java.util.concurrent.Semaphore.reducePermits(int);param 1;>=;0]
[java.util.concurrent.SynchronousQueue.offer(E);param 1;!=;null]
[java.util.concurrent.ThreadLocalRandom.setSeed(long);param 1;>=;0]
[java.util.concurrent.ThreadLocalRandom.ints(long);param 1;>=;0]
[java.util.concurrent.ThreadLocalRandom.ints(long,int,int);param 2;<;param 3]
[java.util.concurrent.ThreadLocalRandom.longs(long);param 1;>=;0]
[java.util.concurrent.ThreadLocalRandom.longs(long,long,long);param 2;<;param 3]
[java.util.concurrent.ThreadLocalRandom.doubles(long);param 1;>=;0]
[java.util.concurrent.ThreadLocalRandom.doubles(long,double,double);param 2;<=;param 3]
[java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,TimeUnit);param 1;>;0]
[java.util.concurrent.ThreadPoolExecutor.setCorePoolSize(int);param 1;>=;0]
[java.util.concurrent.ThreadPoolExecutor.setKeepAliveTime(long,TimeUnit);param 1;>=;0]
[java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue,ThreadFactory);ThreadPoolExecutor.getCorePoolSize;precedes;ThreadPoolExecutor]
[java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue,ThreadFactory);param 6;!=;null]
[java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue,RejectedExecutionHandler);ThreadPoolExecutor.getCorePoolSize;precedes;ThreadPoolExecutor]
[java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue,RejectedExecutionHandler);param 6;!=;null]
[java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue,ThreadFactory,RejectedExecutionHandler);ThreadPoolExecutor.getCorePoolSize;precedes;ThreadPoolExecutor]
[java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue,ThreadFactory,RejectedExecutionHandler);param 6;!=;null]
[java.util.concurrent.ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue,ThreadFactory,RejectedExecutionHandler);param 7;!=;null]
[java.util.concurrent.TimeUnit.timedWait(Object,long);TimeUnit.isInterrupted;precedes;timedWait]
[java.util.concurrent.locks.Condition.awaitNanos(long);param 1;>=;0]
[java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryReleaseShared(long);param 1;>;0]
[java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isQueued(Thread);param 1;!=;null]
[java.util.concurrent.locks.AbstractQueuedLongSynchronizer.owns(AbstractQueuedLongSynchronizer.ConditionObject);param 1;!=;null]
[java.util.concurrent.locks.AbstractQueuedSynchronizer.tryReleaseShared(int);param 1;>;0]
[java.util.concurrent.locks.AbstractQueuedSynchronizer.isQueued(Thread);param 1;!=;null]
[java.util.concurrent.locks.AbstractQueuedSynchronizer.owns(AbstractQueuedSynchronizer.ConditionObject);param 1;!=;null]
[java.util.concurrent.locks.AbstractQueuedSynchronizer.getWaitingThreads(AbstractQueuedSynchronizer.ConditionObject);param 1;!=;null]
[java.util.concurrent.locks.ReentrantLock.hasQueuedThread(Thread);param 1;!=;null]
[java.util.concurrent.locks.ReentrantLock.hasWaiters(Condition);param 1;!=;null]
[java.util.concurrent.locks.ReentrantLock.getWaitQueueLength(Condition);ReentrantLock.isLocked;precedes;getWaitQueueLength]
[java.util.concurrent.locks.ReentrantLock.getWaitingThreads(Condition);ReentrantLock.isLocked;precedes;getWaitingThreads]
[java.util.concurrent.locks.ReentrantReadWriteLock.hasQueuedThread(Thread);param 1;!=;null]
[java.util.concurrent.locks.ReentrantReadWriteLock.hasWaiters(Condition);param 1;!=;null]
[java.util.concurrent.locks.ReentrantReadWriteLock.getWaitQueueLength(Condition);ReentrantReadWriteLock.acquire;precedes;getWaitQueueLength]
[java.util.concurrent.locks.StampedLock.tryWriteLock(long,TimeUnit);Thread.interrupted;precedes;tryWriteLock]
[java.util.concurrent.locks.StampedLock.tryReadLock(long,TimeUnit);Thread.interrupted;precedes;tryReadLock]
[java.util.function.BiPredicate.or(BiPredicate);param 1;!=;null]
[java.util.function.Function.compose(Function);param 1;!=;null]
[java.util.function.IntConsumer.andThen(IntConsumer);param 1;!=;null]
[java.util.function.LongConsumer.andThen(LongConsumer);param 1;!=;null]
[java.util.function.Predicate.and(Predicate);param 1;!=;null]
[java.util.jar.JarInputStream.read(byte[],int,int);param 1;!=;null]
[FileHandler.FileHandler(String);File.exists;precedes;FileHandler]
[FileHandler.FileHandler(String,boolean);File.exists;precedes;FileHandler]
[java.util.prefs.AbstractPreferences.put(String,String);param 2;!=;null]
[java.util.prefs.AbstractPreferences.put(String,String);AbstractPreferences.isRemoved;precedes;put]
[java.util.prefs.AbstractPreferences.get(String,String);AbstractPreferences.isRemoved;precedes;get]
[java.util.prefs.AbstractPreferences.get(String,String);param 2;!=;null]
[java.util.prefs.AbstractPreferences.putInt(String,int);AbstractPreferences.isRemoved;precedes;putInt]
[java.util.prefs.AbstractPreferences.getInt(String,int);AbstractPreferences.isRemoved;precedes;getInt]
[java.util.prefs.AbstractPreferences.putLong(String,long);AbstractPreferences.isRemoved;precedes;putLong]
[java.util.prefs.AbstractPreferences.getLong(String,long);AbstractPreferences.isRemoved;precedes;getLong]
[java.util.prefs.AbstractPreferences.getBoolean(String,boolean);AbstractPreferences.isRemoved;precedes;getBoolean]
[java.util.prefs.AbstractPreferences.putDouble(String,double);AbstractPreferences.isRemoved;precedes;putDouble]
[java.util.prefs.AbstractPreferences.getDouble(String,double);AbstractPreferences.isRemoved;precedes;getDouble]
[java.util.prefs.AbstractPreferences.getByteArray(String,byte[]);param 2;!=;null]
[java.util.prefs.AbstractPreferences.parent();AbstractPreferences.isRemoved;precedes;parent]
[java.util.prefs.AbstractPreferences.removeNode();AbstractPreferences.isRemoved;precedes;removeNode]
[java.util.prefs.Preferences.putInt(String,int);Preferences.isRemoved;precedes;putInt]
[java.util.prefs.Preferences.getInt(String,int);Preferences.isRemoved;precedes;getInt]
[java.util.prefs.Preferences.getLong(String,long);Preferences.isRemoved;precedes;getLong]
[java.util.prefs.Preferences.getBoolean(String,boolean);Preferences.isRemoved;precedes;getBoolean]
[java.util.prefs.Preferences.getFloat(String,float);Preferences.isRemoved;precedes;getFloat]
[java.util.prefs.Preferences.putDouble(String,double);Preferences.isRemoved;precedes;putDouble]
[java.util.prefs.Preferences.getDouble(String,double);Preferences.isRemoved;precedes;getDouble]
[java.util.prefs.Preferences.childrenNames();Preferences.isRemoved;precedes;childrenNames]
[java.util.prefs.Preferences.node(String);Preferences.nodeExists;precedes;node]
[java.util.prefs.Preferences.addPreferenceChangeListener(PreferenceChangeListener);param 1;!=;null]
[java.util.prefs.Preferences.addPreferenceChangeListener(PreferenceChangeListener);Preferences.isRemoved;precedes;addPreferenceChangeListener]
[java.util.prefs.Preferences.removePreferenceChangeListener(PreferenceChangeListener);param 1;!=;null]
[java.util.prefs.Preferences.removePreferenceChangeListener(PreferenceChangeListener);Preferences.isRemoved;precedes;removePreferenceChangeListener]
[java.util.prefs.Preferences.addNodeChangeListener(NodeChangeListener);param 1;!=;null]
[java.util.prefs.Preferences.addNodeChangeListener(NodeChangeListener);PROCESS FUNCTION's name;relationship;METHOD's name]
[java.util.prefs.Preferences.addNodeChangeListener(NodeChangeListener);Preferences.nodeExists;precedes;addNodeChangeListener]
[java.util.prefs.Preferences.exportSubtree(OutputStream);Preferences.isRemoved;precedes;exportSubtree]
[java.util.regex.Matcher.appendReplacement(StringBuffer,String);Matcher.hitEnd;precedes;appendReplacement]
[java.util.spi.LocaleNameProvider.getDisplayVariant(String,Locale);LocaleNameProvider.getAvailableLocales;precedes;getDisplayVariant]
[java.util.spi.TimeZoneNameProvider.getGenericDisplayName(String,int,Locale);LocaleNameProvider.getAvailableLocales;precedes;getGenericDisplayName]
[java.util.stream.DoubleStream.limit(long);param 1;>=;0]
[java.util.stream.IntStream.limit(long);param 1;>=;0]
[java.util.stream.LongStream.limit(long);param 1;>=;0]
[java.util.stream.Stream.skip(long);param 1;>=;0]
[java.util.stream.Stream.min(Comparator);param 1;!=;null]
[java.util.zip.CheckedInputStream.skip(long);param 1;>=;0]
[java.util.zip.DeflaterInputStream.skip(long);param 1;>;0]
[java.util.zip.InflaterInputStream.skip(long);param 1;>=;0]
[java.util.zip.ZipEntry.setLastAccessTime(FileTime);param 1;!=;null]
[java.util.zip.ZipEntry.setSize(long);param 1;>=;0]
[java.util.zip.ZipInputStream.skip(long);param 1;>=;0]
[javax.activation.DataContentHandler.writeTo(Object,String,OutputStream);param 3;!=;null]
[javax.crypto.Cipher.init(int,Key,AlgorithmParameterSpec);param 3;!=;null]
[javax.crypto.Cipher.init(int,Key,AlgorithmParameterSpec,SecureRandom);param 3;!=;null]
[javax.crypto.Cipher.init(int,Key,AlgorithmParameters);param 3;!=;null]
[javax.crypto.Cipher.init(int,Key,AlgorithmParameters,SecureRandom);param 3;!=;null]
[javax.crypto.Cipher.update(byte[],int,int,byte[]);param 4;>=;param 3]
[javax.crypto.Cipher.doFinal(byte[],int,int);Cipher.updateAAD;precedes;doFinal]
[javax.crypto.Cipher.doFinal(byte[],int,int);Cipher.init;precedes;doFinal]
[javax.crypto.Cipher.doFinal(byte[],int,int,byte[],int);Cipher.updateAAD;precedes;doFinal]
[javax.crypto.Cipher.doFinal(byte[],int,int,byte[],int);Cipher.init;precedes;doFinal]
[javax.crypto.Cipher.doFinal(ByteBuffer,ByteBuffer);Cipher.updateAAD;precedes;doFinal]
[javax.crypto.Cipher.doFinal(ByteBuffer,ByteBuffer);Cipher.init;precedes;doFinal]
[javax.crypto.Cipher.getMaxAllowedKeyLength(String);param 1;!=;null]
[javax.crypto.Cipher.updateAAD(ByteBuffer);param 1;!=;null]
[javax.crypto.CipherInputStream.read(byte[]);param 1;!=;null]
[javax.crypto.CipherInputStream.skip(long);param 1;>;0]
[javax.crypto.CipherInputStream.CipherInputStream(InputStream,Cipher);param 2;!=;null]
[javax.crypto.CipherOutputStream.write(int);param 1;!=;null]
[javax.crypto.CipherOutputStream.CipherOutputStream(OutputStream,Cipher);param 2;!=;null]
[javax.crypto.CipherSpi.engineInit(int,Key,AlgorithmParameterSpec,SecureRandom);param 3;!=;null]
[javax.crypto.CipherSpi.engineInit(int,Key,AlgorithmParameters,SecureRandom);param 3;!=;null]
[javax.crypto.CipherSpi.engineUpdate(ByteBuffer,ByteBuffer);param 1;!=;null]
[javax.crypto.CipherSpi.engineWrap(Key);CipherSpi.engineSetPadding;precedes;engineWrap]
[javax.crypto.CipherSpi.engineUpdateAAD(ByteBuffer);param 1;!=;null]
[javax.crypto.EncryptedPrivateKeyInfo.EncryptedPrivateKeyInfo(String,byte[]);param 2;!=;null]
[javax.crypto.EncryptedPrivateKeyInfo.EncryptedPrivateKeyInfo(AlgorithmParameters,byte[]);param 2;!=;null]
[javax.crypto.ExemptionMechanismSpi.engineInit(Key);param 1;!=;null]
[javax.crypto.KeyAgreement.getInstance(String);param 1;!=;null]
[javax.crypto.KeyAgreement.getInstance(String,String);param 2;!=;null]
[javax.crypto.KeyAgreement.doPhase(Key,boolean);KeyAgreement.init;precedes;doPhase]
[javax.crypto.KeyGenerator.getInstance(String);param 1;!=;null]
[javax.crypto.KeyGenerator.init(int);param 1;>;0]
[javax.crypto.Mac.update(byte);Mac.init;precedes;update]
[javax.crypto.Mac.update(byte[]);Mac.init;precedes;update]
[javax.crypto.Mac.update(byte[],int,int);Mac.init;precedes;update]
[javax.crypto.Mac.update(ByteBuffer);Mac.init;precedes;update]
[javax.crypto.Mac.doFinal();Mac.init;precedes;doFinal]
[javax.crypto.Mac.doFinal(byte[],int);Mac.init;precedes;doFinal]
[javax.crypto.Mac.doFinal(byte[]);Mac.init;precedes;doFinal]
[javax.crypto.SealedObject.protected SealedObject(SealedObject);param 1;!=;null]
[javax.crypto.SecretKeyFactory.getInstance(String);param 1;!=;null]
[javax.crypto.spec.DESedeKeySpec.isParityAdjusted(byte[],int);param 1;!=;null]
[javax.crypto.spec.DESedeKeySpec.DESedeKeySpec(byte[],int);param 1;!=;null]
[javax.crypto.spec.DESKeySpec.isParityAdjusted(byte[],int);param 1;!=;null]
[javax.crypto.spec.DESKeySpec.isWeak(byte[],int);param 1;!=;null]
[javax.crypto.spec.DESKeySpec.DESKeySpec(byte[],int);param 1;!=;null]
[javax.crypto.spec.GCMParameterSpec.GCMParameterSpec(int,byte[]);param 1;>=;0]
[javax.crypto.spec.GCMParameterSpec.GCMParameterSpec(int,byte[]);param 2;!=;null]
[javax.crypto.spec.GCMParameterSpec.GCMParameterSpec(int,byte[],int,int);param 1;>=;0]
[javax.crypto.spec.GCMParameterSpec.GCMParameterSpec(int,byte[],int,int);param 2;!=;null]
[javax.crypto.spec.GCMParameterSpec.GCMParameterSpec(int,byte[],int,int);param 4;>=;0]
[javax.crypto.spec.IvParameterSpec.IvParameterSpec(byte[]);param 1;!=;null]
[javax.crypto.spec.OAEPParameterSpec.OAEPParameterSpec(String,String,AlgorithmParameterSpec,PSource);param 2;!=;null]
[javax.crypto.spec.OAEPParameterSpec.OAEPParameterSpec(String,String,AlgorithmParameterSpec,PSource);param 4;!=;null]
[javax.crypto.spec.RC2ParameterSpec.RC2ParameterSpec(int,byte[]);param 2;!=;null]
[javax.crypto.spec.RC2ParameterSpec.RC2ParameterSpec(int,byte[],int);param 2;!=;null]
[javax.crypto.spec.RC5ParameterSpec.RC5ParameterSpec(int,int,int,byte[]);param 4;!=;null]
[javax.crypto.spec.SecretKeySpec.SecretKeySpec(byte[],String);param 2;!=;null]
[javax.imageio.IIOParam.setSourceRegion(Rectangle);param 1;>;0]
[javax.imageio.IIOParam.setSourceRegion(Rectangle);param 1;!=;0]
[javax.imageio.IIOParam.setDestinationOffset(Point);param 1;!=;null]
[javax.imageio.ImageIO.getImageWriter(ImageReader);param 1;!=;null]
[javax.imageio.ImageIO.read(File);File.exists;precedes;read]
[javax.imageio.ImageIO.write(RenderedImage,String,ImageOutputStream);param 1;!=;null]
[javax.imageio.ImageIO.write(RenderedImage,String,File);param 1;!=;null]
[javax.imageio.ImageIO.write(RenderedImage,String,File);param 2;!=;null]
[javax.imageio.ImageIO.write(RenderedImage,String,OutputStream);param 1;!=;null]
[javax.imageio.ImageIO.write(RenderedImage,String,OutputStream);param 2;!=;null]
[javax.imageio.ImageReader.getWidth(int);ImageReader.setInput;precedes;getWidth]
[javax.imageio.ImageReader.getHeight(int);ImageReader.setInput;precedes;getHeight]
[javax.imageio.ImageReader.getAspectRatio(int);ImageReader.setInput;precedes;getAspectRatio]
[javax.imageio.ImageReader.getImageTypes(int);ImageReader.setInput;precedes;getImageTypes]
[javax.imageio.ImageReader.getImageMetadata(int);ImageReader.setInput;precedes;getImageMetadata]
[javax.imageio.ImageReader.getImageMetadata(int,String,Set);ImageReader.setInput;precedes;getImageMetadata]
[javax.imageio.ImageReader.getImageMetadata(int,String,Set);param 2;!=;null]
[javax.imageio.ImageReader.getImageMetadata(int,String,Set);param 3;!=;null]
[javax.imageio.ImageReader.read(int);ImageReader.setInput;precedes;read]
[javax.imageio.ImageReader.read(int,ImageReadParam);ImageReader.setInput;precedes;read]
[javax.imageio.ImageReader.readAll(int,ImageReadParam);ImageReader.setInput;precedes;readAll]
[javax.imageio.ImageReader.readAll(Iterator);ImageReader.setInput;precedes;readAll]
[javax.imageio.ImageReader.readRaster(int,ImageReadParam);ImageReader.setInput;precedes;readRaster]
[javax.imageio.ImageReader.getTileWidth(int);ImageReader.setInput;precedes;getTileWidth]
[javax.imageio.ImageReader.getTileHeight(int);ImageReader.setInput;precedes;getTileHeight]
[javax.imageio.ImageReader.getTileGridYOffset(int);param 1;>=;0]
[javax.imageio.ImageReader.readTile(int,int,int);ImageReader.setInput;precedes;readTile]
[javax.imageio.ImageReader.readTileRaster(int,int,int);ImageReader.setInput;precedes;readTileRaster]
[javax.imageio.ImageReader.hasThumbnails(int);ImageReader.readerSupportsThumbnails;precedes;hasThumbnails]
[javax.imageio.ImageReader.hasThumbnails(int);ImageReader.setInput;precedes;hasThumbnails]
[javax.imageio.ImageReader.hasThumbnails(int);ImageReader.readerSupportsThumbnails;precedes;hasThumbnails]
[javax.imageio.ImageReader.getNumThumbnails(int);ImageReader.setInput;precedes;getNumThumbnails]
[javax.imageio.ImageReader.readThumbnail(int,int);ImageReader.readerSupportsThumbnails;precedes;readThumbnail]
[javax.imageio.ImageReader.readThumbnail(int,int);ImageReader.setInput;precedes;readThumbnail]
[javax.imageio.ImageReader.processWarningOccurred(String,String);param 2;!=;null]
[javax.imageio.ImageReader.computeRegions(ImageReadParam,int,int,BufferedImage,Rectangle,Rectangle);param 5;!=;null]
[javax.imageio.ImageReader.computeRegions(ImageReadParam,int,int,BufferedImage,Rectangle,Rectangle);dstRegion;!=;null]
[javax.imageio.ImageReader.computeRegions(ImageReadParam,int,int,BufferedImage,Rectangle,Rectangle);ImageReader.getSourceRegion;precedes;computeRegions]
[javax.imageio.ImageReader.checkReadParamBandSettings(ImageReadParam,int,int);param 3;>=;0]
[javax.imageio.ImageTypeSpecifier.createPacked(ColorSpace,int,int,int,int,int,boolean);ImageTypeSpecifier.getType;precedes;createPacked]
[javax.imageio.ImageTypeSpecifier.createInterleaved(ColorSpace,int[],int,boolean,boolean);ImageTypeSpecifier.getNumBands;precedes;createInterleaved(ColorSpace colorSpace, int]
[javax.imageio.ImageTypeSpecifier.createGrayscale(int,int,boolean);ImageTypeSpecifier.getDataTypeSize;precedes;createGrayscale]
[javax.imageio.ImageTypeSpecifier.createIndexed(byte[],byte[],byte[],byte[],int,int);param 1;!=;null]
[javax.imageio.ImageTypeSpecifier.createIndexed(byte[],byte[],byte[],byte[],int,int);param 2;!=;null]
[javax.imageio.ImageTypeSpecifier.createIndexed(byte[],byte[],byte[],byte[],int,int);param 3;!=;null]
[javax.imageio.ImageTypeSpecifier.getBitsPerBand(int);param 1;>=;0]
[javax.imageio.ImageTypeSpecifier.ImageTypeSpecifier(RenderedImage);param 1;!=;null]
[javax.imageio.ImageWriteParam.setTilingMode(int);ImageWriteParam.canWriteTiles;precedes;setTilingMode]
[javax.imageio.ImageWriteParam.getTilingMode();ImageWriteParam.canWriteTiles;precedes;getTilingMode]
[javax.imageio.ImageWriteParam.setTiling(int,int,int,int);param 1;>;0]
[javax.imageio.ImageWriteParam.setTiling(int,int,int,int);param 2;>;0]
[javax.imageio.ImageWriteParam.setProgressiveMode(int);ImageWriteParam.canWriteProgressive;precedes;setProgressiveMode]
[javax.imageio.ImageWriteParam.getProgressiveMode();ImageWriteParam.canWriteProgressive;precedes;getProgressiveMode]
[javax.imageio.ImageWriteParam.setCompressionMode(int);ImageWriteParam.canWriteCompressed;precedes;setCompressionMode]
[javax.imageio.ImageWriteParam.getCompressionMode();ImageWriteParam.canWriteCompressed;precedes;getCompressionMode]
[javax.imageio.ImageWriteParam.getCompressionTypes();ImageWriteParam.canWriteCompressed;precedes;getCompressionTypes]
[javax.imageio.ImageWriteParam.getCompressionType();ImageWriteParam.canWriteCompressed;precedes;getCompressionType]
[javax.imageio.ImageWriteParam.getLocalizedCompressionTypeName();ImageWriteParam.canWriteCompressed;precedes;getLocalizedCompressionTypeName]
[javax.imageio.ImageWriteParam.getLocalizedCompressionTypeName();ImageWriteParam.setCompressionType;precedes;getLocalizedCompressionTypeName]
[javax.imageio.ImageWriteParam.isCompressionLossless();ImageWriteParam.canWriteCompressed;precedes;isCompressionLossless]
[javax.imageio.ImageWriteParam.setCompressionQuality(float);ImageWriteParam.canWriteCompressed;precedes;setCompressionQuality]
[javax.imageio.ImageWriteParam.setCompressionQuality(float);param 1;>=;0]
[javax.imageio.ImageWriteParam.setCompressionQuality(float);param 1;<=;1]
[javax.imageio.ImageWriteParam.getCompressionQuality();ImageWriteParam.canWriteCompressed;precedes;getCompressionQuality]
[javax.imageio.ImageWriteParam.getCompressionQualityDescriptions();ImageWriteParam.canWriteCompressed;precedes;getCompressionQualityDescriptions]
[javax.imageio.ImageWriteParam.getCompressionQualityValues();ImageWriteParam.canWriteCompressed;precedes;getCompressionQualityValues]
[javax.imageio.ImageWriter.write(IIOMetadata,IIOImage,ImageWriteParam);ImageWriter.setOutput;precedes;write]
[javax.imageio.ImageWriter.write(IIOMetadata,IIOImage,ImageWriteParam);param 2;!=;null]
[javax.imageio.ImageWriter.prepareWriteSequence(IIOMetadata);ImageWriter.canWriteSequence;precedes;prepareWriteSequence]
[javax.imageio.ImageWriter.endWriteSequence();ImageWriter.setOutput;precedes;endWriteSequence]
[javax.imageio.ImageWriter.endWriteSequence();ImageWriter.prepareWriteSequence;precedes;endWriteSequence]
[javax.imageio.ImageWriter.replaceStreamMetadata(IIOMetadata);ImageWriter.canReplaceStreamMetadata;precedes;replaceStreamMetadata]
[javax.imageio.ImageWriter.canReplaceImageMetadata(int);param 1;>=;0]
[javax.imageio.ImageWriter.canInsertImage(int);ImageWriter.setOutput;precedes;canInsertImage]
[javax.imageio.ImageWriter.writeInsert(int,IIOImage,ImageWriteParam);ImageWriter.setOutput;precedes;writeInsert]
[javax.imageio.ImageWriter.writeInsert(int,IIOImage,ImageWriteParam);ImageWriter.canInsertImage;precedes;writeInsert]
[javax.imageio.ImageWriter.writeInsert(int,IIOImage,ImageWriteParam);param 2;!=;null]
[javax.imageio.ImageWriter.canRemoveImage(int);param 1;>=;0]
[javax.imageio.ImageWriter.removeImage(int);ImageWriter.canRemoveImage;precedes;removeImage]
[javax.imageio.ImageWriter.removeImage(int);param 1;>=;0]
[javax.imageio.ImageWriter.canWriteEmpty();ImageWriter.setOutput;precedes;canWriteEmpty]
[javax.imageio.ImageWriter.prepareWriteEmpty(IIOMetadata,ImageTypeSpecifier,int,int,IIOMetadata,List,ImageWriteParam);ImageWriter.setOutput;precedes;prepareWriteEmpty]
[javax.imageio.ImageWriter.prepareWriteEmpty(IIOMetadata,ImageTypeSpecifier,int,int,IIOMetadata,List,ImageWriteParam);param 2;!=;null]
[javax.imageio.ImageWriter.prepareWriteEmpty(IIOMetadata,ImageTypeSpecifier,int,int,IIOMetadata,List,ImageWriteParam);param 6;!=;null]
[javax.imageio.ImageWriter.endInsertEmpty();ImageWriter.setOutput;precedes;endInsertEmpty]
[javax.imageio.ImageWriter.endInsertEmpty();ImageWriter.canInsertEmpty;precedes;endInsertEmpty]
[javax.imageio.ImageWriter.canReplacePixels(int);ImageWriter.setOutput;precedes;canReplacePixels]
[javax.imageio.ImageWriter.canReplacePixels(int);param 1;>=;0]
[javax.imageio.ImageWriter.prepareReplacePixels(int,Rectangle);ImageWriter.canReplacePixels;precedes;prepareReplacePixels]
[javax.imageio.ImageWriter.prepareReplacePixels(int,Rectangle);param 2;!=;null]
[javax.imageio.ImageWriter.replacePixels(Raster,ImageWriteParam);ImageWriter.canReplacePixels;precedes;replacePixels]
[javax.imageio.ImageWriter.replacePixels(Raster,ImageWriteParam);param 2;!=;null]
[javax.imageio.ImageWriter.endReplacePixels();ImageWriter.canReplacePixels;precedes;endReplacePixels]
[javax.imageio.ImageWriter.endReplacePixels();ImageWriter.prepareReplacePixels;precedes;endReplacePixels]
[javax.imageio.ImageWriter.processWarningOccurred(int,String);param 2;!=;null]
[javax.imageio.ImageWriter.processWarningOccurred(int,String,String);param 3;!=;null]
[javax.imageio.metadata.IIOMetadataFormat.getAttributeValueType(String,String);param 2;!=;null]
[javax.imageio.metadata.IIOMetadataFormat.isAttributeRequired(String,String);param 2;!=;null]
[javax.imageio.metadata.IIOMetadataFormat.getAttributeDefaultValue(String,String);param 2;!=;null]
[javax.imageio.metadata.IIOMetadataFormat.getAttributeEnumerations(String,String);param 2;!=;null]
[javax.imageio.metadata.IIOMetadataFormat.getAttributeListMinLength(String,String);param 2;!=;null]
[javax.imageio.metadata.IIOMetadataFormat.getAttributeListMaxLength(String,String);param 2;!=;null]
[javax.imageio.metadata.IIOMetadataFormat.getObjectArrayMinLength(String);param 1;!=;null]
[javax.imageio.metadata.IIOMetadataFormatImpl.getAttributeDescription(String,String,Locale);param 2;!=;null]
[javax.imageio.metadata.IIOMetadataNode.insertBefore(Node,Node);param 1;!=;null]
[javax.imageio.metadata.IIOMetadataNode.replaceChild(Node,Node);param 1;!=;null]
[javax.imageio.metadata.IIOMetadataNode.removeChild(Node);param 1;!=;null]
[javax.imageio.metadata.IIOMetadataNode.appendChild(Node);param 1;!=;null]
[javax.imageio.metadata.IIOMetadataNode.compareDocumentPosition(Node);param 1;!=;null]
[javax.imageio.plugins.jpeg.JPEGImageReadParam.setDecodeTables(JPEGQTable[],JPEGHuffmanTable[],JPEGHuffmanTable[]);param 1;!=;null]
[javax.imageio.plugins.jpeg.JPEGImageWriteParam.setEncodeTables(JPEGQTable[],JPEGHuffmanTable[],JPEGHuffmanTable[]);param 1;!=;null]
[javax.imageio.spi.IIOServiceProvider.IIOServiceProvider(String,String);param 2;!=;null]
[javax.imageio.spi.ImageInputStreamSpi.public ImageInputStreamSpi(String,String,Class);param 1;!=;null]
[javax.imageio.spi.ImageInputStreamSpi.public ImageInputStreamSpi(String,String,Class);param 2;!=;null]
[javax.imageio.spi.ImageOutputStreamSpi.createOutputStreamInstance(Object);ImageOutputStreamSpi.needsCacheFile;precedes;createOutputStreamInstance]
[javax.imageio.spi.ImageOutputStreamSpi.public ImageOutputStreamSpi(String,String,Class);param 1;!=;null]
[javax.imageio.spi.ImageOutputStreamSpi.public ImageOutputStreamSpi(String,String,Class);param 2;!=;null]
[javax.imageio.spi.ImageReaderSpi.public ImageReaderSpi(String,String,String[],String[],String[],String,Class[],String[],boolean,String,String,String[],String[],boolean,String,String,String[],String[]);getInputTypes;precedes;setInput]
[javax.imageio.spi.ServiceRegistry.deregisterServiceProvider(Object);param 1;!=;null]
[javax.imageio.spi.ServiceRegistry.setOrdering(Class,T,T);param 2;!=;null]
[javax.imageio.spi.ServiceRegistry.setOrdering(Class,T,T);param 2;!=;param 3]
[javax.imageio.stream.ImageInputStream.readBytes(IIOByteBuffer,int);param 2;>=;0]
[javax.imageio.stream.ImageInputStream.readFully(short[],int,int);param 2;>=;0]
[javax.imageio.stream.ImageInputStream.readFully(short[],int,int);param 3;>=;0]
[javax.imageio.stream.ImageInputStream.readFully(char[],int,int);param 2;>=;0]
[javax.imageio.stream.ImageInputStream.readFully(char[],int,int);param 3;>=;0]
[javax.imageio.stream.ImageInputStream.readFully(int[],int,int);param 2;>=;0]
[javax.imageio.stream.ImageInputStream.readFully(int[],int,int);param 3;>=;0]
[javax.imageio.stream.ImageInputStream.readFully(long[],int,int);param 2;>=;0]
[javax.imageio.stream.ImageInputStream.readFully(long[],int,int);param 3;>=;0]
[javax.imageio.stream.ImageInputStream.setBitOffset(int);param 1;>=;0]
[javax.imageio.stream.ImageInputStream.setBitOffset(int);param 1;<=;7]
[javax.imageio.stream.ImageInputStream.readBits(int);param 1;>;0]
[javax.imageio.stream.ImageInputStream.skipBytes(int);param 1;>=;0]
[javax.imageio.stream.ImageInputStream.skipBytes(long);param 1;>=;0]
[javax.imageio.stream.ImageInputStream.seek(long);param 1;>=;0]
[javax.imageio.stream.ImageInputStream.flushBefore(long);param 1;>=;0]
[javax.imageio.stream.ImageOutputStream.write(byte[]);param 1;!=;null]
[javax.imageio.stream.ImageOutputStream.writeShort(int);param 1;>=;Short.MIN_VALUE]
[javax.imageio.stream.ImageOutputStream.writeShort(int);param 1;<=;Short.MAX_VALUE]
[javax.imageio.stream.ImageOutputStream.writeLong(long);param 1;>;0]
[javax.imageio.stream.ImageOutputStream.writeFloat(float);param 1;!=;null]
[javax.imageio.stream.ImageOutputStream.writeDouble(double);param 1;!=;null]
[javax.imageio.stream.ImageOutputStream.writeBytes(String);param 1;!=;null]
[javax.imageio.stream.ImageOutputStream.writeChars(String);param 1;!=;null]
[javax.imageio.stream.ImageOutputStream.writeUTF(String);param 1;!=;null]
[javax.imageio.stream.ImageOutputStream.writeShorts(short[],int,int);param 2;>=;0]
[javax.imageio.stream.ImageOutputStream.writeShorts(short[],int,int);param 3;>=;0]
[javax.imageio.stream.ImageOutputStream.writeChars(char[],int,int);param 2;>=;0]
[javax.imageio.stream.ImageOutputStream.writeChars(char[],int,int);param 3;>=;0]
[javax.imageio.stream.ImageOutputStream.writeInts(int[],int,int);param 2;>=;0]
[javax.imageio.stream.ImageOutputStream.writeInts(int[],int,int);param 3;>=;0]
[javax.imageio.stream.ImageOutputStream.writeLongs(long[],int,int);param 2;>=;0]
[javax.imageio.stream.ImageOutputStream.writeLongs(long[],int,int);param 3;>=;0]
[javax.imageio.stream.ImageOutputStream.writeFloats(float[],int,int);param 2;>=;0]
[javax.imageio.stream.ImageOutputStream.writeFloats(float[],int,int);param 3;>=;0]
[javax.imageio.stream.ImageOutputStream.writeDoubles(double[],int,int);param 2;>=;0]
[javax.imageio.stream.ImageOutputStream.writeDoubles(double[],int,int);param 3;>=;0]
[javax.imageio.stream.ImageOutputStream.flushBefore(long);param 1;>=;0]
[javax.imageio.stream.FileCacheImageOutputStream.seek(long);param 1;>=;0]
[javax.imageio.stream.FileCacheImageOutputStream.flushBefore(long);param 1;>=;0]
[javax.imageio.stream.FileImageInputStream.seek(long);param 1;>=;0]
[javax.imageio.stream.FileImageOutputStream.seek(long);param 1;>=;0]
[javax.imageio.stream.ImageInputStreamImpl.readFully(byte[]);param 1;!=;null]
[javax.imageio.stream.ImageInputStreamImpl.setBitOffset(int);param 1;>=;0]
[javax.imageio.stream.ImageInputStreamImpl.readBits(int);param 1;>;0]
[javax.imageio.stream.ImageInputStreamImpl.skipBytes(int);param 1;>=;0]
[javax.imageio.stream.ImageInputStreamImpl.skipBytes(long);param 1;>=;0]
[javax.imageio.stream.ImageInputStreamImpl.seek(long);param 1;>=;0]
[javax.imageio.stream.ImageInputStreamImpl.flushBefore(long);param 1;>=;0]
[javax.imageio.stream.ImageOutputStreamImpl.write(int);param 1;!=;null]
[javax.imageio.stream.ImageOutputStreamImpl.writeByte(int);param 1;!=;null]
[javax.imageio.stream.ImageOutputStreamImpl.writeShort(int);param 1;>;0]
[javax.imageio.stream.ImageOutputStreamImpl.writeInt(int);param 1;!=;null]
[javax.imageio.stream.ImageOutputStreamImpl.writeLong(long);param 1;!=;null]
[javax.imageio.stream.ImageOutputStreamImpl.writeFloat(float);param 1;!=;null]
[javax.imageio.stream.ImageOutputStreamImpl.writeDouble(double);param 1;!=;null]
[javax.imageio.stream.ImageOutputStreamImpl.writeBytes(String);param 1;!=;null]
[javax.imageio.stream.ImageOutputStreamImpl.writeChars(String);param 1;!=;null]
[javax.imageio.stream.ImageOutputStreamImpl.writeUTF(String);param 1;!=;null]
[javax.imageio.stream.MemoryCacheImageInputStream.flushBefore(long);param 1;>=;0]
[javax.imageio.stream.MemoryCacheImageOutputStream.flushBefore(long);param 1;>=;0]
[javax.management.MBeanServer.registerMBean(Object,ObjectName);MBeanServer.isRegistered;precedes;registerMBean]
[javax.management.MBeanServer.getObjectInstance(ObjectName);MBeanServer.isRegistered;precedes;getObjectInstance]
[javax.management.MBeanServer.isInstanceOf(ObjectName,String);MBeanServer.isRegistered;precedes;isInstanceOf]
[javax.management.MBeanServer.deserialize(ObjectName,byte[]);param 2;!=;null]
[javax.management.MBeanServer.deserialize(String,byte[]);param 2;!=;null]
[javax.management.MBeanServerConnection.createMBean(String,ObjectName,Object[],String[]);MBeanServer.isRegistered;precedes;createMBean]
[javax.management.MBeanServerConnection.createMBean(String,ObjectName,Object[],String[]);param 3;!=;null]
[javax.management.MBeanServerConnection.createMBean(String,ObjectName,ObjectName,Object[],String[]);param 4;!=;null]
[javax.management.MBeanServerConnection.createMBean(String,ObjectName,ObjectName,Object[],String[]);MBeanServer.isRegistered;precedes;createMBean]
[javax.management.MBeanServerConnection.unregisterMBean(ObjectName);MBeanServer.isRegistered;precedes;unregisterMBean]
[javax.management.MBeanServerConnection.unregisterMBean(ObjectName);MBeanServer.isRegistered;precedes;unregisterMBean]
[javax.management.MBeanServerConnection.unregisterMBean(ObjectName);param 1;!=;null]
[javax.management.MBeanServerConnection.getObjectInstance(ObjectName);MBeanServer.isRegistered;precedes;getObjectInstance]
[javax.management.MBeanServerConnection.getAttributes(ObjectName,String[]);MBeanServer.isRegistered;precedes;getAttributes]
[javax.management.MBeanServerConnection.getAttributes(ObjectName,String[]);param 2;!=;null]
[javax.management.AttributeChangeNotificationFilter.enableAttribute(String);param 1;!=;null]
[javax.management.ImmutableDescriptor.union(Descriptor...);param 1;!=;null]
[javax.management.ImmutableDescriptor.ImmutableDescriptor(Map);param 1;!=;null]
[javax.management.MBeanServerFactory.releaseMBeanServer(MBeanServer);MBeanServerFactory.createMBeanServer;precedes;releaseMBeanServer]
[javax.management.loading.MLetMBean.getResources(String);param 1;!=;null]
[javax.management.loading.MLet.check(String,URL,String,MLetContent);param 3;!=;null]
[javax.management.modelmbean.ModelMBeanInfo.getNotification(String);param 1;!=;null]
[javax.crypto.Cipher.init();Cipher.init();try-catch;InvalidKeyException]
[android.os.Environment.getExternalStorageState();Environment.getExternalStorageState();try-catch;NullPointerException]
[android.content.Context.obtainStyledAttributes().getString();Context.obtainStyledAttributes().getString();try-catch;Exception]
[android.content.res.Resources.Theme.obtainStyledAttributes().getString();Resources.Theme.obtainStyledAttributes().getString();try-catch;Exception]
[org.kohsuke.args4j.spi.Parameters.getParameter();Parameters.getParameter();try-catch;CmdLineException]
[java.lang.Long.parseLong();Long.parseLong();try-catch;NumberFormatException]
[java.lang.Byte.parseByte();Byte.parseByte();try-catch;NumberFormatException]
[java.lang.Short.parseShort();Short.parseShort();try-catch;NumberFormatException]
[org.apache.jackrabbit.core.state.ItemStateManager.getItemState(ItemId);param 1;!=;null]
[org.apache.jackrabbit.core.config.RepositoryConfig.create(File, File);param 1;!=;null]
[org.joda.time.Interval.Interval(Object);param 1;!=;null]
[java.util.SortedMap.firstKey();SortedMap.firstKey();try-catch;NoSuchElementException]
[java.io.File.createNewFile();File.exists;precedes;File.createNewFile]
[android.content.pm.ApplicationInfo.loadIcon();ApplicationInfo.loadIcon();try-catch;OutOfMemoryError]
[java.io.FileInputStream.FileInputStream();File.exists;precedes;FileInputStream.FileInputStream]
[java.util.Scanner.next();java.util.Scanner.hasNext;precedes;Scanner.next]
