 
PACKAGE : package org.apache.commons.lang.text;

NAME : getCSVClone
COMMENT : /** 
 * Returns a clone of <code>CSV_TOKENIZER_PROTOTYPE</code>.
 * @return a clone of <code>CSV_TOKENIZER_PROTOTYPE</code>.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getCSVInstance
COMMENT : /** 
 * Gets a new tokenizer instance which parses Comma Separated Value strings initializing it with the given input.  The default for CSV processing will be trim whitespace from both ends (which can be overridden with the setTrimmer method). <p> You must call a "reset" method to set the string which you want to parse.
 * @return a new tokenizer instance which parses Comma Separated Value strings
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getCSVInstance
COMMENT : /** 
 * Gets a new tokenizer instance which parses Comma Separated Value strings initializing it with the given input.  The default for CSV processing will be trim whitespace from both ends (which can be overridden with the setTrimmer method).
 * @param input  the text to parse
 * @return a new tokenizer instance which parses Comma Separated Value strings
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getCSVInstance
COMMENT : /** 
 * Gets a new tokenizer instance which parses Comma Separated Value strings initializing it with the given input.  The default for CSV processing will be trim whitespace from both ends (which can be overridden with the setTrimmer method).
 * @param input  the text to parse
 * @return a new tokenizer instance which parses Comma Separated Value strings
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getTSVClone
COMMENT : /** 
 * Returns a clone of <code>TSV_TOKENIZER_PROTOTYPE</code>.
 * @return a clone of <code>TSV_TOKENIZER_PROTOTYPE</code>.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getTSVInstance
COMMENT : /** 
 * Gets a new tokenizer instance which parses Tab Separated Value strings. The default for CSV processing will be trim whitespace from both ends (which can be overridden with the setTrimmer method). <p> You must call a "reset" method to set the string which you want to parse.
 * @return a new tokenizer instance which parses Tab Separated Value strings.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getTSVInstance
COMMENT : /** 
 * Gets a new tokenizer instance which parses Tab Separated Value strings. The default for CSV processing will be trim whitespace from both ends (which can be overridden with the setTrimmer method).
 * @param input  the string to parse
 * @return a new tokenizer instance which parses Tab Separated Value strings.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getTSVInstance
COMMENT : /** 
 * Gets a new tokenizer instance which parses Tab Separated Value strings. The default for CSV processing will be trim whitespace from both ends (which can be overridden with the setTrimmer method).
 * @param input  the string to parse
 * @return a new tokenizer instance which parses Tab Separated Value strings.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting on space, tab, newline and formfeed as per StringTokenizer, but with no text to tokenize. <p> This constructor is normally used with  {@link #reset(String)}.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting on space, tab, newline and formfeed as per StringTokenizer.
 * @param input  the string which is to be parsed
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting on the specified delimiter character.
 * @param input  the string which is to be parsed
 * @param delim  the field delimiter character
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting on the specified delimiter string.
 * @param input  the string which is to be parsed
 * @param delim  the field delimiter string
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting using the specified delimiter matcher.
 * @param input  the string which is to be parsed
 * @param delim  the field delimiter matcher
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting on the specified delimiter character and handling quotes using the specified quote character.
 * @param input  the string which is to be parsed
 * @param delim  the field delimiter character
 * @param quote  the field quoted string character
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting using the specified delimiter matcher and handling quotes using the specified quote matcher.
 * @param input  the string which is to be parsed
 * @param delim  the field delimiter matcher
 * @param quote  the field quoted string matcher
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting on space, tab, newline and formfeed as per StringTokenizer. <p> The input character array is not cloned, and must not be altered after passing in to this method.
 * @param input  the string which is to be parsed, not cloned
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting on the specified character. <p> The input character array is not cloned, and must not be altered after passing in to this method.
 * @param input  the string which is to be parsed, not cloned
 * @param delim the field delimiter character
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting on the specified string. <p> The input character array is not cloned, and must not be altered after passing in to this method.
 * @param input  the string which is to be parsed, not cloned
 * @param delim the field delimiter string
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting using the specified delimiter matcher. <p> The input character array is not cloned, and must not be altered after passing in to this method.
 * @param input  the string which is to be parsed, not cloned
 * @param delim  the field delimiter matcher
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting on the specified delimiter character and handling quotes using the specified quote character. <p> The input character array is not cloned, and must not be altered after passing in to this method.
 * @param input  the string which is to be parsed, not cloned
 * @param delim  the field delimiter character
 * @param quote  the field quoted string character
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizer
COMMENT : /** 
 * Constructs a tokenizer splitting using the specified delimiter matcher and handling quotes using the specified quote matcher. <p> The input character array is not cloned, and must not be altered after passing in to this method.
 * @param input  the string which is to be parsed, not cloned
 * @param delim  the field delimiter character
 * @param quote  the field quoted string character
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : size
COMMENT : /** 
 * Gets the number of tokens found in the String.
 * @return the number of matched tokens
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : nextToken
COMMENT : /** 
 * Gets the next token from the String.
 * @return the next sequential token, or null when no more tokens are found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : previousToken
COMMENT : /** 
 * Gets the previous token from the String.
 * @return the previous sequential token, or null when no more tokens are found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getTokenArray
COMMENT : /** 
 * Gets a copy of the full token list as an independent modifiable array.
 * @return the tokens as a String array
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getTokenList
COMMENT : /** 
 * Gets a copy of the full token list as an independent modifiable list.
 * @return the tokens as a String array
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : reset
COMMENT : /** 
 * Resets this tokenizer, forgetting all parsing and iteration already completed. <p> This method allows the same tokenizer to be reused for the same String.
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : reset
COMMENT : /** 
 * Reset this tokenizer, giving it a new input string to parse. In this manner you can re-use a tokenizer with the same settings on multiple input lines.
 * @param input  the new string to tokenize, null sets no text to parse
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : reset
COMMENT : /** 
 * Reset this tokenizer, giving it a new input string to parse. In this manner you can re-use a tokenizer with the same settings on multiple input lines. <p> The input character array is not cloned, and must not be altered after passing in to this method.
 * @param input  the new character array to tokenize, not cloned, null sets no text to parse
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : hasNext
COMMENT : /** 
 * Checks whether there are any more tokens.
 * @return true if there are more tokens
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : next
COMMENT : /** 
 * Gets the next token. This method is equivalent to  {@link #nextToken()}.
 * @return the next String token
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : nextIndex
COMMENT : /** 
 * Gets the index of the next token to return.
 * @return the next token index
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : hasPrevious
COMMENT : /** 
 * Checks whether there are any previous tokens that can be iterated to.
 * @return true if there are previous tokens
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : previous
COMMENT : /** 
 * Gets the token previous to the last returned token.
 * @return the previous token
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : previousIndex
COMMENT : /** 
 * Gets the index of the previous token.
 * @return the previous token index
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : remove
COMMENT : /** 
 * Unsupported ListIterator operation.
 * @throws UnsupportedOperationException always
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : set
COMMENT : /** 
 * Unsupported ListIterator operation.
 * @param obj this parameter ignored.
 * @throws UnsupportedOperationException always
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : add
COMMENT : /** 
 * Unsupported ListIterator operation.
 * @param obj this parameter ignored.
 * @throws UnsupportedOperationException always
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : checkTokenized
COMMENT : /** 
 * Checks if tokenization has been done, and if not then do it.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : tokenize
COMMENT : /** 
 * Internal method to performs the tokenization. <p> Most users of this class do not need to call this method. This method will be called automatically by other (public) methods when required. <p> This method exists to allow subclasses to add code before or after the tokenization. For example, a subclass could alter the character array, offset or count to be parsed, or call the tokenizer multiple times on multiple strings. It is also be possible to filter the results. <p> <code>StrTokenizer</code> will always pass a zero offset and a count equal to the length of the array to this method, however a subclass may pass other values, or even an entirely different array.
 * @param chars  the character array being tokenized, may be null
 * @param offset  the start position within the character array, must be valid
 * @param count  the number of characters to tokenize, must be valid
 * @return the modifiable list of String tokens, unmodifiable if null array or zero count
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : addToken
COMMENT : /** 
 * Adds a token to a list, paying attention to the parameters we've set.
 * @param list  the list to add to
 * @param tok  the token to add
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : readNextToken
COMMENT : /** 
 * Reads character by character through the String to get the next token.
 * @param chars  the character array being tokenized
 * @param start  the first character of field
 * @param len  the length of the character array being tokenized
 * @param workArea  a temporary work area
 * @param tokens  the list of parsed tokens
 * @return the starting position of the next field (the characterimmediately after the delimiter), or -1 if end of string found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : readWithQuotes
COMMENT : /** 
 * Reads a possibly quoted string token.
 * @param chars  the character array being tokenized
 * @param start  the first character of field
 * @param len  the length of the character array being tokenized
 * @param workArea  a temporary work area
 * @param tokens  the list of parsed tokens
 * @param quoteStart  the start position of the matched quote, 0 if no quoting
 * @param quoteLen  the length of the matched quote, 0 if no quoting
 * @return the starting position of the next field (the characterimmediately after the delimiter, or if end of string found, then the length of string
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : isQuote
COMMENT : /** 
 * Checks if the characters at the index specified match the quote already matched in readNextToken().
 * @param chars  the character array being tokenized
 * @param pos  the position to check for a quote
 * @param len  the length of the character array being tokenized
 * @param quoteStart  the start position of the matched quote, 0 if no quoting
 * @param quoteLen  the length of the matched quote, 0 if no quoting
 * @return true if a quote is matched
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getDelimiterMatcher
COMMENT : /** 
 * Gets the field delimiter matcher.
 * @return the delimiter matcher in use
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setDelimiterMatcher
COMMENT : /** 
 * Sets the field delimiter matcher. <p> The delimitier is used to separate one token from another.
 * @param delim  the delimiter matcher to use
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setDelimiterChar
COMMENT : /** 
 * Sets the field delimiter character.
 * @param delim  the delimiter character to use
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setDelimiterString
COMMENT : /** 
 * Sets the field delimiter string.
 * @param delim  the delimiter string to use
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getQuoteMatcher
COMMENT : /** 
 * Gets the quote matcher currently in use. <p> The quote character is used to wrap data between the tokens. This enables delimiters to be entered as data. The default value is '"' (double quote).
 * @return the quote matcher in use
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setQuoteMatcher
COMMENT : /** 
 * Set the quote matcher to use. <p> The quote character is used to wrap data between the tokens. This enables delimiters to be entered as data.
 * @param quote  the quote matcher to use, null ignored
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setQuoteChar
COMMENT : /** 
 * Sets the quote character to use. <p> The quote character is used to wrap data between the tokens. This enables delimiters to be entered as data.
 * @param quote  the quote character to use
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getIgnoredMatcher
COMMENT : /** 
 * Gets the ignored character matcher. <p> These characters are ignored when parsing the String, unless they are within a quoted region. The default value is not to ignore anything.
 * @return the ignored matcher in use
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setIgnoredMatcher
COMMENT : /** 
 * Set the matcher for characters to ignore. <p> These characters are ignored when parsing the String, unless they are within a quoted region.
 * @param ignored  the ignored matcher to use, null ignored
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setIgnoredChar
COMMENT : /** 
 * Set the character to ignore. <p> This character is ignored when parsing the String, unless it is within a quoted region.
 * @param ignored  the ignored character to use
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getTrimmerMatcher
COMMENT : /** 
 * Gets the trimmer character matcher. <p> These characters are trimmed off on each side of the delimiter until the token or quote is found. The default value is not to trim anything.
 * @return the trimmer matcher in use
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setTrimmerMatcher
COMMENT : /** 
 * Sets the matcher for characters to trim. <p> These characters are trimmed off on each side of the delimiter until the token or quote is found.
 * @param trimmer  the trimmer matcher to use, null ignored
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : isEmptyTokenAsNull
COMMENT : /** 
 * Gets whether the tokenizer currently returns empty tokens as null. The default for this property is false.
 * @return true if empty tokens are returned as null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setEmptyTokenAsNull
COMMENT : /** 
 * Sets whether the tokenizer should return empty tokens as null. The default for this property is false.
 * @param emptyAsNull  whether empty tokens are returned as null
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : isIgnoreEmptyTokens
COMMENT : /** 
 * Gets whether the tokenizer currently ignores empty tokens. The default for this property is true.
 * @return true if empty tokens are not returned
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setIgnoreEmptyTokens
COMMENT : /** 
 * Sets whether the tokenizer should ignore and not return empty tokens. The default for this property is true.
 * @param ignoreEmptyTokens  whether empty tokens are not returned
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getContent
COMMENT : /** 
 * Gets the String content that the tokenizer is parsing.
 * @return the string content being parsed
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : clone
COMMENT : /** 
 * Creates a new instance of this Tokenizer. The new instance is reset so that it will be at the start of the token list. If a  {@link CloneNotSupportedException} is caught, return <code>null</code>.
 * @return a new instance of this Tokenizer which has been reset.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : cloneReset
COMMENT : /** 
 * Creates a new instance of this Tokenizer. The new instance is reset so that it will be at the start of the token list.
 * @return a new instance of this Tokenizer which has been reset.
 * @throws CloneNotSupportedException if there is a problem cloning
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : toString
COMMENT : /** 
 * Gets the String content that the tokenizer is parsing.
 * @return the string content being parsed
 */



PACKAGE : null
NAME : EnumTest
COMMENT : null


PACKAGE : null
NAME : setUp
COMMENT : null


PACKAGE : null
NAME : suite
COMMENT : null


PACKAGE : null
NAME : testName
COMMENT : null


PACKAGE : null
NAME : testCompareTo
COMMENT : null


PACKAGE : null
NAME : testEquals
COMMENT : null


PACKAGE : null
NAME : testHashCode
COMMENT : null


PACKAGE : null
NAME : testToString
COMMENT : null


PACKAGE : null
NAME : testIterator
COMMENT : null


PACKAGE : null
NAME : testList
COMMENT : null


PACKAGE : null
NAME : testMap
COMMENT : null


PACKAGE : null
NAME : testGet
COMMENT : null


PACKAGE : null
NAME : testSerialization
COMMENT : null


PACKAGE : null
NAME : testBroken1
COMMENT : null


PACKAGE : null
NAME : testBroken2
COMMENT : null


PACKAGE : null
NAME : testBroken3
COMMENT : null


PACKAGE : null
NAME : testBroken1Operation
COMMENT : null


PACKAGE : null
NAME : testBroken2Operation
COMMENT : null


PACKAGE : null
NAME : testBroken3Operation
COMMENT : null


PACKAGE : null
NAME : testBroken4Operation
COMMENT : null


PACKAGE : null
NAME : testBroken5Operation
COMMENT : null


PACKAGE : null
NAME : testOperationGet
COMMENT : null


PACKAGE : null
NAME : testOperationSerialization
COMMENT : null


PACKAGE : null
NAME : testOperationToString
COMMENT : null


PACKAGE : null
NAME : testOperationList
COMMENT : null


PACKAGE : null
NAME : testOperationMap
COMMENT : null


PACKAGE : null
NAME : testOperationCalculation
COMMENT : null


PACKAGE : null
NAME : testExtended1Get
COMMENT : null


PACKAGE : null
NAME : testExtended2Get
COMMENT : null


PACKAGE : null
NAME : testExtended3Get
COMMENT : null


PACKAGE : null
NAME : testExtendedSerialization
COMMENT : null


PACKAGE : null
NAME : testExtendedToString
COMMENT : null


PACKAGE : null
NAME : testExtended1List
COMMENT : null


PACKAGE : null
NAME : testExtended2List
COMMENT : null


PACKAGE : null
NAME : testExtended3List
COMMENT : null


PACKAGE : null
NAME : testExtended1Map
COMMENT : null


PACKAGE : null
NAME : testExtended2Map
COMMENT : null


PACKAGE : null
NAME : testExtended3Map
COMMENT : null


PACKAGE : null
NAME : testNested
COMMENT : null


PACKAGE : null
NAME : testNestedBroken
COMMENT : null


PACKAGE : null
NAME : testNestedLinked
COMMENT : null


PACKAGE : null
NAME : testNestedReferenced
COMMENT : null


PACKAGE : null
NAME : testColorEnumEqualsWithDifferentClassLoaders
COMMENT : null


PACKAGE : null
NAME : testWithDifferentClassLoaders
COMMENT : null


PACKAGE : null
NAME : getColorEnum
COMMENT : null


PACKAGE : null
NAME : testEqualsToWrongInstance
COMMENT : null


PACKAGE : null
NAME : testEqualsToWrongInstance
COMMENT : null


PACKAGE : null
NAME : CalendarUtilsTest
COMMENT : null


PACKAGE : null
NAME : main
COMMENT : null


PACKAGE : null
NAME : suite
COMMENT : null


PACKAGE : null
NAME : setUp
COMMENT : null


PACKAGE : null
NAME : tearDown
COMMENT : null


PACKAGE : null
NAME : testRound
COMMENT : /** 
 * Tests various values with the round method
 */



PACKAGE : null
NAME : testTrunc
COMMENT : /** 
 * Tests various values with the trunc method
 */



PACKAGE : null
NAME : testParse
COMMENT : /** 
 * Tests the parse method, which is supposed to handle various strings as flexibly as CVS supports.
 */



PACKAGE : null
NAME : testWeekIterator
COMMENT : /** 
 * Tests the calendar iterator for week ranges
 */



PACKAGE : null
NAME : testMonthIterator
COMMENT : /** 
 * Tests the calendar iterator for month-based ranges
 */



PACKAGE : null
NAME : assertWeekIterator
COMMENT : /** 
 * This checks that this is a 7 element iterator of Calendar objects that are dates (no time), and exactly 1 day spaced after each other.
 */



PACKAGE : null
NAME : assertWeekIterator
COMMENT : /** 
 * Convenience method for when working with Date objects
 */



PACKAGE : null
NAME : assertWeekIterator
COMMENT : /** 
 * This checks that this is a 7 divisble iterator of Calendar objects that are dates (no time), and exactly 1 day spaced after each other (in addition to the proper start and stop dates)
 */



PACKAGE : null
NAME : assertEquals
COMMENT : /** 
 * Used to check that Calendar objects are close enough delta is in milliseconds
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableException
COMMENT : /** 
 * Constructs a new <code>NestableException</code> without specified detail message.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableException
COMMENT : /** 
 * Constructs a new <code>NestableException</code> with specified detail message.
 * @param msg The error message.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableException
COMMENT : /** 
 * Constructs a new <code>NestableException</code> with specified nested <code>Throwable</code>.
 * @param cause the exception or error that caused this exception to bethrown
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableException
COMMENT : /** 
 * Constructs a new <code>NestableException</code> with specified detail message and nested <code>Throwable</code>.
 * @param msg    the error message
 * @param cause  the exception or error that caused this exception to bethrown
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCause
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * Returns the detail message string of this throwable. If it was created with a null message, returns the following: (cause==null ? null : cause.toString()).
 * @return String message string of the throwable
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessages
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableCount
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowables
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printPartialStackTrace
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableFloatTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testConstructors
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testGetSet
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testNanInfinite
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testCompareTo
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testPrimitiveValues
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testIncrement
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testDecrement
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testAddValuePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testAddValueObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testSubtractValuePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testSubtractValueObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : FastDateFormatTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : test_getInstance
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : test_getInstance_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : test_getInstance_String_TimeZone
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : test_getInstance_String_Locale
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : test_changeDefault_Locale_DateInstance
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : test_changeDefault_Locale_DateTimeInstance
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : test_getInstance_String_TimeZone_Locale
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testFormat
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testShortDateStyleWithLocales
COMMENT : /** 
 * Test case for  {@link FastDateFormat#getDateInstance(int,java.util.Locale)}.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : testLowYearPadding
COMMENT : /** 
 * Tests that pre-1000AD years get padded with yyyy
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : testMilleniumBug
COMMENT : /** 
 * Show Bug #39410 is solved
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : testSimpleDate
COMMENT : /** 
 * testLowYearPadding showed that the date was buggy This test confirms it, getting 366 back as a date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : testLang303
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : ClassUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getShortClassName_Object
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getShortClassName_Class
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getShortClassName_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getPackageName_Object
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getPackageName_Class
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getPackageName_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getAllSuperclasses_Class
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getAllInterfaces_Class
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_convertClassNamesToClasses_List
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_convertClassesToClassNames_List
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_isInnerClass_Class
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_isAssignable_ClassArray_ClassArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_isAssignable
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_isAssignable_Widening
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testPrimitiveToWrapper
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testPrimitivesToWrappers
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testWrapperToPrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testWrapperToPrimitiveNoWrapper
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testWrapperToPrimitiveNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testWrappersToPrimitives
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testWrappersToPrimitivesNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testWrappersToPrimitivesEmpty
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetClassClassNotFound
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetClassInvalidArguments
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testWithInterleavingWhitespace
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetClassByNormalNameArrays
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetClassByNormalNameArrays2D
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetClassWithArrayClasses2D
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetClassWithArrayClasses
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetClassRawPrimitives
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertGetClassReturnsClass
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertGetClassThrowsException
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertGetClassThrowsIllegalArgument
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertGetClassThrowsClassNotFound
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testShowJavaBug
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetPublicMethod
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToClass_object
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getShortCanonicalName_Object
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getShortCanonicalName_Class
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getShortCanonicalName_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getPackageCanonicalName_Object
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getPackageCanonicalName_Class
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_getPackageCanonicalName_String
COMMENT : null


PACKAGE : null
NAME : Broken2OperationEnum
COMMENT : null


PACKAGE : null
NAME : getEnumClass
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : null
NAME : PlusOperation
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : MinusOperation
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : CharUtils
COMMENT : /** 
 * <p><code>CharUtils</code> instances should NOT be constructed in standard programming. Instead, the class should be used as <code>CharUtils.toString('c');</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toCharacterObject
COMMENT : /** 
 * <p>Converts the character to a Character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same Character object each time.</p> <pre> CharUtils.toCharacterObject(' ')  = ' ' CharUtils.toCharacterObject('A')  = 'A' </pre>
 * @param ch  the character to convert
 * @return a Character of the specified character
 */



PACKAGE : package org.apache.commons.lang;

NAME : toCharacterObject
COMMENT : /** 
 * <p>Converts the String to a Character using the first character, returning null for empty Strings.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same Character object each time.</p> <pre> CharUtils.toCharacterObject(null) = null CharUtils.toCharacterObject("")   = null CharUtils.toCharacterObject("A")  = 'A' CharUtils.toCharacterObject("BA") = 'B' </pre>
 * @param str  the character to convert
 * @return the Character value of the first letter of the String
 */



PACKAGE : package org.apache.commons.lang;

NAME : toChar
COMMENT : /** 
 * <p>Converts the Character to a char throwing an exception for <code>null</code>.</p> <pre> CharUtils.toChar(null) = IllegalArgumentException CharUtils.toChar(' ')  = ' ' CharUtils.toChar('A')  = 'A' </pre>
 * @param ch  the character to convert
 * @return the char value of the Character
 * @throws IllegalArgumentException if the Character is null
 */



PACKAGE : package org.apache.commons.lang;

NAME : toChar
COMMENT : /** 
 * <p>Converts the Character to a char handling <code>null</code>.</p> <pre> CharUtils.toChar(null, 'X') = 'X' CharUtils.toChar(' ', 'X')  = ' ' CharUtils.toChar('A', 'X')  = 'A' </pre>
 * @param ch  the character to convert
 * @param defaultValue  the value to use if the  Character is null
 * @return the char value of the Character or the default if null
 */



PACKAGE : package org.apache.commons.lang;

NAME : toChar
COMMENT : /** 
 * <p>Converts the String to a char using the first character, throwing an exception on empty Strings.</p> <pre> CharUtils.toChar(null) = IllegalArgumentException CharUtils.toChar("")   = IllegalArgumentException CharUtils.toChar("A")  = 'A' CharUtils.toChar("BA") = 'B' </pre>
 * @param str  the character to convert
 * @return the char value of the first letter of the String
 * @throws IllegalArgumentException if the String is empty
 */



PACKAGE : package org.apache.commons.lang;

NAME : toChar
COMMENT : /** 
 * <p>Converts the String to a char using the first character, defaulting the value on empty Strings.</p> <pre> CharUtils.toChar(null, 'X') = 'X' CharUtils.toChar("", 'X')   = 'X' CharUtils.toChar("A", 'X')  = 'A' CharUtils.toChar("BA", 'X') = 'B' </pre>
 * @param str  the character to convert
 * @param defaultValue  the value to use if the  Character is null
 * @return the char value of the first letter of the String or the default if null
 */



PACKAGE : package org.apache.commons.lang;

NAME : toIntValue
COMMENT : /** 
 * <p>Converts the character to the Integer it represents, throwing an exception if the character is not numeric.</p> <p>This method coverts the char '1' to the int 1 and so on.</p> <pre> CharUtils.toIntValue('3')  = 3 CharUtils.toIntValue('A')  = IllegalArgumentException </pre>
 * @param ch  the character to convert
 * @return the int value of the character
 * @throws IllegalArgumentException if the character is not ASCII numeric
 */



PACKAGE : package org.apache.commons.lang;

NAME : toIntValue
COMMENT : /** 
 * <p>Converts the character to the Integer it represents, throwing an exception if the character is not numeric.</p> <p>This method coverts the char '1' to the int 1 and so on.</p> <pre> CharUtils.toIntValue('3', -1)  = 3 CharUtils.toIntValue('A', -1)  = -1 </pre>
 * @param ch  the character to convert
 * @param defaultValue  the default value to use if the character is not numeric
 * @return the int value of the character
 */



PACKAGE : package org.apache.commons.lang;

NAME : toIntValue
COMMENT : /** 
 * <p>Converts the character to the Integer it represents, throwing an exception if the character is not numeric.</p> <p>This method coverts the char '1' to the int 1 and so on.</p> <pre> CharUtils.toIntValue(null) = IllegalArgumentException CharUtils.toIntValue('3')  = 3 CharUtils.toIntValue('A')  = IllegalArgumentException </pre>
 * @param ch  the character to convert, not null
 * @return the int value of the character
 * @throws IllegalArgumentException if the Character is not ASCII numeric or is null
 */



PACKAGE : package org.apache.commons.lang;

NAME : toIntValue
COMMENT : /** 
 * <p>Converts the character to the Integer it represents, throwing an exception if the character is not numeric.</p> <p>This method coverts the char '1' to the int 1 and so on.</p> <pre> CharUtils.toIntValue(null, -1) = -1 CharUtils.toIntValue('3', -1)  = 3 CharUtils.toIntValue('A', -1)  = -1 </pre>
 * @param ch  the character to convert
 * @param defaultValue  the default value to use if the character is not numeric
 * @return the int value of the character
 */



PACKAGE : package org.apache.commons.lang;

NAME : toString
COMMENT : /** 
 * <p>Converts the character to a String that contains the one character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same String object each time.</p> <pre> CharUtils.toString(' ')  = " " CharUtils.toString('A')  = "A" </pre>
 * @param ch  the character to convert
 * @return a String containing the one specified character
 */



PACKAGE : package org.apache.commons.lang;

NAME : toString
COMMENT : /** 
 * <p>Converts the character to a String that contains the one character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same String object each time.</p> <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p> <pre> CharUtils.toString(null) = null CharUtils.toString(' ')  = " " CharUtils.toString('A')  = "A" </pre>
 * @param ch  the character to convert
 * @return a String containing the one specified character
 */



PACKAGE : package org.apache.commons.lang;

NAME : unicodeEscaped
COMMENT : /** 
 * <p>Converts the string to the unicode format '\u0020'.</p> <p>This format is the Java source code format.</p> <pre> CharUtils.unicodeEscaped(' ') = "\u0020" CharUtils.unicodeEscaped('A') = "\u0041" </pre>
 * @param ch  the character to convert
 * @return the escaped unicode string
 */



PACKAGE : package org.apache.commons.lang;

NAME : unicodeEscaped
COMMENT : /** 
 * <p>Converts the string to the unicode format '\u0020'.</p> <p>This format is the Java source code format.</p> <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p> <pre> CharUtils.unicodeEscaped(null) = null CharUtils.unicodeEscaped(' ')  = "\u0020" CharUtils.unicodeEscaped('A')  = "\u0041" </pre>
 * @param ch  the character to convert, may be null
 * @return the escaped unicode string, null if null input
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAscii
COMMENT : /** 
 * <p>Checks whether the character is ASCII 7 bit.</p> <pre> CharUtils.isAscii('a')  = true CharUtils.isAscii('A')  = true CharUtils.isAscii('3')  = true CharUtils.isAscii('-')  = true CharUtils.isAscii('\n') = true CharUtils.isAscii('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if less than 128
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAsciiPrintable
COMMENT : /** 
 * <p>Checks whether the character is ASCII 7 bit printable.</p> <pre> CharUtils.isAsciiPrintable('a')  = true CharUtils.isAsciiPrintable('A')  = true CharUtils.isAsciiPrintable('3')  = true CharUtils.isAsciiPrintable('-')  = true CharUtils.isAsciiPrintable('\n') = false CharUtils.isAsciiPrintable('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 32 and 126 inclusive
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAsciiControl
COMMENT : /** 
 * <p>Checks whether the character is ASCII 7 bit control.</p> <pre> CharUtils.isAsciiControl('a')  = false CharUtils.isAsciiControl('A')  = false CharUtils.isAsciiControl('3')  = false CharUtils.isAsciiControl('-')  = false CharUtils.isAsciiControl('\n') = true CharUtils.isAsciiControl('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if less than 32 or equals 127
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAsciiAlpha
COMMENT : /** 
 * <p>Checks whether the character is ASCII 7 bit alphabetic.</p> <pre> CharUtils.isAsciiAlpha('a')  = true CharUtils.isAsciiAlpha('A')  = true CharUtils.isAsciiAlpha('3')  = false CharUtils.isAsciiAlpha('-')  = false CharUtils.isAsciiAlpha('\n') = false CharUtils.isAsciiAlpha('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 65 and 90 or 97 and 122 inclusive
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAsciiAlphaUpper
COMMENT : /** 
 * <p>Checks whether the character is ASCII 7 bit alphabetic upper case.</p> <pre> CharUtils.isAsciiAlphaUpper('a')  = false CharUtils.isAsciiAlphaUpper('A')  = true CharUtils.isAsciiAlphaUpper('3')  = false CharUtils.isAsciiAlphaUpper('-')  = false CharUtils.isAsciiAlphaUpper('\n') = false CharUtils.isAsciiAlphaUpper('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 65 and 90 inclusive
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAsciiAlphaLower
COMMENT : /** 
 * <p>Checks whether the character is ASCII 7 bit alphabetic lower case.</p> <pre> CharUtils.isAsciiAlphaLower('a')  = true CharUtils.isAsciiAlphaLower('A')  = false CharUtils.isAsciiAlphaLower('3')  = false CharUtils.isAsciiAlphaLower('-')  = false CharUtils.isAsciiAlphaLower('\n') = false CharUtils.isAsciiAlphaLower('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 97 and 122 inclusive
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAsciiNumeric
COMMENT : /** 
 * <p>Checks whether the character is ASCII 7 bit numeric.</p> <pre> CharUtils.isAsciiNumeric('a')  = false CharUtils.isAsciiNumeric('A')  = false CharUtils.isAsciiNumeric('3')  = true CharUtils.isAsciiNumeric('-')  = false CharUtils.isAsciiNumeric('\n') = false CharUtils.isAsciiNumeric('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 48 and 57 inclusive
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAsciiAlphanumeric
COMMENT : /** 
 * <p>Checks whether the character is ASCII 7 bit numeric.</p> <pre> CharUtils.isAsciiAlphanumeric('a')  = true CharUtils.isAsciiAlphanumeric('A')  = true CharUtils.isAsciiAlphanumeric('3')  = true CharUtils.isAsciiAlphanumeric('-')  = false CharUtils.isAsciiAlphanumeric('\n') = false CharUtils.isAsciiAlphanumeric('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 48 and 57 or 65 and 90 or 97 and 122 inclusive
 */



PACKAGE : null
NAME : Broken3OperationEnum
COMMENT : null


PACKAGE : null
NAME : getEnumClass
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : null
NAME : PlusOperation
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : MinusOperation
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : setUp
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : createMessageFormat
COMMENT : /** 
 * Create a MessageFormat.
 * @param pattern
 * @param locale
 * @return
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * Get the Locale to use.
 * @return
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : doAssertions
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : doAssertions
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : doAssertions
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : doAssertions
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : doAssertions
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testNoFormatElements
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testSimpleStrings
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testSimpleNumbers
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testSimpleDates
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testNumberLooseFormatting
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testInteger
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testIntegerLooseFormatting
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCurrency
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testPercent
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testNumberPattern
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testDateLooseFormatting
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testShortDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testShortDateLooseFormatting
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testMediumDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLongDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testFullDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testDatePattern
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testTime
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testShortTime
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testMediumTime
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLongTime
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testFullTime
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testTimePattern
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testChoice
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testChoiceLooseFormatting
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testChoiceRecursive
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : getIntegerNumberFormat
COMMENT : null


PACKAGE : null
NAME : Broken4OperationEnum
COMMENT : null


PACKAGE : null
NAME : getEnumClass
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : null
NAME : PlusOperation
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : MinusOperation
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : EnumTestSuite
COMMENT : /** 
 * Construct a new instance.
 */



PACKAGE : null
NAME : main
COMMENT : /** 
 * Command-line interface.
 */



PACKAGE : null
NAME : suite
COMMENT : /** 
 * Get the suite of tests
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : NumberRangeTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : checkConstructorException
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : checkConstructorException
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : createRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : createRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor1
COMMENT : /** 
 * Tests non-exceptional conditions for the one argument constructor.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor1Exceptions
COMMENT : /** 
 * Tests exceptional conditions for the one argument constructor.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor2
COMMENT : /** 
 * Tests non-exceptional conditions for the two argument constructor.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor2Exceptions
COMMENT : /** 
 * Tests exceptional conditions for the two argument constructor.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsLongBig
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableFloat
COMMENT : /** 
 * Constructs a new MutableFloat with the default value of zero.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableFloat
COMMENT : /** 
 * Constructs a new MutableFloat with the specified value.
 * @param value a value.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableFloat
COMMENT : /** 
 * Constructs a new MutableFloat with the specified value.
 * @param value a value.
 * @throws NullPointerException if the object is null
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : getValue
COMMENT : /** 
 * Gets the value as a Float instance.
 * @return the value as a Float
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value.
 * @param value the value to set
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value from any Number instance.
 * @param value the value to set
 * @throws NullPointerException if the object is null
 * @throws ClassCastException if the type is not a  {@link Number}
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : increment
COMMENT : /** 
 * Increments the value.
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : decrement
COMMENT : /** 
 * Decrements the value.
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : add
COMMENT : /** 
 * Adds a value.
 * @param operand the value to add
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : add
COMMENT : /** 
 * Adds a value.
 * @param operand the value to add
 * @throws NullPointerException if the object is null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : subtract
COMMENT : /** 
 * Subtracts a value.
 * @param operand the value to add
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : subtract
COMMENT : /** 
 * Subtracts a value.
 * @param operand the value to add
 * @throws NullPointerException if the object is null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : intValue
COMMENT : /** 
 * Returns the value of this MutableFloat as a int.
 * @return the numeric value represented by this object after conversion to type int.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : longValue
COMMENT : /** 
 * Returns the value of this MutableFloat as a long.
 * @return the numeric value represented by this object after conversion to type long.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : floatValue
COMMENT : /** 
 * Returns the value of this MutableFloat as a float.
 * @return the numeric value represented by this object after conversion to type float.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : doubleValue
COMMENT : /** 
 * Returns the value of this MutableFloat as a double.
 * @return the numeric value represented by this object after conversion to type double.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : isNaN
COMMENT : /** 
 * Checks whether the float value is the special NaN value.
 * @return true if NaN
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : isInfinite
COMMENT : /** 
 * Checks whether the float value is infinite.
 * @return true if infinite
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toFloat
COMMENT : /** 
 * Gets this mutable as an instance of Float.
 * @return a Float instance containing the value from this mutable
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : equals
COMMENT : /** 
 * Compares this object against some other object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>Float</code> object that represents a <code>float</code> that has the identical bit pattern to the bit pattern of the <code>float</code> represented by this object. For this purpose, two float values are considered to be the same if and only if the method {@link Float#floatToIntBits(float)}returns the same int value when applied to each. <p> Note that in most cases, for two instances of class <code>Float</code>,<code>f1</code> and <code>f2</code>, the value of <code>f1.equals(f2)</code> is <code>true</code> if and only if <blockquote> <pre> f1.floatValue() == f2.floatValue() </pre> </blockquote> <p> also has the value <code>true</code>. However, there are two exceptions: <ul> <li>If <code>f1</code> and <code>f2</code> both represent <code>Float.NaN</code>, then the <code>equals</code> method returns <code>true</code>, even though <code>Float.NaN==Float.NaN</code> has the value <code>false</code>. <li>If <code>f1</code> represents <code>+0.0f</code> while <code>f2</code> represents <code>-0.0f</code>, or vice versa, the <code>equal</code> test has the value <code>false</code>, even though <code>0.0f==-0.0f</code> has the value <code>true</code>. </ul> This definition allows hashtables to operate properly.
 * @param obj the object to be compared
 * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
 * @see java.lang.Float#floatToIntBits(float)
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : hashCode
COMMENT : /** 
 * Returns a suitable hashcode for this mutable.
 * @return a suitable hashcode
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : compareTo
COMMENT : /** 
 * Compares this mutable to another in ascending order.
 * @param obj the mutable to compare to
 * @return negative if this is less, zero if equal, positive if greater
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toString
COMMENT : /** 
 * Returns the String value of this mutable.
 * @return the mutable value as a string
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : DummyEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : LocaleUtils
COMMENT : /** 
 * <p><code>LocaleUtils</code> instances should NOT be constructed in standard programming. Instead, the class should be used as <code>LocaleUtils.toLocale("en_GB");</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toLocale
COMMENT : /** 
 * <p>Converts a String to a Locale.</p> <p>This method takes the string format of a locale and creates the locale object from it.</p> <pre> LocaleUtils.toLocale("en")         = new Locale("en", "") LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB") LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#) </pre> <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4. In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't. Thus, the result from getVariant() may vary depending on your JDK.</p> <p>This method validates the input strictly. The language code must be lowercase. The country code must be uppercase. The separator must be an underscore. The length must be correct. </p>
 * @param str  the locale String to convert, null returns null
 * @return a Locale, null if null input
 * @throws IllegalArgumentException if the string is an invalid format
 */



PACKAGE : package org.apache.commons.lang;

NAME : localeLookupList
COMMENT : /** 
 * <p>Obtains the list of locales to search through when performing a locale search.</p> <pre> localeLookupList(Locale("fr","CA","xxx")) = [Locale("fr","CA","xxx"), Locale("fr","CA"), Locale("fr")] </pre>
 * @param locale  the locale to start from
 * @return the unmodifiable list of Locale objects, 0 being locale, never null
 */



PACKAGE : package org.apache.commons.lang;

NAME : localeLookupList
COMMENT : /** 
 * <p>Obtains the list of locales to search through when performing a locale search.</p> <pre> localeLookupList(Locale("fr", "CA", "xxx"), Locale("en")) = [Locale("fr","CA","xxx"), Locale("fr","CA"), Locale("fr"), Locale("en"] </pre> <p>The result list begins with the most specific locale, then the next more general and so on, finishing with the default locale. The list will never contain the same locale twice.</p>
 * @param locale  the locale to start from, null returns empty list
 * @param defaultLocale  the default locale to use if no other is found
 * @return the unmodifiable list of Locale objects, 0 being locale, never null
 */



PACKAGE : package org.apache.commons.lang;

NAME : availableLocaleList
COMMENT : /** 
 * <p>Obtains an unmodifiable list of installed locales.</p> <p>This method is a wrapper around  {@link Locale#getAvailableLocales()}. It is more efficient, as the JDK method must create a new array each time it is called.</p>
 * @return the unmodifiable list of available locales
 */



PACKAGE : package org.apache.commons.lang;

NAME : availableLocaleSet
COMMENT : /** 
 * <p>Obtains an unmodifiable set of installed locales.</p> <p>This method is a wrapper around  {@link Locale#getAvailableLocales()}. It is more efficient, as the JDK method must create a new array each time it is called.</p>
 * @return the unmodifiable set of available locales
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAvailableLocale
COMMENT : /** 
 * <p>Checks if the locale specified is in the list of available locales.</p>
 * @param locale the Locale object to check if it is available
 * @return true if the locale is a known locale
 */



PACKAGE : package org.apache.commons.lang;

NAME : languagesByCountry
COMMENT : /** 
 * <p>Obtains the list of languages supported for a given country.</p> <p>This method takes a country code and searches to find the languages available for that country. Variant locales are removed.</p>
 * @param countryCode  the 2 letter country code, null returns empty
 * @return an unmodifiable List of Locale objects, never null
 */



PACKAGE : package org.apache.commons.lang;

NAME : countriesByLanguage
COMMENT : /** 
 * <p>Obtains the list of countries supported for a given language.</p> <p>This method takes a language code and searches to find the countries available for that language. Variant locales are removed.</p>
 * @param languageCode  the 2 letter language code, null returns empty
 * @return an unmodifiable List of Locale objects, never null
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : NumberUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testDeprecatedStringToIntString
COMMENT : /** 
 * Test for  {@link NumberUtils#stringToInt(String)}.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testToIntString
COMMENT : /** 
 * Test for  {@link NumberUtils#toInt(String)}.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testDeprecatedStringToIntStringI
COMMENT : /** 
 * Test for  {@link NumberUtils#stringToInt(String,int)}.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testToIntStringI
COMMENT : /** 
 * Test for  {@link NumberUtils#toInt(String,int)}.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testToLongString
COMMENT : /** 
 * Test for  {@link NumberUtils#toLong(String)}.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testToLongStringL
COMMENT : /** 
 * Test for  {@link NumberUtils#toLong(String,long)}.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testToFloatString
COMMENT : /** 
 * Test for  {@link NumberUtils#toFloat(String)}.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testToFloatStringF
COMMENT : /** 
 * Test for  {@link NumberUtils#toFloat(String,float)}.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testStringToDoubleString
COMMENT : /** 
 * Test for  {@link NumberUtils#toDouble(String)}.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testStringToDoubleStringD
COMMENT : /** 
 * Test for  {@link NumberUtils#toDouble(String,double)}.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateFloatFailure
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateDoubleFailure
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateInteger
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateIntegerFailure
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateLongFailure
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateBigInteger
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateBigIntegerFailure
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateBigDecimal
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCreateBigDecimalFailure
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMinLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMinInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMinShort
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMinByte
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMinDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMinFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMaxLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMaxInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMaxShort
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMaxByte
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMaxDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMaxFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMinimumLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMinimumInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMinimumShort
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMinimumByte
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMinimumDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMinimumFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMaximumLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMaximumInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMaximumShort
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMaximumByte
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMaximumDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMaximumFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCompareDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCompareFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testIsDigits
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testIsNumber
COMMENT : /** 
 * Tests isNumber(String) and tests that createNumber(String) returns a valid number iff isNumber(String) returns false.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : checkCreateNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstants
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testLang300
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testLang381
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : getInstance
COMMENT : /** 
 * <p>Gets a formatter instance using the default pattern in the default locale.</p>
 * @return a date/time formatter
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getInstance
COMMENT : /** 
 * <p>Gets a formatter instance using the specified pattern in the default locale.</p>
 * @param pattern  {@link java.text.SimpleDateFormat} compatiblepattern
 * @return a pattern based date/time formatter
 * @throws IllegalArgumentException if pattern is invalid
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getInstance
COMMENT : /** 
 * <p>Gets a formatter instance using the specified pattern and time zone.</p>
 * @param pattern  {@link java.text.SimpleDateFormat} compatiblepattern
 * @param timeZone  optional time zone, overrides time zone offormatted date
 * @return a pattern based date/time formatter
 * @throws IllegalArgumentException if pattern is invalid
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getInstance
COMMENT : /** 
 * <p>Gets a formatter instance using the specified pattern and locale.</p>
 * @param pattern  {@link java.text.SimpleDateFormat} compatiblepattern
 * @param locale  optional locale, overrides system locale
 * @return a pattern based date/time formatter
 * @throws IllegalArgumentException if pattern is invalid
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getInstance
COMMENT : /** 
 * <p>Gets a formatter instance using the specified pattern, time zone and locale.</p>
 * @param pattern  {@link java.text.SimpleDateFormat} compatiblepattern
 * @param timeZone  optional time zone, overrides time zone offormatted date
 * @param locale  optional locale, overrides system locale
 * @return a pattern based date/time formatter
 * @throws IllegalArgumentException if pattern is invalidor <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getDateInstance
COMMENT : /** 
 * <p>Gets a date formatter instance using the specified style in the default time zone and locale.</p>
 * @param style  date style: FULL, LONG, MEDIUM, or SHORT
 * @return a localized standard date formatter
 * @throws IllegalArgumentException if the Locale has no datepattern defined
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getDateInstance
COMMENT : /** 
 * <p>Gets a date formatter instance using the specified style and locale in the default time zone.</p>
 * @param style  date style: FULL, LONG, MEDIUM, or SHORT
 * @param locale  optional locale, overrides system locale
 * @return a localized standard date formatter
 * @throws IllegalArgumentException if the Locale has no datepattern defined
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getDateInstance
COMMENT : /** 
 * <p>Gets a date formatter instance using the specified style and time zone in the default locale.</p>
 * @param style  date style: FULL, LONG, MEDIUM, or SHORT
 * @param timeZone  optional time zone, overrides time zone offormatted date
 * @return a localized standard date formatter
 * @throws IllegalArgumentException if the Locale has no datepattern defined
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getDateInstance
COMMENT : /** 
 * <p>Gets a date formatter instance using the specified style, time zone and locale.</p>
 * @param style  date style: FULL, LONG, MEDIUM, or SHORT
 * @param timeZone  optional time zone, overrides time zone offormatted date
 * @param locale  optional locale, overrides system locale
 * @return a localized standard date formatter
 * @throws IllegalArgumentException if the Locale has no datepattern defined
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getTimeInstance
COMMENT : /** 
 * <p>Gets a time formatter instance using the specified style in the default time zone and locale.</p>
 * @param style  time style: FULL, LONG, MEDIUM, or SHORT
 * @return a localized standard time formatter
 * @throws IllegalArgumentException if the Locale has no timepattern defined
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getTimeInstance
COMMENT : /** 
 * <p>Gets a time formatter instance using the specified style and locale in the default time zone.</p>
 * @param style  time style: FULL, LONG, MEDIUM, or SHORT
 * @param locale  optional locale, overrides system locale
 * @return a localized standard time formatter
 * @throws IllegalArgumentException if the Locale has no timepattern defined
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getTimeInstance
COMMENT : /** 
 * <p>Gets a time formatter instance using the specified style and time zone in the default locale.</p>
 * @param style  time style: FULL, LONG, MEDIUM, or SHORT
 * @param timeZone  optional time zone, overrides time zone offormatted time
 * @return a localized standard time formatter
 * @throws IllegalArgumentException if the Locale has no timepattern defined
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getTimeInstance
COMMENT : /** 
 * <p>Gets a time formatter instance using the specified style, time zone and locale.</p>
 * @param style  time style: FULL, LONG, MEDIUM, or SHORT
 * @param timeZone  optional time zone, overrides time zone offormatted time
 * @param locale  optional locale, overrides system locale
 * @return a localized standard time formatter
 * @throws IllegalArgumentException if the Locale has no timepattern defined
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getDateTimeInstance
COMMENT : /** 
 * <p>Gets a date/time formatter instance using the specified style in the default time zone and locale.</p>
 * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT
 * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT
 * @return a localized standard date/time formatter
 * @throws IllegalArgumentException if the Locale has no date/timepattern defined
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getDateTimeInstance
COMMENT : /** 
 * <p>Gets a date/time formatter instance using the specified style and locale in the default time zone.</p>
 * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT
 * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT
 * @param locale  optional locale, overrides system locale
 * @return a localized standard date/time formatter
 * @throws IllegalArgumentException if the Locale has no date/timepattern defined
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getDateTimeInstance
COMMENT : /** 
 * <p>Gets a date/time formatter instance using the specified style and time zone in the default locale.</p>
 * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT
 * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT
 * @param timeZone  optional time zone, overrides time zone offormatted date
 * @return a localized standard date/time formatter
 * @throws IllegalArgumentException if the Locale has no date/timepattern defined
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getDateTimeInstance
COMMENT : /** 
 * <p>Gets a date/time formatter instance using the specified style, time zone and locale.</p>
 * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT
 * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT
 * @param timeZone  optional time zone, overrides time zone offormatted date
 * @param locale  optional locale, overrides system locale
 * @return a localized standard date/time formatter
 * @throws IllegalArgumentException if the Locale has no date/timepattern defined
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getTimeZoneDisplay
COMMENT : /** 
 * <p>Gets the time zone display name, using a cache for performance.</p>
 * @param tz  the zone to query
 * @param daylight  true if daylight savings
 * @param style  the style to use <code>TimeZone.LONG</code>or <code>TimeZone.SHORT</code>
 * @param locale  the locale to use
 * @return the textual name of the time zone
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getDefaultPattern
COMMENT : /** 
 * <p>Gets the default pattern.</p>
 * @return the default pattern
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : FastDateFormat
COMMENT : /** 
 * <p>Constructs a new FastDateFormat.</p>
 * @param pattern  {@link java.text.SimpleDateFormat} compatiblepattern
 * @param timeZone  time zone to use, <code>null</code> means usedefault for <code>Date</code> and value within for <code>Calendar</code>
 * @param locale  locale, <code>null</code> means use systemdefault
 * @throws IllegalArgumentException if pattern is invalid or<code>null</code>
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : init
COMMENT : /** 
 * <p>Initializes the instance for first use.</p>
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : parsePattern
COMMENT : /** 
 * <p>Returns a list of Rules given a pattern.</p>
 * @return a <code>List</code> of Rule objects
 * @throws IllegalArgumentException if pattern is invalid
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : parseToken
COMMENT : /** 
 * <p>Performs the parsing of tokens.</p>
 * @param pattern  the pattern
 * @param indexRef  index references
 * @return parsed token
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : selectNumberRule
COMMENT : /** 
 * <p>Gets an appropriate rule for the padding required.</p>
 * @param field  the field to get a rule for
 * @param padding  the padding required
 * @return a new rule with the correct padding
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a <code>Date</code>, <code>Calendar</code> or <code>Long</code> (milliseconds) object.</p>
 * @param obj  the object to format
 * @param toAppendTo  the buffer to append to
 * @param pos  the position - ignored
 * @return the buffer passed in
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a millisecond <code>long</code> value.</p>
 * @param millis  the millisecond value to format
 * @return the formatted string
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a <code>Date</code> object.</p>
 * @param date  the date to format
 * @return the formatted string
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a <code>Calendar</code> object.</p>
 * @param calendar  the calendar to format
 * @return the formatted string
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a milliseond <code>long</code> value into the supplied <code>StringBuffer</code>.</p>
 * @param millis  the millisecond value to format
 * @param buf  the buffer to format into
 * @return the specified string buffer
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a <code>Date</code> object into the supplied <code>StringBuffer</code>.</p>
 * @param date  the date to format
 * @param buf  the buffer to format into
 * @return the specified string buffer
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a <code>Calendar</code> object into the supplied <code>StringBuffer</code>.</p>
 * @param calendar  the calendar to format
 * @param buf  the buffer to format into
 * @return the specified string buffer
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : applyRules
COMMENT : /** 
 * <p>Performs the formatting by applying the rules to the specified calendar.</p>
 * @param calendar  the calendar to format
 * @param buf  the buffer to format into
 * @return the specified string buffer
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : parseObject
COMMENT : /** 
 * <p>Parsing is not supported.</p>
 * @param source  the string to parse
 * @param pos  the parsing position
 * @return <code>null</code> as not supported
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getPattern
COMMENT : /** 
 * <p>Gets the pattern used by this formatter.</p>
 * @return the pattern, {@link java.text.SimpleDateFormat} compatible
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getTimeZone
COMMENT : /** 
 * <p>Gets the time zone used by this formatter.</p> <p>This zone is always used for <code>Date</code> formatting. If a <code>Calendar</code> is passed in to be formatted, the time zone on that may be used depending on {@link #getTimeZoneOverridesCalendar()}.</p>
 * @return the time zone
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getTimeZoneOverridesCalendar
COMMENT : /** 
 * <p>Returns <code>true</code> if the time zone of the calendar overrides the time zone of the formatter.</p>
 * @return <code>true</code> if time zone of formatteroverridden for calendars
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getLocale
COMMENT : /** 
 * <p>Gets the locale used by this formatter.</p>
 * @return the locale
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getMaxLengthEstimate
COMMENT : /** 
 * <p>Gets an estimate for the maximum string length that the formatter will produce.</p> <p>The actual formatted length will almost always be less than or equal to this amount.</p>
 * @return the maximum formatted length
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : equals
COMMENT : /** 
 * <p>Compares two objects for equality.</p>
 * @param obj  the object to compare to
 * @return <code>true</code> if equal
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : hashCode
COMMENT : /** 
 * <p>Returns a hashcode compatible with equals.</p>
 * @return a hashcode compatible with equals
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : toString
COMMENT : /** 
 * <p>Gets a debugging string version of this formatter.</p>
 * @return a debugging string
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : readObject
COMMENT : /** 
 * Create the object after serialization. This implementation reinitializes the  transient properties.
 * @param in ObjectInputStream from which the object is being deserialized.
 * @throws IOException if there is an IO issue.
 * @throws ClassNotFoundException if a class cannot be found.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * Returns the estimated lentgh of the result.
 * @return the estimated length
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * Appends the value of the specified calendar to the output buffer based on the rule implementation.
 * @param buffer the output buffer
 * @param calendar calendar to be appended
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * Appends the specified value to the output buffer based on the rule implementation.
 * @param buffer the output buffer
 * @param value the value to be appended
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : CharacterLiteral
COMMENT : /** 
 * Constructs a new instance of <code>CharacterLiteral</code> to hold the specified value.
 * @param value the character literal
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : StringLiteral
COMMENT : /** 
 * Constructs a new instance of <code>StringLiteral</code> to hold the specified value.
 * @param value the string literal
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : TextField
COMMENT : /** 
 * Constructs an instance of <code>TextField</code> with the specified field and values.
 * @param field the field
 * @param values the field values
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : UnpaddedNumberField
COMMENT : /** 
 * Constructs an instance of <code>UnpadedNumberField</code> with the specified field.
 * @param field the field
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : UnpaddedMonthField
COMMENT : /** 
 * Constructs an instance of <code>UnpaddedMonthField</code>.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : PaddedNumberField
COMMENT : /** 
 * Constructs an instance of <code>PaddedNumberField</code>.
 * @param field the field
 * @param size size of the output field
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : TwoDigitNumberField
COMMENT : /** 
 * Constructs an instance of <code>TwoDigitNumberField</code> with the specified field.
 * @param field the field
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : TwoDigitYearField
COMMENT : /** 
 * Constructs an instance of <code>TwoDigitYearField</code>.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : TwoDigitMonthField
COMMENT : /** 
 * Constructs an instance of <code>TwoDigitMonthField</code>.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : TwelveHourField
COMMENT : /** 
 * Constructs an instance of <code>TwelveHourField</code> with the specified <code>NumberRule</code>.
 * @param rule the rule
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : TwentyFourHourField
COMMENT : /** 
 * Constructs an instance of <code>TwentyFourHourField</code> with the specified <code>NumberRule</code>.
 * @param rule the rule
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : TimeZoneNameRule
COMMENT : /** 
 * Constructs an instance of <code>TimeZoneNameRule</code> with the specified properties.
 * @param timeZone the time zone
 * @param timeZoneForced if <code>true</code> the time zone is forced into standard and daylight
 * @param locale the locale
 * @param style the style
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : TimeZoneNumberRule
COMMENT : /** 
 * Constructs an instance of <code>TimeZoneNumberRule</code> with the specified properties.
 * @param colon add colon between HH and MM in the output if <code>true</code>
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : estimateLength
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : appendTo
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : TimeZoneDisplayKey
COMMENT : /** 
 * Constructs an instance of <code>TimeZoneDisplayKey</code> with the specified properties.
 * @param timeZone the time zone
 * @param daylight adjust the style for daylight saving time if <code>true</code>
 * @param style the timezone style
 * @param locale the timezone locale
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : hashCode
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : equals
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : Pair
COMMENT : /** 
 * Constructs an instance of <code>Pair</code> to hold the specified objects.
 * @param obj1 one object in the pair
 * @param obj2 second object in the pair
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : equals
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : hashCode
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : toString
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : Extended3Enum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : RangeTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testEqualsObject
COMMENT : /** 
 * Test method for 'org.apache.commons.lang.math.Range.equals(Object)'
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testHashCode
COMMENT : /** 
 * Test method for 'org.apache.commons.lang.math.Range.hashCode()'
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testToString
COMMENT : /** 
 * Test method for 'org.apache.commons.lang.math.Range.toString()'
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : RangeTestFixture
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : containsNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : createDefaultMetaFormat
COMMENT : /** 
 * Get a default meta-format for the default Locale. This will produce behavior identical to a <code>java.lang.MessageFormat</code> using the default locale.
 * @return Format
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : createDefaultMetaFormat
COMMENT : /** 
 * Get a default meta-format for the specified Locale. This will produce behavior identical to a <code>java.lang.MessageFormat</code> using <code>locale</code>.
 * @param locale the Locale for the resulting Format instance.
 * @return Format
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : ExtendedMessageFormat
COMMENT : /** 
 * Create a new ExtendedMessageFormat for the default locale.
 * @param pattern String
 * @param metaFormat Format
 * @throws IllegalArgumentException if <code>metaFormat</code> is<code>null</code> or in case of a bad pattern.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : ExtendedMessageFormat
COMMENT : /** 
 * Create a new ExtendedMessageFormat.
 * @param pattern String
 * @param locale Locale
 * @param metaFormat Format
 * @throws IllegalArgumentException if <code>metaFormat</code> is<code>null</code> or in case of a bad pattern.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : applyPattern
COMMENT : /** 
 * Apply the specified pattern.
 * @param pattern String
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : applyPatternPre
COMMENT : /** 
 * Pre-execution hook by means of which a subclass can customize the behavior of the final applyPattern implementation.
 * @param pattern String
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : applyPatternPost
COMMENT : /** 
 * Post-execution hook by means of which a subclass can customize the behavior of the final applyPattern implementation.
 * @param pattern String
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : toPattern
COMMENT : /** 
 * Render the pattern from the current state of the <code>ExtendedMessageFormat</code>.
 * @return pattern String
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getMetaFormat
COMMENT : /** 
 * Get the meta-format currently configured.
 * @return Format.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setMetaFormat
COMMENT : /** 
 * Set the meta-format. Has no effect until a subsequent call to {@link #applyPattern(String)}.
 * @param metaFormat the Format metaFormat to set.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : stripFormats
COMMENT : /** 
 * Strip all formats from the pattern.
 * @param pattern String to strip
 * @return stripped pattern
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : insertFormats
COMMENT : /** 
 * Insert formats back into the pattern for toPattern() support.
 * @param pattern source
 * @param formats the Formats to insert
 * @param metaFormat Format to format the Formats
 * @return full pattern
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : parseFormats
COMMENT : /** 
 * Parse the formats from the given pattern.
 * @param pattern String to parse
 * @param metaFormat Format to parse the Formats
 * @return array of parsed Formats
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : seekNonWs
COMMENT : /** 
 * Consume whitespace from the current parse position.
 * @param pattern String to read
 * @param pos current position
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : next
COMMENT : /** 
 * Convenience method to advance parse position by 1
 * @param pos ParsePosition
 * @return <code>pos</code>
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : readArgumentIndex
COMMENT : /** 
 * Read the argument index from the current format element
 * @param pattern pattern to parse
 * @param pos current parse position
 * @return argument index as string
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendQuotedString
COMMENT : /** 
 * Consume a quoted string, adding it to <code>appendTo</code> if specified.
 * @param pattern pattern to parse
 * @param pos current parse position
 * @param appendTo optional StringBuffer to append
 * @param escapingOn whether to process escaped quotes
 * @return <code>appendTo</code>
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getQuotedString
COMMENT : /** 
 * Consume quoted string only
 * @param pattern pattern to parse
 * @param pos current parse position
 * @param escapingOn whether to process escaped quotes
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : eatFormat
COMMENT : /** 
 * Consume the entire format found at the current position.
 * @param pattern string to parse
 * @param pos current parse position
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : StandardToStringStyleTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBlank
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testAppendSuper
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testPerson
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArrayArray
COMMENT : null


PACKAGE : null
NAME : Broken3Enum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : UnhandledExceptionTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_throwable_nullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_stringAndThrowable_nullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetCause
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetCauseAndGetMessage
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testClear
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsKey
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContains
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsValue
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsEmpty
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testPut
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemove
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : StringUtilsTrimEmptyTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsEmpty
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsNotEmpty
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsBlank
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsNotBlank
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeprecatedClean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testTrim
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testTrimToNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testTrimToEmpty
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testStrip_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testStripToNull_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testStripToEmpty_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testStrip_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testStripStart_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testStripEnd_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testStripAll
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertArrayEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : ExceptionUtils
COMMENT : /** 
 * <p> Public constructor allows an instance of <code>ExceptionUtils</code> to be created, although that is not normally necessary. </p>
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : addCauseMethodName
COMMENT : /** 
 * <p>Adds to the list of method names used in the search for <code>Throwable</code> objects.</p>
 * @param methodName  the methodName to add to the list, <code>null</code>and empty strings are ignored
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : removeCauseMethodName
COMMENT : /** 
 * <p>Removes from the list of method names used in the search for <code>Throwable</code> objects.</p>
 * @param methodName  the methodName to remove from the list, <code>null</code>and empty strings are ignored
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : setCause
COMMENT : /** 
 * <p>Sets the cause of a <code>Throwable</code> using introspection, allowing source code compatibility between pre-1.4 and post-1.4 Java releases.</p> <p>The typical use of this method is inside a constructor as in the following example:</p> <pre> import org.apache.commons.lang.exception.ExceptionUtils; public class MyException extends Exception { public MyException(String msg) { super(msg); } public MyException(String msg, Throwable cause) { super(msg); ExceptionUtils.setCause(this, cause); } } </pre>
 * @param target  the target <code>Throwable</code>
 * @param cause  the <code>Throwable</code> to set in the target
 * @return a <code>true</code> if the target has been modified
 * @since 2.2
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : toArray
COMMENT : /** 
 * Returns the given list as a <code>String[]</code>.
 * @param list a list to transform.
 * @return the given list as a <code>String[]</code>.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCauseMethodNameList
COMMENT : /** 
 * Returns  {@link #CAUSE_METHOD_NAMES} as a List.
 * @return {@link #CAUSE_METHOD_NAMES} as a List.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : isCauseMethodName
COMMENT : /** 
 * <p>Tests if the list of method names used in the search for <code>Throwable</code> objects include the given name.</p>
 * @param methodName  the methodName to search in the list.
 * @return if the list of method names used in the search for <code>Throwable</code>objects include the given name.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCause
COMMENT : /** 
 * <p>Introspects the <code>Throwable</code> to obtain the cause.</p> <p>The method searches for methods with specific names that return a  <code>Throwable</code> object. This will pick up most wrapping exceptions, including those from JDK 1.4, and {@link org.apache.commons.lang.exception.NestableException NestableException}. The method names can be added to using  {@link #addCauseMethodName(String)}.</p> <p>The default list searched for are:</p> <ul> <li><code>getCause()</code></li> <li><code>getNextException()</code></li> <li><code>getTargetException()</code></li> <li><code>getException()</code></li> <li><code>getSourceException()</code></li> <li><code>getRootCause()</code></li> <li><code>getCausedByException()</code></li> <li><code>getNested()</code></li> </ul> <p>In the absence of any such method, the object is inspected for a <code>detail</code> field assignable to a <code>Throwable</code>.</p> <p>If none of the above is found, returns <code>null</code>.</p>
 * @param throwable  the throwable to introspect for a cause, may be null
 * @return the cause of the <code>Throwable</code>,<code>null</code> if none found or null throwable input
 * @since 1.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCause
COMMENT : /** 
 * <p>Introspects the <code>Throwable</code> to obtain the cause.</p> <ol> <li>Try known exception types.</li> <li>Try the supplied array of method names.</li> <li>Try the field 'detail'.</li> </ol> <p>A <code>null</code> set of method names means use the default set. A <code>null</code> in the set of method names will be ignored.</p>
 * @param throwable  the throwable to introspect for a cause, may be null
 * @param methodNames  the method names, null treated as default set
 * @return the cause of the <code>Throwable</code>,<code>null</code> if none found or null throwable input
 * @since 1.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getRootCause
COMMENT : /** 
 * <p>Introspects the <code>Throwable</code> to obtain the root cause.</p> <p>This method walks through the exception chain to the last element, "root" of the tree, using  {@link #getCause(Throwable)}, and returns that exception.</p> <p>From version 2.2, this method handles recursive cause structures that might otherwise cause infinite loops. If the throwable parameter has a cause of itself, then null will be returned. If the throwable parameter cause chain loops, the last element in the chain before the loop is returned.</p>
 * @param throwable  the throwable to get the root cause for, may be null
 * @return the root cause of the <code>Throwable</code>,<code>null</code> if none found or null throwable input
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCauseUsingWellKnownTypes
COMMENT : /** 
 * <p>Finds a <code>Throwable</code> for known types.</p> <p>Uses <code>instanceof</code> checks to examine the exception, looking for well known types which could contain chained or wrapped exceptions.</p>
 * @param throwable  the exception to examine
 * @return the wrapped exception, or <code>null</code> if not found
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCauseUsingMethodName
COMMENT : /** 
 * <p>Finds a <code>Throwable</code> by method name.</p>
 * @param throwable  the exception to examine
 * @param methodName  the name of the method to find and invoke
 * @return the wrapped exception, or <code>null</code> if not found
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCauseUsingFieldName
COMMENT : /** 
 * <p>Finds a <code>Throwable</code> by field name.</p>
 * @param throwable  the exception to examine
 * @param fieldName  the name of the attribute to examine
 * @return the wrapped exception, or <code>null</code> if not found
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : isThrowableNested
COMMENT : /** 
 * <p>Checks if the Throwable class has a <code>getCause</code> method.</p> <p>This is true for JDK 1.4 and above.</p>
 * @return true if Throwable is nestable
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : isNestedThrowable
COMMENT : /** 
 * <p>Checks whether this <code>Throwable</code> class can store a cause.</p> <p>This method does <b>not</b> check whether it actually does store a cause.<p>
 * @param throwable  the <code>Throwable</code> to examine, may be null
 * @return boolean <code>true</code> if nested otherwise <code>false</code>
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableCount
COMMENT : /** 
 * <p>Counts the number of <code>Throwable</code> objects in the exception chain.</p> <p>A throwable without cause will return <code>1</code>. A throwable with one cause will return <code>2</code> and so on. A <code>null</code> throwable will return <code>0</code>.</p> <p>From version 2.2, this method handles recursive cause structures that might otherwise cause infinite loops. The cause chain is processed until the end is reached, or until the next item in the chain is already in the result set.</p>
 * @param throwable  the throwable to inspect, may be null
 * @return the count of throwables, zero if null input
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowables
COMMENT : /** 
 * <p>Returns the list of <code>Throwable</code> objects in the exception chain.</p> <p>A throwable without cause will return an array containing one element - the input throwable. A throwable with one cause will return an array containing two elements. - the input throwable and the cause throwable. A <code>null</code> throwable will return an array of size zero.</p> <p>From version 2.2, this method handles recursive cause structures that might otherwise cause infinite loops. The cause chain is processed until the end is reached, or until the next item in the chain is already in the result set.</p>
 * @see #getThrowableList(Throwable)
 * @param throwable  the throwable to inspect, may be null
 * @return the array of throwables, never null
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableList
COMMENT : /** 
 * <p>Returns the list of <code>Throwable</code> objects in the exception chain.</p> <p>A throwable without cause will return a list containing one element - the input throwable. A throwable with one cause will return a list containing two elements. - the input throwable and the cause throwable. A <code>null</code> throwable will return a list of size zero.</p> <p>This method handles recursive cause structures that might otherwise cause infinite loops. The cause chain is processed until the end is reached, or until the next item in the chain is already in the result set.</p>
 * @param throwable  the throwable to inspect, may be null
 * @return the list of throwables, never null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * <p>Returns the (zero based) index of the first <code>Throwable</code> that matches the specified class (exactly) in the exception chain. Subclasses of the specified class do not match - see {@link #indexOfType(Throwable,Class)} for the opposite.</p><p>A <code>null</code> throwable returns <code>-1</code>. A <code>null</code> type returns <code>-1</code>. No match in the chain returns <code>-1</code>.</p>
 * @param throwable  the throwable to inspect, may be null
 * @param clazz  the class to search for, subclasses do not match, null returns -1
 * @return the index into the throwable chain, -1 if no match or null input
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * <p>Returns the (zero based) index of the first <code>Throwable</code> that matches the specified type in the exception chain from a specified index. Subclasses of the specified class do not match - see {@link #indexOfType(Throwable,Class,int)} for the opposite.</p><p>A <code>null</code> throwable returns <code>-1</code>. A <code>null</code> type returns <code>-1</code>. No match in the chain returns <code>-1</code>. A negative start index is treated as zero. A start index greater than the number of throwables returns <code>-1</code>.</p>
 * @param throwable  the throwable to inspect, may be null
 * @param clazz  the class to search for, subclasses do not match, null returns -1
 * @param fromIndex  the (zero based) index of the starting position,negative treated as zero, larger than chain size returns -1
 * @return the index into the throwable chain, -1 if no match or null input
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfType
COMMENT : /** 
 * <p>Returns the (zero based) index of the first <code>Throwable</code> that matches the specified class or subclass in the exception chain. Subclasses of the specified class do match - see {@link #indexOfThrowable(Throwable,Class)} for the opposite.</p><p>A <code>null</code> throwable returns <code>-1</code>. A <code>null</code> type returns <code>-1</code>. No match in the chain returns <code>-1</code>.</p>
 * @param throwable  the throwable to inspect, may be null
 * @param type  the type to search for, subclasses match, null returns -1
 * @return the index into the throwable chain, -1 if no match or null input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfType
COMMENT : /** 
 * <p>Returns the (zero based) index of the first <code>Throwable</code> that matches the specified type in the exception chain from a specified index. Subclasses of the specified class do match - see {@link #indexOfThrowable(Throwable,Class)} for the opposite.</p><p>A <code>null</code> throwable returns <code>-1</code>. A <code>null</code> type returns <code>-1</code>. No match in the chain returns <code>-1</code>. A negative start index is treated as zero. A start index greater than the number of throwables returns <code>-1</code>.</p>
 * @param throwable  the throwable to inspect, may be null
 * @param type  the type to search for, subclasses match, null returns -1
 * @param fromIndex  the (zero based) index of the starting position,negative treated as zero, larger than chain size returns -1
 * @return the index into the throwable chain, -1 if no match or null input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOf
COMMENT : /** 
 * <p>Worker method for the <code>indexOfType</code> methods.</p>
 * @param throwable  the throwable to inspect, may be null
 * @param type  the type to search for, subclasses match, null returns -1
 * @param fromIndex  the (zero based) index of the starting position,negative treated as zero, larger than chain size returns -1
 * @param subclass if <code>true</code>, compares with {@link Class#isAssignableFrom(Class)}, otherwise compares using references
 * @return index of the <code>type</code> within throwables nested withing the specified <code>throwable</code>
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printRootCauseStackTrace
COMMENT : /** 
 * <p>Prints a compact stack trace for the root cause of a throwable to <code>System.err</code>.</p> <p>The compact stack trace starts with the root cause and prints stack frames up to the place where it was caught and wrapped. Then it prints the wrapped exception and continues with stack frames until the wrapper exception is caught and wrapped again, etc.</p> <p>The output of this method is consistent across JDK versions. Note that this is the opposite order to the JDK1.4 display.</p> <p>The method is equivalent to <code>printStackTrace</code> for throwables that don't have nested causes.</p>
 * @param throwable  the throwable to output
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printRootCauseStackTrace
COMMENT : /** 
 * <p>Prints a compact stack trace for the root cause of a throwable.</p> <p>The compact stack trace starts with the root cause and prints stack frames up to the place where it was caught and wrapped. Then it prints the wrapped exception and continues with stack frames until the wrapper exception is caught and wrapped again, etc.</p> <p>The output of this method is consistent across JDK versions. Note that this is the opposite order to the JDK1.4 display.</p> <p>The method is equivalent to <code>printStackTrace</code> for throwables that don't have nested causes.</p>
 * @param throwable  the throwable to output, may be null
 * @param stream  the stream to output to, may not be null
 * @throws IllegalArgumentException if the stream is <code>null</code>
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printRootCauseStackTrace
COMMENT : /** 
 * <p>Prints a compact stack trace for the root cause of a throwable.</p> <p>The compact stack trace starts with the root cause and prints stack frames up to the place where it was caught and wrapped. Then it prints the wrapped exception and continues with stack frames until the wrapper exception is caught and wrapped again, etc.</p> <p>The output of this method is consistent across JDK versions. Note that this is the opposite order to the JDK1.4 display.</p> <p>The method is equivalent to <code>printStackTrace</code> for throwables that don't have nested causes.</p>
 * @param throwable  the throwable to output, may be null
 * @param writer  the writer to output to, may not be null
 * @throws IllegalArgumentException if the writer is <code>null</code>
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getRootCauseStackTrace
COMMENT : /** 
 * <p>Creates a compact stack trace for the root cause of the supplied <code>Throwable</code>.</p> <p>The output of this method is consistent across JDK versions. It consists of the root exception followed by each of its wrapping exceptions separated by '[wrapped]'. Note that this is the opposite order to the JDK1.4 display.</p>
 * @param throwable  the throwable to examine, may be null
 * @return an array of stack trace frames, never null
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : removeCommonFrames
COMMENT : /** 
 * <p>Removes common frames from the cause trace given the two stack traces.</p>
 * @param causeFrames  stack trace of a cause throwable
 * @param wrapperFrames  stack trace of a wrapper throwable
 * @throws IllegalArgumentException if either argument is null
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getFullStackTrace
COMMENT : /** 
 * <p>A way to get the entire nested stack-trace of an throwable.</p> <p>The result of this method is highly dependent on the JDK version and whether the exceptions override printStackTrace or not.</p>
 * @param throwable  the <code>Throwable</code> to be examined
 * @return the nested stack trace, with the root cause first
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getStackTrace
COMMENT : /** 
 * <p>Gets the stack trace from a Throwable as a String.</p> <p>The result of this method vary by JDK version as this method uses  {@link Throwable#printStackTrace(java.io.PrintWriter)}. On JDK1.3 and earlier, the cause exception will not be shown unless the specified throwable alters printStackTrace.</p>
 * @param throwable  the <code>Throwable</code> to be examined
 * @return the stack trace as generated by the exception's<code>printStackTrace(PrintWriter)</code> method
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getStackFrames
COMMENT : /** 
 * <p>Captures the stack trace associated with the specified <code>Throwable</code> object, decomposing it into a list of stack frames.</p> <p>The result of this method vary by JDK version as this method uses  {@link Throwable#printStackTrace(java.io.PrintWriter)}. On JDK1.3 and earlier, the cause exception will not be shown unless the specified throwable alters printStackTrace.</p>
 * @param throwable  the <code>Throwable</code> to examine, may be null
 * @return an array of strings describing each stack frame, never null
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getStackFrames
COMMENT : /** 
 * <p>Returns an array where each element is a line from the argument.</p> <p>The end of line is determined by the value of  {@link SystemUtils#LINE_SEPARATOR}.</p> <p>Functionality shared between the <code>getStackFrames(Throwable)</code> methods of this and the {@link org.apache.commons.lang.exception.NestableDelegate} classes.</p>
 * @param stackTrace  a stack trace String
 * @return an array where each element is a line from the argument
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getStackFrameList
COMMENT : /** 
 * <p>Produces a <code>List</code> of stack frames - the message is not included. Only the trace of the specified exception is returned, any caused by trace is stripped.</p> <p>This works in most cases - it will only fail if the exception message contains a line that starts with: <code>&quot;&nbsp;&nbsp;&nbsp;at&quot;.</code></p>
 * @param t is any throwable
 * @return List of stack frames
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * Gets a short message summarising the exception. <p> The message returned is of the form {ClassNameWithoutPackage}: {ThrowableMessage}
 * @param th  the throwable to get a message for, null returns empty string
 * @return the message, non-null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getRootCauseMessage
COMMENT : /** 
 * Gets a short message summarising the root cause exception. <p> The message returned is of the form {ClassNameWithoutPackage}: {ThrowableMessage}
 * @param th  the throwable to get a message for, null returns empty string
 * @return the message, non-null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextInt
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed int value from the Math.random() sequence.</p>
 * @return the random int
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextInt
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed int value from the given <code>random</code> sequence.</p>
 * @param random the Random sequence generator.
 * @return the random int
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextInt
COMMENT : /** 
 * <p>Returns a pseudorandom, uniformly distributed int value between <code>0</code> (inclusive) and the specified value (exclusive), from the Math.random() sequence.</p>
 * @param n  the specified exclusive max-value
 * @return the random int
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextInt
COMMENT : /** 
 * <p>Returns a pseudorandom, uniformly distributed int value between <code>0</code> (inclusive) and the specified value (exclusive), from the given Random sequence.</p>
 * @param random the Random sequence generator.
 * @param n  the specified exclusive max-value
 * @return the random int
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextLong
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed long value from the Math.random() sequence.</p>
 * @return the random long
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextLong
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed long value from the given Random sequence.</p>
 * @param random the Random sequence generator.
 * @return the random long
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextBoolean
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed boolean value from the Math.random() sequence.</p>
 * @return the random boolean
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextBoolean
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed boolean value from the given random sequence.</p>
 * @param random the Random sequence generator.
 * @return the random boolean
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextFloat
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed float value between <code>0.0</code> and <code>1.0</code> from the Math.random() sequence.</p>
 * @return the random float
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextFloat
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed float value between <code>0.0</code> and <code>1.0</code> from the given Random sequence.</p>
 * @param random the Random sequence generator.
 * @return the random float
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextDouble
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed float value between <code>0.0</code> and <code>1.0</code> from the Math.random() sequence.</p>
 * @return the random double
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextDouble
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed float value between <code>0.0</code> and <code>1.0</code> from the given Random sequence.</p>
 * @param random the Random sequence generator.
 * @return the random double
 */



PACKAGE : null
NAME : DummyEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : ValuedColorEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : main
COMMENT : /** 
 * Main method.
 * @param args  command line arguments, ignored
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : suite
COMMENT : /** 
 * Return a new test suite containing this test case.
 * @return a new test suite containing this test case
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrBuilderTest
COMMENT : /** 
 * Create a new test case with the specified name.
 * @param name name
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testConstructors
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testChaining
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testGetSetNewLineText
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testGetSetNullText
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCapacityAndLength
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLength
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testSetLength
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCapacity
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testEnsureCapacity
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testMinimizeCapacity
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testSize
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testIsEmpty
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testClear
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCharAt
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testSetCharAt
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testDeleteCharAt
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testToCharArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testToCharArrayIntInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testGetChars
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testGetCharsIntIntCharArrayInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testDeleteIntInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testDeleteAll_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testDeleteFirst_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testDeleteAll_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testDeleteFirst_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testDeleteAll_StrMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testDeleteFirst_StrMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplace_int_int_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceAll_char_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceFirst_char_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceAll_String_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceFirst_String_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceAll_StrMatcher_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceFirst_StrMatcher_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplace_StrMatcher_String_int_int_int_VaryMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplace_StrMatcher_String_int_int_int_VaryReplace
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplace_StrMatcher_String_int_int_int_VaryStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplace_StrMatcher_String_int_int_int_VaryEndIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplace_StrMatcher_String_int_int_int_VaryCount
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReverse
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testTrim
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testStartsWith
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testEndsWith
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testSubstringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testSubstringIntInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testMidString
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testRightString
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLeftString
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testContains_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testContains_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testContains_StrMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testIndexOf_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testIndexOf_char_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLastIndexOf_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLastIndexOf_char_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testIndexOf_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testIndexOf_String_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLastIndexOf_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLastIndexOf_String_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testIndexOf_StrMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testIndexOf_StrMatcher_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLastIndexOf_StrMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLastIndexOf_StrMatcher_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAsTokenizer
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAsReader
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAsWriter
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testEqualsIgnoreCase
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testToStringBuffer
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLang294
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testIndexOfLang294
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLang295
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : CharSetUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEvaluateSet_Stringarray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSqueeze_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSqueeze_StringStringarray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCount_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCount_StringStringarray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testKeep_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testKeep_StringStringarray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDelete_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDelete_StringStringarray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testTranslate
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testTranslateNullPointerException
COMMENT : null


PACKAGE : null
NAME : OperationEnum
COMMENT : null


PACKAGE : null
NAME : getEnumClass
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : null
NAME : PlusOperation
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : MinusOperation
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : Broken3Enum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : ArrayUtils
COMMENT : /** 
 * <p>ArrayUtils instances should NOT be constructed in standard programming. Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toString
COMMENT : /** 
 * <p>Outputs an array as a String, treating <code>null</code> as an empty array.</p> <p>Multi-dimensional arrays are handled correctly, including multi-dimensional primitive arrays.</p> <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>
 * @param array  the array to get a toString for, may be <code>null</code>
 * @return a String representation of the array, '{}' if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toString
COMMENT : /** 
 * <p>Outputs an array as a String handling <code>null</code>s.</p> <p>Multi-dimensional arrays are handled correctly, including multi-dimensional primitive arrays.</p> <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>
 * @param array  the array to get a toString for, may be <code>null</code>
 * @param stringIfNull  the String to return if the array is <code>null</code>
 * @return a String representation of the array
 */



PACKAGE : package org.apache.commons.lang;

NAME : hashCode
COMMENT : /** 
 * <p>Get a hashCode for an array handling multi-dimensional arrays correctly.</p> <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>
 * @param array  the array to get a hashCode for, may be <code>null</code>
 * @return a hashCode for the array, zero if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : isEquals
COMMENT : /** 
 * <p>Compares two arrays, using equals(), handling multi-dimensional arrays correctly.</p> <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>
 * @param array1  the left hand array to compare, may be <code>null</code>
 * @param array2  the right hand array to compare, may be <code>null</code>
 * @return <code>true</code> if the arrays are equal
 */



PACKAGE : package org.apache.commons.lang;

NAME : toMap
COMMENT : /** 
 * <p>Converts the given array into a  {@link java.util.Map}. Each element of the array must be either a  {@link java.util.Map.Entry} or an Array, containing at least twoelements, where the first element is used as key and the second as value.</p> <p>This method can be used to initialize:</p> <pre> // Create a Map mapping colors. Map colorMap = MapUtils.toMap(new String[][] {{ {"RED", "#FF0000"}, {"GREEN", "#00FF00"}, {"BLUE", "#0000FF"}}); </pre> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  an array whose elements are either a {@link java.util.Map.Entry} oran Array containing at least two elements, may be <code>null</code>
 * @return a <code>Map</code> that was created from the array
 * @throws IllegalArgumentException  if one element of this Array isitself an Array containing less then two elements
 * @throws IllegalArgumentException  if the array contains elements otherthan  {@link java.util.Map.Entry} and an Array
 */



PACKAGE : package org.apache.commons.lang;

NAME : clone
COMMENT : /** 
 * <p>Shallow clones an array returning a typecast result and handling <code>null</code>.</p> <p>The objects in the array are not cloned, thus there is no special handling for multi-dimensional arrays.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  the array to shallow clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : clone
COMMENT : /** 
 * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : clone
COMMENT : /** 
 * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : clone
COMMENT : /** 
 * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : clone
COMMENT : /** 
 * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : clone
COMMENT : /** 
 * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : clone
COMMENT : /** 
 * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : clone
COMMENT : /** 
 * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : clone
COMMENT : /** 
 * <p>Clones an array returning a typecast result and handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : subarray
COMMENT : /** 
 * <p>Produces a new array containing the elements between the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p> <p>The component type of the subarray is always the same as that of the input array. Thus, if the input is an array of type <code>Date</code>, the following usage is envisaged:</p> <pre> Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5); </pre>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : subarray
COMMENT : /** 
 * <p>Produces a new <code>long</code> array containing the elements between the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : subarray
COMMENT : /** 
 * <p>Produces a new <code>int</code> array containing the elements between the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : subarray
COMMENT : /** 
 * <p>Produces a new <code>short</code> array containing the elements between the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : subarray
COMMENT : /** 
 * <p>Produces a new <code>char</code> array containing the elements between the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : subarray
COMMENT : /** 
 * <p>Produces a new <code>byte</code> array containing the elements between the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : subarray
COMMENT : /** 
 * <p>Produces a new <code>double</code> array containing the elements between the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : subarray
COMMENT : /** 
 * <p>Produces a new <code>float</code> array containing the elements between the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : subarray
COMMENT : /** 
 * <p>Produces a new <code>boolean</code> array containing the elements between the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isSameLength
COMMENT : /** 
 * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>. <p>Any multi-dimensional aspects of the arrays are ignored.</p>
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array
 */



PACKAGE : package org.apache.commons.lang;

NAME : isSameLength
COMMENT : /** 
 * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array
 */



PACKAGE : package org.apache.commons.lang;

NAME : isSameLength
COMMENT : /** 
 * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array
 */



PACKAGE : package org.apache.commons.lang;

NAME : isSameLength
COMMENT : /** 
 * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array
 */



PACKAGE : package org.apache.commons.lang;

NAME : isSameLength
COMMENT : /** 
 * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array
 */



PACKAGE : package org.apache.commons.lang;

NAME : isSameLength
COMMENT : /** 
 * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array
 */



PACKAGE : package org.apache.commons.lang;

NAME : isSameLength
COMMENT : /** 
 * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array
 */



PACKAGE : package org.apache.commons.lang;

NAME : isSameLength
COMMENT : /** 
 * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array
 */



PACKAGE : package org.apache.commons.lang;

NAME : isSameLength
COMMENT : /** 
 * <p>Checks whether two arrays are the same length, treating <code>null</code> arrays as length <code>0</code>.</p>
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating<code>null</code> as an empty array
 */



PACKAGE : package org.apache.commons.lang;

NAME : getLength
COMMENT : /** 
 * <p>Returns the length of the specified array. This method can deal with <code>Object</code> arrays and with primitive arrays.</p> <p>If the input array is <code>null</code>, <code>0</code> is returned.</p> <pre> ArrayUtils.getLength(null)            = 0 ArrayUtils.getLength([])              = 0 ArrayUtils.getLength([null])          = 1 ArrayUtils.getLength([true, false])   = 2 ArrayUtils.getLength([1, 2, 3])       = 3 ArrayUtils.getLength(["a", "b", "c"]) = 3 </pre>
 * @param array  the array to retrieve the length from, may be null
 * @return The length of the array, or <code>0</code> if the array is <code>null</code>
 * @throws IllegalArgumentException if the object arguement is not an array.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isSameType
COMMENT : /** 
 * <p>Checks whether two arrays are the same type taking into account multi-dimensional arrays.</p>
 * @param array1 the first array, must not be <code>null</code>
 * @param array2 the second array, must not be <code>null</code>
 * @return <code>true</code> if type of arrays matches
 * @throws IllegalArgumentException if either array is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : reverse
COMMENT : /** 
 * <p>Reverses the order of the given array.</p> <p>There is no special handling for multi-dimensional arrays.</p> <p>This method does nothing for a <code>null</code> input array.</p>
 * @param array  the array to reverse, may be <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : reverse
COMMENT : /** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a <code>null</code> input array.</p>
 * @param array  the array to reverse, may be <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : reverse
COMMENT : /** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a <code>null</code> input array.</p>
 * @param array  the array to reverse, may be <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : reverse
COMMENT : /** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a <code>null</code> input array.</p>
 * @param array  the array to reverse, may be <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : reverse
COMMENT : /** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a <code>null</code> input array.</p>
 * @param array  the array to reverse, may be <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : reverse
COMMENT : /** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a <code>null</code> input array.</p>
 * @param array  the array to reverse, may be <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : reverse
COMMENT : /** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a <code>null</code> input array.</p>
 * @param array  the array to reverse, may be <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : reverse
COMMENT : /** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a <code>null</code> input array.</p>
 * @param array  the array to reverse, may be <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : reverse
COMMENT : /** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a <code>null</code> input array.</p>
 * @param array  the array to reverse, may be <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given object in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @return the index of the object within the array, {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given object in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the index to start searching at
 * @return the index of the object within the array starting at the index,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given object within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given object in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger thanthe array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Checks if the object is in the given array.</p> <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 * @param array  the array to search through
 * @param objectToFind  the object to find
 * @return <code>true</code> if the array contains the object
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than thearray length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than thearray length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than thearray length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value within a given tolerance in the array. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array starting at the given index. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value within a given tolerance in the array. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value in the array starting at the given index. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @param tolerance  search for value within plus/minus this amount
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Checks if a value falling within the given tolerance is in the given array.  If the array contains a value within the inclusive range  defined by (value - tolerance) to (value + tolerance).</p> <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 * @param array  the array to search
 * @param valueToFind  the value to find
 * @param tolerance  the array contains the tolerance of the search
 * @return true if value falling within tolerance is in array
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code>array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if <code>null</code> array input.</p>
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Characters to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Character</code> array, may be <code>null</code>
 * @return a <code>char</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Character to primitives handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Character</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>char</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toObject
COMMENT : /** 
 * <p>Converts an array of primitive chars to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array a <code>char</code> array
 * @return a <code>Character</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Longs to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Long</code> array, may be <code>null</code>
 * @return a <code>long</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Long to primitives handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Long</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>long</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toObject
COMMENT : /** 
 * <p>Converts an array of primitive longs to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>long</code> array
 * @return a <code>Long</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Integers to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Integer</code> array, may be <code>null</code>
 * @return an <code>int</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Integer</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return an <code>int</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toObject
COMMENT : /** 
 * <p>Converts an array of primitive ints to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  an <code>int</code> array
 * @return an <code>Integer</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Shorts to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Short</code> array, may be <code>null</code>
 * @return a <code>byte</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Short to primitives handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Short</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>byte</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toObject
COMMENT : /** 
 * <p>Converts an array of primitive shorts to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>short</code> array
 * @return a <code>Short</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Bytes to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Byte</code> array, may be <code>null</code>
 * @return a <code>byte</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Byte</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>byte</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toObject
COMMENT : /** 
 * <p>Converts an array of primitive bytes to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>byte</code> array
 * @return a <code>Byte</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Doubles to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Double</code> array, may be <code>null</code>
 * @return a <code>double</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Doubles to primitives handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Double</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>double</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toObject
COMMENT : /** 
 * <p>Converts an array of primitive doubles to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>double</code> array
 * @return a <code>Double</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Floats to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Float</code> array, may be <code>null</code>
 * @return a <code>float</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Float</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>float</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toObject
COMMENT : /** 
 * <p>Converts an array of primitive floats to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>float</code> array
 * @return a <code>Float</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Booleans to primitives.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Boolean</code> array, may be <code>null</code>
 * @return a <code>boolean</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toPrimitive
COMMENT : /** 
 * <p>Converts an array of object Booleans to primitives handling <code>null</code>.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>Boolean</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>boolean</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toObject
COMMENT : /** 
 * <p>Converts an array of primitive booleans to objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array  a <code>boolean</code> array
 * @return a <code>Boolean</code> array, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : isEmpty
COMMENT : /** 
 * <p>Checks if an array of Objects is empty or <code>null</code>.</p>
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isEmpty
COMMENT : /** 
 * <p>Checks if an array of primitive longs is empty or <code>null</code>.</p>
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isEmpty
COMMENT : /** 
 * <p>Checks if an array of primitive ints is empty or <code>null</code>.</p>
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isEmpty
COMMENT : /** 
 * <p>Checks if an array of primitive shorts is empty or <code>null</code>.</p>
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isEmpty
COMMENT : /** 
 * <p>Checks if an array of primitive chars is empty or <code>null</code>.</p>
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isEmpty
COMMENT : /** 
 * <p>Checks if an array of primitive bytes is empty or <code>null</code>.</p>
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isEmpty
COMMENT : /** 
 * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isEmpty
COMMENT : /** 
 * <p>Checks if an array of primitive floats is empty or <code>null</code>.</p>
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isEmpty
COMMENT : /** 
 * <p>Checks if an array of primitive booleans is empty or <code>null</code>.</p>
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : addAll
COMMENT : /** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of <code>array1</code> followed by all of the elements <code>array2</code>. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(null, null)     = null ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] ArrayUtils.addAll([null], [null]) = [null, null] ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"] </pre>
 * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
 * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
 * @return The new array, <code>null</code> if <code>null</code> array inputs. The type of the new array is the type of the first array.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : addAll
COMMENT : /** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of <code>array1</code> followed by all of the elements <code>array2</code>. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new boolean[] array.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : addAll
COMMENT : /** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of <code>array1</code> followed by all of the elements <code>array2</code>. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new char[] array.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : addAll
COMMENT : /** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of <code>array1</code> followed by all of the elements <code>array2</code>. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new byte[] array.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : addAll
COMMENT : /** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of <code>array1</code> followed by all of the elements <code>array2</code>. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new short[] array.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : addAll
COMMENT : /** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of <code>array1</code> followed by all of the elements <code>array2</code>. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new int[] array.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : addAll
COMMENT : /** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of <code>array1</code> followed by all of the elements <code>array2</code>. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new long[] array.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : addAll
COMMENT : /** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of <code>array1</code> followed by all of the elements <code>array2</code>. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new float[] array.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : addAll
COMMENT : /** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of <code>array1</code> followed by all of the elements <code>array2</code>. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new double[] array.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of  the new array is the same as that of the input array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, null)      = [null] ArrayUtils.add(null, "a")       = ["a"] ArrayUtils.add(["a"], null)     = ["a", null] ArrayUtils.add(["a"], "b")      = ["a", "b"] ArrayUtils.add(["a", "b"], "c") = ["a", "b", "c"] </pre>
 * @param array  the array to "add" the element to, may be <code>null</code>
 * @param element  the object to add
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of  the new array is the same as that of the input array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, true)          = [true] ArrayUtils.add([true], false)       = [true, false] ArrayUtils.add([true, false], true) = [true, false, true] </pre>
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of  the new array is the same as that of the input array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of  the new array is the same as that of the input array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, '0')       = ['0'] ArrayUtils.add(['1'], '0')      = ['1', '0'] ArrayUtils.add(['1', '0'], '1') = ['1', '0', '1'] </pre>
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of  the new array is the same as that of the input array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of  the new array is the same as that of the input array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of  the new array is the same as that of the input array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of  the new array is the same as that of the input array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of  the new array is the same as that of the input array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : copyArrayGrow1
COMMENT : /** 
 * Returns a copy of the given array of size 1 greater than the argument.  The last value of the array is left to the default value.
 * @param array The array to copy, must not be <code>null</code>.
 * @param newArrayComponentType If <code>array</code> is <code>null</code>, create a size 1 array of this type.
 * @return A new copy of the array of size 1 greater than the input.
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Inserts the specified element at the specified position in the array.  Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0, null)      = [null] ArrayUtils.add(null, 0, "a")       = ["a"] ArrayUtils.add(["a"], 1, null)     = ["a", null] ArrayUtils.add(["a"], 1, "b")      = ["a", "b"] ArrayUtils.add(["a", "b"], 3, "c") = ["a", "b", "c"] </pre>
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index > array.length).
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Inserts the specified element at the specified position in the array.  Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0, true)          = [true] ArrayUtils.add([true], 0, false)       = [false, true] ArrayUtils.add([false], 1, true)       = [false, true] ArrayUtils.add([true, false], 1, true) = [true, true, false] </pre>
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index > array.length).
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Inserts the specified element at the specified position in the array.  Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0, 'a')            = ['a'] ArrayUtils.add(['a'], 0, 'b')           = ['b', 'a'] ArrayUtils.add(['a', 'b'], 0, 'c')      = ['c', 'a', 'b'] ArrayUtils.add(['a', 'b'], 1, 'k')      = ['a', 'k', 'b'] ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c'] </pre>
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index > array.length).
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Inserts the specified element at the specified position in the array.  Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1], 0, 2)         = [2, 1] ArrayUtils.add([2, 6], 2, 3)      = [2, 6, 3] ArrayUtils.add([2, 6], 0, 1)      = [1, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3] </pre>
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index > array.length).
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Inserts the specified element at the specified position in the array.  Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1], 0, 2)         = [2, 1] ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3] </pre>
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index > array.length).
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Inserts the specified element at the specified position in the array.  Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1], 0, 2)         = [2, 1] ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3] </pre>
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index > array.length).
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Inserts the specified element at the specified position in the array.  Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1L], 0, 2L)           = [2L, 1L] ArrayUtils.add([2L, 6L], 2, 10L)      = [2L, 6L, 10L] ArrayUtils.add([2L, 6L], 0, -4L)      = [-4L, 2L, 6L] ArrayUtils.add([2L, 6L, 3L], 2, 1L)   = [2L, 6L, 1L, 3L] </pre>
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index > array.length).
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Inserts the specified element at the specified position in the array.  Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1.1f], 0, 2.2f)               = [2.2f, 1.1f] ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        = [2.3f, 6.4f, 10.5f] ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        = [-4.8f, 2.6f, 6.7f] ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   = [2.9f, 6.0f, 1.0f, 0.3f] </pre>
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index > array.length).
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Inserts the specified element at the specified position in the array.  Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1.1], 0, 2.2)              = [2.2, 1.1] ArrayUtils.add([2.3, 6.4], 2, 10.5)        = [2.3, 6.4, 10.5] ArrayUtils.add([2.6, 6.7], 0, -4.8)        = [-4.8, 2.6, 6.7] ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    = [2.9, 6.0, 1.0, 0.3] </pre>
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index > array.length).
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * Underlying implementation of add(array, index, element) methods.  The last parameter is the class, which may not equal element.getClass  for primitives.
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @param clss the type of the element being added
 * @return A new array containing the existing elements and the new element
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove(["a"], 0)           = [] ArrayUtils.remove(["a", "b"], 0)      = ["b"] ArrayUtils.remove(["a", "b"], 1)      = ["a"] ArrayUtils.remove(["a", "b", "c"], 1) = ["a", "c"] </pre>
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeElement
COMMENT : /** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left  (substracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component  type of the returned array is always the same as that of the input  array.</p> <pre> ArrayUtils.removeElement(null, "a")            = null ArrayUtils.removeElement([], "a")              = [] ArrayUtils.removeElement(["a"], "b")           = ["a"] ArrayUtils.removeElement(["a", "b"], "a")      = ["b"] ArrayUtils.removeElement(["a", "b", "a"], "a") = ["b", "a"] </pre>
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([true], 0)              = [] ArrayUtils.remove([true, false], 0)       = [false] ArrayUtils.remove([true, false], 1)       = [true] ArrayUtils.remove([true, true, false], 1) = [true, false] </pre>
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeElement
COMMENT : /** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left  (substracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component  type of the returned array is always the same as that of the input  array.</p> <pre> ArrayUtils.removeElement(null, true)                = null ArrayUtils.removeElement([], true)                  = [] ArrayUtils.removeElement([true], false)             = [true] ArrayUtils.removeElement([true, false], false)      = [true] ArrayUtils.removeElement([true, false, true], true) = [false, true] </pre>
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1], 0)          = [] ArrayUtils.remove([1, 0], 0)       = [0] ArrayUtils.remove([1, 0], 1)       = [1] ArrayUtils.remove([1, 0, 1], 1)    = [1, 1] </pre>
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeElement
COMMENT : /** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left  (substracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component  type of the returned array is always the same as that of the input  array.</p> <pre> ArrayUtils.removeElement(null, 1)        = null ArrayUtils.removeElement([], 1)          = [] ArrayUtils.removeElement([1], 0)         = [1] ArrayUtils.removeElement([1, 0], 0)      = [1] ArrayUtils.removeElement([1, 0, 1], 1)   = [0, 1] </pre>
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove(['a'], 0)           = [] ArrayUtils.remove(['a', 'b'], 0)      = ['b'] ArrayUtils.remove(['a', 'b'], 1)      = ['a'] ArrayUtils.remove(['a', 'b', 'c'], 1) = ['a', 'c'] </pre>
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeElement
COMMENT : /** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left  (substracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component  type of the returned array is always the same as that of the input  array.</p> <pre> ArrayUtils.removeElement(null, 'a')            = null ArrayUtils.removeElement([], 'a')              = [] ArrayUtils.removeElement(['a'], 'b')           = ['a'] ArrayUtils.removeElement(['a', 'b'], 'a')      = ['b'] ArrayUtils.removeElement(['a', 'b', 'a'], 'a') = ['b', 'a'] </pre>
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1.1], 0)           = [] ArrayUtils.remove([2.5, 6.0], 0)      = [6.0] ArrayUtils.remove([2.5, 6.0], 1)      = [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8] </pre>
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeElement
COMMENT : /** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left  (substracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component  type of the returned array is always the same as that of the input  array.</p> <pre> ArrayUtils.removeElement(null, 1.1)            = null ArrayUtils.removeElement([], 1.1)              = [] ArrayUtils.removeElement([1.1], 1.2)           = [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1] </pre>
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1.1], 0)           = [] ArrayUtils.remove([2.5, 6.0], 0)      = [6.0] ArrayUtils.remove([2.5, 6.0], 1)      = [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8] </pre>
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeElement
COMMENT : /** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left  (substracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component  type of the returned array is always the same as that of the input  array.</p> <pre> ArrayUtils.removeElement(null, 1.1)            = null ArrayUtils.removeElement([], 1.1)              = [] ArrayUtils.removeElement([1.1], 1.2)           = [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1] </pre>
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1], 0)         = [] ArrayUtils.remove([2, 6], 0)      = [6] ArrayUtils.remove([2, 6], 1)      = [2] ArrayUtils.remove([2, 6, 3], 1)   = [2, 3] </pre>
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeElement
COMMENT : /** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left  (substracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component  type of the returned array is always the same as that of the input  array.</p> <pre> ArrayUtils.removeElement(null, 1)      = null ArrayUtils.removeElement([], 1)        = [] ArrayUtils.removeElement([1], 2)       = [1] ArrayUtils.removeElement([1, 3], 1)    = [3] ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1] </pre>
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1], 0)         = [] ArrayUtils.remove([2, 6], 0)      = [6] ArrayUtils.remove([2, 6], 1)      = [2] ArrayUtils.remove([2, 6, 3], 1)   = [2, 3] </pre>
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeElement
COMMENT : /** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left  (substracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component  type of the returned array is always the same as that of the input  array.</p> <pre> ArrayUtils.removeElement(null, 1)      = null ArrayUtils.removeElement([], 1)        = [] ArrayUtils.removeElement([1], 2)       = [1] ArrayUtils.removeElement([1, 3], 1)    = [3] ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1] </pre>
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1], 0)         = [] ArrayUtils.remove([2, 6], 0)      = [6] ArrayUtils.remove([2, 6], 1)      = [2] ArrayUtils.remove([2, 6, 3], 1)   = [2, 3] </pre>
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeElement
COMMENT : /** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left  (substracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component  type of the returned array is always the same as that of the input  array.</p> <pre> ArrayUtils.removeElement(null, 1)      = null ArrayUtils.removeElement([], 1)        = [] ArrayUtils.removeElement([1], 2)       = [1] ArrayUtils.removeElement([1, 3], 1)    = [3] ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1] </pre>
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (substracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component  type of the returned array is always the same as that of the input  array.</p> <p>If the input array is <code>null</code>, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p>
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableDouble
COMMENT : /** 
 * Constructs a new MutableDouble with the default value of zero.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableDouble
COMMENT : /** 
 * Constructs a new MutableDouble with the specified value.
 * @param value a value.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableDouble
COMMENT : /** 
 * Constructs a new MutableDouble with the specified value.
 * @param value a value.
 * @throws NullPointerException if the object is null
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : getValue
COMMENT : /** 
 * Gets the value as a Double instance.
 * @return the value as a Double
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value.
 * @param value the value to set
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value from any Number instance.
 * @param value the value to set
 * @throws NullPointerException if the object is null
 * @throws ClassCastException if the type is not a  {@link Number}
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : intValue
COMMENT : /** 
 * Returns the value of this MutableDouble as a int.
 * @return the numeric value represented by this object after conversion to type int.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : longValue
COMMENT : /** 
 * Returns the value of this MutableDouble as a long.
 * @return the numeric value represented by this object after conversion to type long.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : floatValue
COMMENT : /** 
 * Returns the value of this MutableDouble as a float.
 * @return the numeric value represented by this object after conversion to type float.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : doubleValue
COMMENT : /** 
 * Returns the value of this MutableDouble as a double.
 * @return the numeric value represented by this object after conversion to type double.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : isNaN
COMMENT : /** 
 * Checks whether the double value is the special NaN value.
 * @return true if NaN
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : isInfinite
COMMENT : /** 
 * Checks whether the double value is infinite.
 * @return true if infinite
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toDouble
COMMENT : /** 
 * Gets this mutable as an instance of Double.
 * @return a Double instance containing the value from this mutable
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : increment
COMMENT : /** 
 * Increments the value.
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : decrement
COMMENT : /** 
 * Decrements the value.
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : add
COMMENT : /** 
 * Adds a value.
 * @param operand the value to add
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : add
COMMENT : /** 
 * Adds a value.
 * @param operand the value to add
 * @throws NullPointerException if the object is null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : subtract
COMMENT : /** 
 * Subtracts a value.
 * @param operand the value to add
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : subtract
COMMENT : /** 
 * Subtracts a value.
 * @param operand the value to add
 * @throws NullPointerException if the object is null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : equals
COMMENT : /** 
 * Compares this object against the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>Double</code> object that represents a double that has the identical bit pattern to the bit pattern of the double represented by this object. For this purpose, two <code>double</code> values are considered to be the same if and only if the method {@link Double#doubleToLongBits(double)}returns the same long value when applied to each. <p> Note that in most cases, for two instances of class <code>Double</code>,<code>d1</code> and <code>d2</code>, the value of <code>d1.equals(d2)</code> is <code>true</code> if and only if <blockquote> <pre> d1.doubleValue()&nbsp;== d2.doubleValue() </pre> </blockquote> <p> also has the value <code>true</code>. However, there are two exceptions: <ul> <li>If <code>d1</code> and <code>d2</code> both represent <code>Double.NaN</code>, then the <code>equals</code> method returns <code>true</code>, even though <code>Double.NaN==Double.NaN</code> has the value <code>false</code>. <li>If <code>d1</code> represents <code>+0.0</code> while <code>d2</code> represents <code>-0.0</code>, or vice versa, the <code>equal</code> test has the value <code>false</code>, even though <code>+0.0==-0.0</code> has the value <code>true</code>. This allows hashtables to operate properly. </ul>
 * @param obj the object to compare with.
 * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : hashCode
COMMENT : /** 
 * Returns a suitable hashcode for this mutable.
 * @return a suitable hashcode
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : compareTo
COMMENT : /** 
 * Compares this mutable to another in ascending order.
 * @param obj the mutable to compare to
 * @return negative if this is less, zero if equal, positive if greater
 * @throws ClassCastException if the argument is not a MutableDouble
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toString
COMMENT : /** 
 * Returns the String value of this mutable.
 * @return the mutable value as a string
 */



PACKAGE : package org.apache.commons.lang;

NAME : CharUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToCharacterObject_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToCharacterObject_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToChar_Character
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToChar_Character_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToChar_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToChar_String_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToIntValue_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToIntValue_char_int
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToIntValue_Character
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToIntValue_Character_int
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToString_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToString_Character
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToUnicodeEscaped_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToUnicodeEscaped_Character
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAscii_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAsciiPrintable_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAsciiControl_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAsciiAlpha_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAsciiAlphaUpper_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAsciiAlphaLower_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAsciiNumeric_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAsciiAlphanumeric_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableTestSuite
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : getRegistry
COMMENT : /** 
 * <p> Returns the registry of objects being traversed by the reflection methods in the current thread. </p>
 * @return Set the registry of objects being traversed
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isRegistered
COMMENT : /** 
 * <p> Returns <code>true</code> if the registry contains the given object. Used by the reflection methods to avoid infinite loops. </p>
 * @param value The object to lookup in the registry.
 * @return boolean <code>true</code> if the registry contains the given object.
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionAppend
COMMENT : /** 
 * <p> Appends the fields and values defined by the given object of the given <code>Class</code>. </p>
 * @param object the object to append details of
 * @param clazz the class to append details of
 * @param builder the builder to append to
 * @param useTransients whether to use transient fields
 * @param excludeFields Collection of String field names to exclude from use in calculation of hash code
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionHashCode
COMMENT : /** 
 * <p> This method uses reflection to build a valid hash code. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> Transient members will be not be used, as they are likely derived fields, and not part of the value of the <code>Object</code>. </p> <p> Static fields will not be tested. Superclass fields will be included. </p> <p> Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class, however this is not vital. Prime numbers are preferred, especially for the multiplier. </p>
 * @param initialNonZeroOddNumber a non-zero, odd number used as the initial value
 * @param multiplierNonZeroOddNumber a non-zero, odd number used as the multiplier
 * @param object the Object to create a <code>hashCode</code> for
 * @return int hash code
 * @throws IllegalArgumentException if the Object is <code>null</code>
 * @throws IllegalArgumentException if the number is zero or even
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionHashCode
COMMENT : /** 
 * <p> This method uses reflection to build a valid hash code. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>. </p> <p> Static fields will not be tested. Superclass fields will be included. </p> <p> Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class, however this is not vital. Prime numbers are preferred, especially for the multiplier. </p>
 * @param initialNonZeroOddNumber a non-zero, odd number used as the initial value
 * @param multiplierNonZeroOddNumber a non-zero, odd number used as the multiplier
 * @param object the Object to create a <code>hashCode</code> for
 * @param testTransients whether to include transient fields
 * @return int hash code
 * @throws IllegalArgumentException if the Object is <code>null</code>
 * @throws IllegalArgumentException if the number is zero or even
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionHashCode
COMMENT : /** 
 * Calls  {@link #reflectionHashCode(int,int,Object,boolean,Class,String[])} with excludeFields set to<code>null</code>.
 * @param initialNonZeroOddNumber a non-zero, odd number used as the initial value
 * @param multiplierNonZeroOddNumber a non-zero, odd number used as the multiplier
 * @param object the Object to create a <code>hashCode</code> for
 * @param testTransients whether to include transient fields
 * @param reflectUpToClass the superclass to reflect up to (inclusive), may be <code>null</code>
 * @return int hash code
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionHashCode
COMMENT : /** 
 * <p> This method uses reflection to build a valid hash code. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>. </p> <p> Static fields will not be included. Superclass fields will be included up to and including the specified superclass. A null superclass is treated as java.lang.Object. </p> <p> Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class, however this is not vital. Prime numbers are preferred, especially for the multiplier. </p>
 * @param initialNonZeroOddNumber a non-zero, odd number used as the initial value
 * @param multiplierNonZeroOddNumber a non-zero, odd number used as the multiplier
 * @param object the Object to create a <code>hashCode</code> for
 * @param testTransients whether to include transient fields
 * @param reflectUpToClass the superclass to reflect up to (inclusive), may be <code>null</code>
 * @param excludeFields array of field names to exclude from use in calculation of hash code
 * @return int hash code
 * @throws IllegalArgumentException if the Object is <code>null</code>
 * @throws IllegalArgumentException if the number is zero or even
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionHashCode
COMMENT : /** 
 * <p> This method uses reflection to build a valid hash code. </p> <p> This constructor uses two hard coded choices for the constants needed to build a hash code. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> Transient members will be not be used, as they are likely derived fields, and not part of the value of the <code>Object</code>. </p> <p> Static fields will not be tested. Superclass fields will be included. </p>
 * @param object the Object to create a <code>hashCode</code> for
 * @return int hash code
 * @throws IllegalArgumentException if the object is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionHashCode
COMMENT : /** 
 * <p> This method uses reflection to build a valid hash code. </p> <p> This constructor uses two hard coded choices for the constants needed to build a hash code. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <P> If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>. </p> <p> Static fields will not be tested. Superclass fields will be included. </p>
 * @param object the Object to create a <code>hashCode</code> for
 * @param testTransients whether to include transient fields
 * @return int hash code
 * @throws IllegalArgumentException if the object is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionHashCode
COMMENT : /** 
 * <p> This method uses reflection to build a valid hash code. </p> <p> This constructor uses two hard coded choices for the constants needed to build a hash code. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> Transient members will be not be used, as they are likely derived fields, and not part of the value of the <code>Object</code>. </p> <p> Static fields will not be tested. Superclass fields will be included. </p>
 * @param object the Object to create a <code>hashCode</code> for
 * @param excludeFields Collection of String field names to exclude from use in calculation of hash code
 * @return int hash code
 * @throws IllegalArgumentException if the object is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionHashCode
COMMENT : /** 
 * <p> This method uses reflection to build a valid hash code. </p> <p> This constructor uses two hard coded choices for the constants needed to build a hash code. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> Transient members will be not be used, as they are likely derived fields, and not part of the value of the <code>Object</code>. </p> <p> Static fields will not be tested. Superclass fields will be included. </p>
 * @param object the Object to create a <code>hashCode</code> for
 * @param excludeFields array of field names to exclude from use in calculation of hash code
 * @return int hash code
 * @throws IllegalArgumentException if the object is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : register
COMMENT : /** 
 * <p> Registers the given object. Used by the reflection methods to avoid infinite loops. </p>
 * @param value The object to register.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toIdentityHashCodeInteger
COMMENT : /** 
 * Returns an Integer for the given object's default hash code.
 * @see System#identityHashCode(Object)
 * @param value object for which the hashCode is to be calculated
 * @return Default int hash code
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : unregister
COMMENT : /** 
 * <p> Unregisters the given object. </p> <p> Used by the reflection methods to avoid infinite loops.
 * @param value The object to unregister.
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : HashCodeBuilder
COMMENT : /** 
 * <p> Uses two hard coded choices for the constants needed to build a <code>hashCode</code>. </p>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : HashCodeBuilder
COMMENT : /** 
 * <p> Two randomly chosen, non-zero, odd numbers must be passed in. Ideally these should be different for each class, however this is not vital. </p> <p> Prime numbers are preferred, especially for the multiplier. </p>
 * @param initialNonZeroOddNumber a non-zero, odd number used as the initial value
 * @param multiplierNonZeroOddNumber a non-zero, odd number used as the multiplier
 * @throws IllegalArgumentException if the number is zero or even
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>boolean</code>. </p> <p> This adds <code>iConstant * 1</code> to the <code>hashCode</code> and not a <code>1231</code> or <code>1237</code> as done in java.lang.Boolean. This is in accordance with the <quote>Effective Java</quote> design. </p>
 * @param value the boolean to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>boolean</code> array. </p>
 * @param array the array to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>byte</code>. </p>
 * @param value the byte to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>byte</code> array. </p>
 * @param array the array to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>char</code>. </p>
 * @param value the char to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>char</code> array. </p>
 * @param array the array to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>double</code>. </p>
 * @param value the double to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>double</code> array. </p>
 * @param array the array to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>float</code>. </p>
 * @param value the float to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>float</code> array. </p>
 * @param array the array to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for an <code>int</code>. </p>
 * @param value the int to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for an <code>int</code> array. </p>
 * @param array the array to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>long</code>. </p> <p>
 * @param value the long to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>long</code> array. </p>
 * @param array the array to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for an <code>Object</code>. </p>
 * @param object the Object to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for an <code>Object</code> array. </p>
 * @param array the array to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>short</code>. </p>
 * @param value the short to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Append a <code>hashCode</code> for a <code>short</code> array. </p>
 * @param array the array to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSuper
COMMENT : /** 
 * <p> Adds the result of super.hashCode() to this builder. </p>
 * @param superHashCode the result of calling <code>super.hashCode()</code>
 * @return this HashCodeBuilder, used to chain calls.
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toHashCode
COMMENT : /** 
 * <p> Return the computed <code>hashCode</code>. </p>
 * @return <code>hashCode</code> based on the fields appended
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : test_toStringExclude
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : test_toStringExcludeArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : test_toStringExcludeArrayWithNull
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : test_toStringExcludeArrayWithNulls
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : test_toStringExcludeCollection
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : test_toStringExcludeCollectionWithNull
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : test_toStringExcludeCollectionWithNulls
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : test_toStringExcludeEmptyArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : test_toStringExcludeEmptyCollection
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : test_toStringExcludeNullArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : test_toStringExcludeNullCollection
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : validateNonSecretField
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : validateSecretFieldAbsent
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : validateSecretFieldPresent
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : fillWithHtml40Entities
COMMENT : /** 
 * <p> Fills the specified entities instance with HTML 40 entities. </p>
 * @param entities the instance to be filled.
 */



PACKAGE : package org.apache.commons.lang;

NAME : addEntities
COMMENT : /** 
 * <p> Adds entities to this entity. </p>
 * @param entityArray array of entities to be added
 */



PACKAGE : package org.apache.commons.lang;

NAME : addEntity
COMMENT : /** 
 * <p> Add an entity to this entity. </p>
 * @param name name of the entity
 * @param value vale of the entity
 */



PACKAGE : package org.apache.commons.lang;

NAME : entityName
COMMENT : /** 
 * <p> Returns the name of the entity identified by the specified value. </p>
 * @param value the value to locate
 * @return entity name associated with the specified value
 */



PACKAGE : package org.apache.commons.lang;

NAME : entityValue
COMMENT : /** 
 * <p> Returns the value of the entity identified by the specified name. </p>
 * @param name the name to locate
 * @return entity value associated with the specified name
 */



PACKAGE : package org.apache.commons.lang;

NAME : escape
COMMENT : /** 
 * <p> Escapes the characters in a <code>String</code>. </p> <p> For example, if you have called addEntity(&quot;foo&quot;, 0xA1), escape(&quot;\u00A1&quot;) will return &quot;&amp;foo;&quot; </p>
 * @param str The <code>String</code> to escape.
 * @return A new escaped <code>String</code>.
 */



PACKAGE : package org.apache.commons.lang;

NAME : escape
COMMENT : /** 
 * <p> Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code> passed. </p>
 * @param writer The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
 * @param str The <code>String</code> to escape. Assumed to be a non-null value.
 * @throws IOException when <code>Writer</code> passed throws the exception from calls to the  {@link Writer#write(int)}methods.
 * @see #escape(String)
 * @see Writer
 */



PACKAGE : package org.apache.commons.lang;

NAME : unescape
COMMENT : /** 
 * <p> Unescapes the entities in a <code>String</code>. </p> <p> For example, if you have called addEntity(&quot;foo&quot;, 0xA1), unescape(&quot;&amp;foo;&quot;) will return &quot;\u00A1&quot; </p>
 * @param str The <code>String</code> to escape.
 * @return A new escaped <code>String</code>.
 */



PACKAGE : package org.apache.commons.lang;

NAME : createStringWriter
COMMENT : /** 
 * Make the StringWriter 10% larger than the source String to avoid growing the writer
 * @param str The source string
 * @return A newly created StringWriter
 */



PACKAGE : package org.apache.commons.lang;

NAME : unescape
COMMENT : /** 
 * <p> Unescapes the escaped entities in the <code>String</code> passed and writes the result to the <code>Writer</code> passed. </p>
 * @param writer The <code>Writer</code> to write the results to; assumed to be non-null.
 * @param str The source <code>String</code> to unescape; assumed to be non-null.
 * @throws IOException when <code>Writer</code> passed throws the exception from calls to the  {@link Writer#write(int)}methods.
 * @see #escape(String)
 * @see Writer
 */



PACKAGE : package org.apache.commons.lang;

NAME : doUnescape
COMMENT : /** 
 * Underlying unescape method that allows the optimisation of not starting from the 0 index again.
 * @param writer The <code>Writer</code> to write the results to; assumed to be non-null.
 * @param str The source <code>String</code> to unescape; assumed to be non-null.
 * @param firstAmp The <code>int</code> index of the first ampersand in the source String.
 * @throws IOException when <code>Writer</code> passed throws the exception from calls to the  {@link Writer#write(int)}methods.
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p> Add an entry to this entity map. </p>
 * @param name the entity name
 * @param value the entity value
 */



PACKAGE : package org.apache.commons.lang;

NAME : name
COMMENT : /** 
 * <p> Returns the name of the entity identified by the specified value. </p>
 * @param value the value to locate
 * @return entity name associated with the specified value
 */



PACKAGE : package org.apache.commons.lang;

NAME : value
COMMENT : /** 
 * <p> Returns the value of the entity identified by the specified name. </p>
 * @param name the name to locate
 * @return entity value associated with the specified name
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : name
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : value
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : name
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : value
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : HashEntityMap
COMMENT : /** 
 * Constructs a new instance of <code>HashEntityMap</code>.
 */



PACKAGE : package org.apache.commons.lang;

NAME : TreeEntityMap
COMMENT : /** 
 * Constructs a new instance of <code>TreeEntityMap</code>.
 */



PACKAGE : package org.apache.commons.lang;

NAME : name
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : lookupTable
COMMENT : /** 
 * <p> Returns the lookup table for this entity map. The lookup table is created if it has not been previously. </p>
 * @return the lookup table
 */



PACKAGE : package org.apache.commons.lang;

NAME : createLookupTable
COMMENT : /** 
 * <p> Creates an entity lookup table of LOOKUP_TABLE_SIZE elements, initialized with entity names. </p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : ArrayEntityMap
COMMENT : /** 
 * Constructs a new instance of <code>ArrayEntityMap</code>.
 */



PACKAGE : package org.apache.commons.lang;

NAME : ArrayEntityMap
COMMENT : /** 
 * Constructs a new instance of <code>ArrayEntityMap</code> specifying the size by which the array should grow.
 * @param growBy array will be initialized to and will grow by this amount
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : ensureCapacity
COMMENT : /** 
 * Verifies the capacity of the entity array, adjusting the size if necessary.
 * @param capacity size the array should be
 */



PACKAGE : package org.apache.commons.lang;

NAME : name
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : value
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : BinaryEntityMap
COMMENT : /** 
 * Constructs a new instance of <code>BinaryEntityMap</code>.
 */



PACKAGE : package org.apache.commons.lang;

NAME : BinaryEntityMap
COMMENT : /** 
 * Constructs a new instance of <code>ArrayEntityMap</code> specifying the size by which the underlying array should grow.
 * @param growBy array will be initialized to and will grow by this amount
 */



PACKAGE : package org.apache.commons.lang;

NAME : binarySearch
COMMENT : /** 
 * Performs a binary search of the entity array for the specified key. This method is based on code in {@link java.util.Arrays}.
 * @param key the key to be found
 * @return the index of the entity array matching the specified key
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : name
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableShort
COMMENT : /** 
 * Constructs a new MutableShort with the default value of zero.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableShort
COMMENT : /** 
 * Constructs a new MutableShort with the specified value.
 * @param value a value.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableShort
COMMENT : /** 
 * Constructs a new MutableShort with the specified value.
 * @param value a value.
 * @throws NullPointerException if the object is null
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : getValue
COMMENT : /** 
 * Gets the value as a Short instance.
 * @return the value as a Short
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value.
 * @param value the value to set
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value from any Number instance.
 * @param value the value to set
 * @throws NullPointerException if the object is null
 * @throws ClassCastException if the type is not a  {@link Number}
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : increment
COMMENT : /** 
 * Increments the value.
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : decrement
COMMENT : /** 
 * Decrements the value.
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : add
COMMENT : /** 
 * Adds a value.
 * @param operand the value to add
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : add
COMMENT : /** 
 * Adds a value.
 * @param operand the value to add
 * @throws NullPointerException if the object is null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : subtract
COMMENT : /** 
 * Subtracts a value.
 * @param operand the value to add
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : subtract
COMMENT : /** 
 * Subtracts a value.
 * @param operand the value to add
 * @throws NullPointerException if the object is null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : shortValue
COMMENT : /** 
 * Returns the value of this MutableShort as a short.
 * @return the numeric value represented by this object after conversion to type short.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : intValue
COMMENT : /** 
 * Returns the value of this MutableShort as a int.
 * @return the numeric value represented by this object after conversion to type int.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : longValue
COMMENT : /** 
 * Returns the value of this MutableShort as a long.
 * @return the numeric value represented by this object after conversion to type long.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : floatValue
COMMENT : /** 
 * Returns the value of this MutableShort as a float.
 * @return the numeric value represented by this object after conversion to type float.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : doubleValue
COMMENT : /** 
 * Returns the value of this MutableShort as a double.
 * @return the numeric value represented by this object after conversion to type double.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toShort
COMMENT : /** 
 * Gets this mutable as an instance of Short.
 * @return a Short instance containing the value from this mutable
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : equals
COMMENT : /** 
 * Compares this object against the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>MutableShort</code> object that contains the same <code>short</code> value as this object.
 * @param obj the object to compare with.
 * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : hashCode
COMMENT : /** 
 * Returns a suitable hashcode for this mutable.
 * @return a suitable hashcode
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : compareTo
COMMENT : /** 
 * Compares this mutable to another in ascending order.
 * @param obj the mutable to compare to
 * @return negative if this is less, zero if equal, positive if greater
 * @throws ClassCastException if the argument is not a MutableShort
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toString
COMMENT : /** 
 * Returns the String value of this mutable.
 * @return the mutable value as a string
 */



PACKAGE : null
NAME : Broken1OperationEnum
COMMENT : null


PACKAGE : null
NAME : getEnumClass
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : null
NAME : PlusOperation
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : MinusOperation
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBlank
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testAppendSuper
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testPerson
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableDelegateTestCase
COMMENT : /** 
 * Construct a new instance of NestableDelegateTestCase with the specified name
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : setUp
COMMENT : /** 
 * Set up instance variables required by this test case.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : tearDown
COMMENT : /** 
 * Tear down instance variables required by this test case.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : testNestableDelegateConstructor
COMMENT : /** 
 * Test the implementation
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : testNestableDelegateGetMessage
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testNestableDelegateGetThrowableCount
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : doNestableDelegateGetThrowableCount
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testNestableDelegateGetMessages
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : doNestableDelegateGetMessages
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetMessageString
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testNestableDelegateGetMessageN
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testNestableDelegateGetThrowableN
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : doNestableDelegateGetThrowableN
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testNestableDelegateGetThrowables
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : doNestableDelegateGetThrowables
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testIndexOfThrowable
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : doNestableDelegateIndexOfThrowable
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testNestableDelegetePrintStackTrace
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : checkStackTrace
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : countLines
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableDelegateTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableDelegateTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableDelegateTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableDelegateTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowables
COMMENT : /** 
 * @see Nestable#getThrowables() Returns zero-length <code>Throwable</code> array for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessages
COMMENT : /** 
 * @see Nestable#getMessages() Returns zero-length String array for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * @see Nestable#indexOfThrowable(Class) Returns -1 for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * @see Nestable#getThrowable(int) Returns <code>null</code> for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableCount
COMMENT : /** 
 * @see Nestable#getThrowableCount() Returns 1 for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCause
COMMENT : /** 
 * @see Nestable#getCause()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printPartialStackTrace
COMMENT : /** 
 * Empty method to satisfy the implemented interface. Does nothing in this test.
 * @param out The writer to use.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * @see Nestable#getMessage(int)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * @see Nestable#indexOfThrowable(Class,int) Returns -1 for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableDelegateTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableDelegateTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableDelegateTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableDelegateTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowables
COMMENT : /** 
 * @see Nestable#getThrowables() Returns zero-length <code>Throwable</code> array for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessages
COMMENT : /** 
 * @see Nestable#getMessages() Returns zero-length String array for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * @see Nestable#indexOfThrowable(Class) Returns -1 for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * @see Nestable#getThrowable(int) Returns <code>null</code> for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableCount
COMMENT : /** 
 * @see Nestable#getThrowableCount() Returns 1 for this test.
 * @return 1
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCause
COMMENT : /** 
 * @see Nestable#getCause()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printPartialStackTrace
COMMENT : /** 
 * Empty method to satisfy the implemented interface. Does nothing in this test.
 * @param out The writer to use.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * @see Nestable#getMessage(int)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * @see Nestable#indexOfThrowable(Class,int)     Returns -1 for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableCount
COMMENT : /** 
 * @see Nestable#getThrowableCount() Returns 1 for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * @see Nestable#getMessage() Returns the hard-coded string "ThrowableNestable exception" for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * @see Nestable#getMessage(int) Returns the hard-coded string "ThrowableNestable exception" for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessages
COMMENT : /** 
 * @see Nestable#getMessages() Returns single-element string array with "ThrowableNestable exception".
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCause
COMMENT : /** 
 * @see Nestable#getCause()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * @see Nestable#printStackTrace(PrintWriter) Empty method to satisfy the implemented interface. Does nothing in this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printPartialStackTrace
COMMENT : /** 
 * @see Nestable#printPartialStackTrace(PrintWriter) Empty method to satisfy the implemented interface. Does nothing in this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * @see Nestable#getThrowable(int)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowables
COMMENT : /** 
 * @see Nestable#getThrowables()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * @see Nestable#indexOfThrowable(Class)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * @see Nestable#indexOfThrowable(Class,int)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : ThrowableNestedNestable
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableCount
COMMENT : /** 
 * @see Nestable#getThrowableCount() Returns 1 for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * @see Nestable#getMessage() For this test, returns "ThrowableNestable exception (" appended to the message of the cause specified in the constructor.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * @see Nestable#getMessage(int) For this test, returns "ThrowableNestable exception (" appended to the message of the cause specified in the constructor.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessages
COMMENT : /** 
 * @see Nestable#getMessages() For this test, returns a single-element string array containing "ThrowableNestable exception (" appended to the message of the cause specified in the constructor.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCause
COMMENT : /** 
 * @see Nestable#getCause()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * @see Nestable#printStackTrace(PrintWriter) For this test, writes the string "ThrowableNestedNestable stack trace place-holder" to the print writer.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printPartialStackTrace
COMMENT : /** 
 * @see Nestable#printPartialStackTrace(PrintWriter) For this test, writes the string "ThrowableNestedNestable partial stack trace place-holder" to the print writer.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * @see Nestable#getThrowable(int)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowables
COMMENT : /** 
 * @see Nestable#getThrowables()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * @see Nestable#indexOfThrowable(Class)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * @see Nestable#indexOfThrowable(Class,int)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableCount
COMMENT : /** 
 * @see Nestable#getThrowableCount() Returns 1 for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * @see Nestable#getMessage() Returns the string "non-throwable" for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * @see Nestable#getMessage(int) Returns the string "non-throwable" for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessages
COMMENT : /** 
 * @see Nestable#getMessage() Returns a single-element array containing the string "non-throwable" for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCause
COMMENT : /** 
 * @see Nestable#getCause() Returns <code>null</code> for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * @see Nestable#printStackTrace(PrintWriter) Empty method to satisfy the implemented interface. Does nothing in this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * @see Nestable#printStackTrace(PrintStream) Empty method to satisfy the implemented interface. Does nothing in this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printPartialStackTrace
COMMENT : /** 
 * @see Nestable#printPartialStackTrace(PrintWriter) Empty method to satisfy the implemented interface. Does nothing in this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * @see Nestable#getThrowable(int) Returns <code>null</code> for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowables
COMMENT : /** 
 * @see Nestable#getThrowables() Returns zero-length <code>Throwable</code> array.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * @see Nestable#indexOfThrowable(Class) Returns -1 for this test.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * @see Nestable#indexOfThrowable(Class,int) Returns -1 for this test.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableShortTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testConstructors
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testGetSet
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testCompareTo
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testPrimitiveValues
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToShort
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testIncrement
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testDecrement
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testAddValuePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testAddValueObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testSubtractValuePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testSubtractValueObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : SimpleToStringStyleTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBlank
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testAppendSuper
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testPerson
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : BooleanUtils
COMMENT : /** 
 * <p><code>BooleanUtils</code> instances should NOT be constructed in standard programming. Instead, the class should be used as <code>BooleanUtils.toBooleanObject(true);</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : negate
COMMENT : /** 
 * <p>Negates the specified boolean.</p> <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p> <pre> BooleanUtils.negate(Boolean.TRUE)  = Boolean.FALSE; BooleanUtils.negate(Boolean.FALSE) = Boolean.TRUE; BooleanUtils.negate(null)          = null; </pre>
 * @param bool  the Boolean to negate, may be null
 * @return the negated Boolean, or <code>null</code> if <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : isTrue
COMMENT : /** 
 * <p>Checks if a <code>Boolean</code> value is <code>true</code>, handling <code>null</code> by returning <code>false</code>.</p> <pre> BooleanUtils.isTrue(Boolean.TRUE)  = true BooleanUtils.isTrue(Boolean.FALSE) = false BooleanUtils.isTrue(null)          = false </pre>
 * @param bool  the boolean to check, null returns <code>false</code>
 * @return <code>true</code> only if the input is non-null and true
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isNotTrue
COMMENT : /** 
 * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>, handling <code>null</code> by returning <code>true</code>.</p> <pre> BooleanUtils.isNotTrue(Boolean.TRUE)  = false BooleanUtils.isNotTrue(Boolean.FALSE) = true BooleanUtils.isNotTrue(null)          = true </pre>
 * @param bool  the boolean to check, null returns <code>true</code>
 * @return <code>true</code> if the input is null or false
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang;

NAME : isFalse
COMMENT : /** 
 * <p>Checks if a <code>Boolean</code> value is <code>false</code>, handling <code>null</code> by returning <code>false</code>.</p> <pre> BooleanUtils.isFalse(Boolean.TRUE)  = false BooleanUtils.isFalse(Boolean.FALSE) = true BooleanUtils.isFalse(null)          = false </pre>
 * @param bool  the boolean to check, null returns <code>false</code>
 * @return <code>true</code> only if the input is non-null and false
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isNotFalse
COMMENT : /** 
 * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>false</code>, handling <code>null</code> by returning <code>true</code>.</p> <pre> BooleanUtils.isNotFalse(Boolean.TRUE)  = true BooleanUtils.isNotFalse(Boolean.FALSE) = false BooleanUtils.isNotFalse(null)          = true </pre>
 * @param bool  the boolean to check, null returns <code>true</code>
 * @return <code>true</code> if the input is null or true
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBooleanObject
COMMENT : /** 
 * <p>Boolean factory that avoids creating new Boolean objecs all the time.</p> <p>This method was added to JDK1.4 but is available here for earlier JDKs.</p> <pre> BooleanUtils.toBooleanObject(false) = Boolean.FALSE BooleanUtils.toBooleanObject(true)  = Boolean.TRUE </pre>
 * @param bool  the boolean to convert
 * @return Boolean.TRUE or Boolean.FALSE as appropriate
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBoolean
COMMENT : /** 
 * <p>Converts a Boolean to a boolean handling <code>null</code> by returning <code>false</code>.</p> <pre> BooleanUtils.toBoolean(Boolean.TRUE)  = true BooleanUtils.toBoolean(Boolean.FALSE) = false BooleanUtils.toBoolean(null)          = false </pre>
 * @param bool  the boolean to convert
 * @return <code>true</code> or <code>false</code>, <code>null</code> returns <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBooleanDefaultIfNull
COMMENT : /** 
 * <p>Converts a Boolean to a boolean handling <code>null</code>.</p> <pre> BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false) = true BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true) = false BooleanUtils.toBooleanDefaultIfNull(null, true)          = true </pre>
 * @param bool  the boolean to convert
 * @param valueIfNull  the boolean value to return if <code>null</code>
 * @return <code>true</code> or <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBoolean
COMMENT : /** 
 * <p>Converts an int to a boolean using the convention that <code>zero</code> is <code>false</code>.</p> <pre> BooleanUtils.toBoolean(0) = false BooleanUtils.toBoolean(1) = true BooleanUtils.toBoolean(2) = true </pre>
 * @param value  the int to convert
 * @return <code>true</code> if non-zero, <code>false</code>if zero
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBooleanObject
COMMENT : /** 
 * <p>Converts an int to a Boolean using the convention that <code>zero</code> is <code>false</code>.</p> <pre> BooleanUtils.toBoolean(0) = Boolean.FALSE BooleanUtils.toBoolean(1) = Boolean.TRUE BooleanUtils.toBoolean(2) = Boolean.TRUE </pre>
 * @param value  the int to convert
 * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,<code>null</code> if <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBooleanObject
COMMENT : /** 
 * <p>Converts an Integer to a Boolean using the convention that <code>zero</code> is <code>false</code>.</p> <p><code>null</code> will be converted to <code>null</code>.</p> <pre> BooleanUtils.toBoolean(new Integer(0))    = Boolean.FALSE BooleanUtils.toBoolean(new Integer(1))    = Boolean.TRUE BooleanUtils.toBoolean(new Integer(null)) = null </pre>
 * @param value  the Integer to convert
 * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,<code>null</code> if <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBoolean
COMMENT : /** 
 * <p>Converts an int to a boolean specifying the conversion values.</p> <pre> BooleanUtils.toBoolean(0, 1, 0) = false BooleanUtils.toBoolean(1, 1, 0) = true BooleanUtils.toBoolean(2, 1, 2) = false BooleanUtils.toBoolean(2, 2, 0) = true </pre>
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>
 * @param falseValue  the value to match for <code>false</code>
 * @return <code>true</code> or <code>false</code>
 * @throws IllegalArgumentException if no match
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBoolean
COMMENT : /** 
 * <p>Converts an Integer to a boolean specifying the conversion values.</p> <pre> BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true BooleanUtils.toBoolean(null, null, new Integer(0))                     = true </pre>
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,may be <code>null</code>
 * @return <code>true</code> or <code>false</code>
 * @throws IllegalArgumentException if no match
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBooleanObject
COMMENT : /** 
 * <p>Converts an int to a Boolean specifying the conversion values.</p> <pre> BooleanUtils.toBooleanObject(0, 0, 2, 3) = Boolean.TRUE BooleanUtils.toBooleanObject(2, 1, 2, 3) = Boolean.FALSE BooleanUtils.toBooleanObject(3, 1, 2, 3) = null </pre>
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>
 * @param falseValue  the value to match for <code>false</code>
 * @param nullValue  the value to to match for <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBooleanObject
COMMENT : /** 
 * <p>Converts an Integer to a Boolean specifying the conversion values.</p> <pre> BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null </pre>
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,may be <code>null</code>
 * @param nullValue  the value to to match for <code>null</code>,may be <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */



PACKAGE : package org.apache.commons.lang;

NAME : toInteger
COMMENT : /** 
 * <p>Converts a boolean to an int using the convention that <code>zero</code> is <code>false</code>.</p> <pre> BooleanUtils.toInteger(true)  = 1 BooleanUtils.toInteger(false) = 0 </pre>
 * @param bool  the boolean to convert
 * @return one if <code>true</code>, zero if <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toIntegerObject
COMMENT : /** 
 * <p>Converts a boolean to an Integer using the convention that <code>zero</code> is <code>false</code>.</p> <pre> BooleanUtils.toIntegerObject(true)  = new Integer(1) BooleanUtils.toIntegerObject(false) = new Integer(0) </pre>
 * @param bool  the boolean to convert
 * @return one if <code>true</code>, zero if <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toIntegerObject
COMMENT : /** 
 * <p>Converts a Boolean to a Integer using the convention that <code>zero</code> is <code>false</code>.</p> <p><code>null</code> will be converted to <code>null</code>.</p> <pre> BooleanUtils.toIntegerObject(Boolean.TRUE)  = new Integer(1) BooleanUtils.toIntegerObject(Boolean.FALSE) = new Integer(0) </pre>
 * @param bool  the Boolean to convert
 * @return one if Boolean.TRUE, zero if Boolean.FALSE, <code>null</code> if <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toInteger
COMMENT : /** 
 * <p>Converts a boolean to an int specifying the conversion values.</p> <pre> BooleanUtils.toInteger(true, 1, 0)  = 1 BooleanUtils.toInteger(false, 1, 0) = 0 </pre>
 * @param bool  the to convert
 * @param trueValue  the value to return if <code>true</code>
 * @param falseValue  the value to return if <code>false</code>
 * @return the appropriate value
 */



PACKAGE : package org.apache.commons.lang;

NAME : toInteger
COMMENT : /** 
 * <p>Converts a Boolean to an int specifying the conversion values.</p> <pre> BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1 BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0 BooleanUtils.toInteger(null, 1, 0, 2)          = 2 </pre>
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if <code>true</code>
 * @param falseValue  the value to return if <code>false</code>
 * @param nullValue  the value to return if <code>null</code>
 * @return the appropriate value
 */



PACKAGE : package org.apache.commons.lang;

NAME : toIntegerObject
COMMENT : /** 
 * <p>Converts a boolean to an Integer specifying the conversion values.</p> <pre> BooleanUtils.toIntegerObject(true, new Integer(1), new Integer(0))  = new Integer(1) BooleanUtils.toIntegerObject(false, new Integer(1), new Integer(0)) = new Integer(0) </pre>
 * @param bool  the to convert
 * @param trueValue  the value to return if <code>true</code>,may be <code>null</code>
 * @param falseValue  the value to return if <code>false</code>,may be <code>null</code>
 * @return the appropriate value
 */



PACKAGE : package org.apache.commons.lang;

NAME : toIntegerObject
COMMENT : /** 
 * <p>Converts a Boolean to an Integer specifying the conversion values.</p> <pre> BooleanUtils.toIntegerObject(Boolean.TRUE, new Integer(1), new Integer(0), new Integer(2))  = new Integer(1) BooleanUtils.toIntegerObject(Boolean.FALSE, new Integer(1), new Integer(0), new Integer(2)) = new Integer(0) BooleanUtils.toIntegerObject(null, new Integer(1), new Integer(0), new Integer(2))          = new Integer(2) </pre>
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if <code>true</code>,may be <code>null</code>
 * @param falseValue  the value to return if <code>false</code>,may be <code>null</code>
 * @param nullValue  the value to return if <code>null</code>,may be <code>null</code>
 * @return the appropriate value
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBooleanObject
COMMENT : /** 
 * <p>Converts a String to a Boolean.</p> <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code> (case insensitive) will return <code>true</code>. <code>'false'</code>, <code>'off'</code> or <code>'no'</code> (case insensitive) will return <code>false</code>. Otherwise, <code>null</code> is returned.</p> <pre> BooleanUtils.toBooleanObject(null)    = null BooleanUtils.toBooleanObject("true")  = Boolean.TRUE BooleanUtils.toBooleanObject("false") = Boolean.FALSE BooleanUtils.toBooleanObject("on")    = Boolean.TRUE BooleanUtils.toBooleanObject("ON")    = Boolean.TRUE BooleanUtils.toBooleanObject("off")   = Boolean.FALSE BooleanUtils.toBooleanObject("oFf")   = Boolean.FALSE BooleanUtils.toBooleanObject("blue")  = null </pre>
 * @param str  the String to check
 * @return the Boolean value of the string,<code>null</code> if no match or <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBooleanObject
COMMENT : /** 
 * <p>Converts a String to a Boolean throwing an exception if no match.</p> <pre> BooleanUtils.toBooleanObject("true", "true", "false", "null")  = Boolean.TRUE BooleanUtils.toBooleanObject("false", "true", "false", "null") = Boolean.FALSE BooleanUtils.toBooleanObject("null", "true", "false", "null")  = null </pre>
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>(case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>(case sensitive), may be <code>null</code>
 * @param nullString  the String to match for <code>null</code>(case sensitive), may be <code>null</code>
 * @return the Boolean value of the string,<code>null</code> if either the String matches <code>nullString</code> or if <code>null</code> input and <code>nullString</code> is <code>null</code>
 * @throws IllegalArgumentException if the String doesn't match
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBoolean
COMMENT : /** 
 * <p>Converts a String to a boolean (optimised for performance).</p> <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code> (case insensitive) will return <code>true</code>. Otherwise, <code>false</code> is returned.</p> <p>This method performs 4 times faster (JDK1.4) than <code>Boolean.valueOf(String)</code>. However, this method accepts 'on' and 'yes' as true values. <pre> BooleanUtils.toBoolean(null)    = false BooleanUtils.toBoolean("true")  = true BooleanUtils.toBoolean("TRUE")  = true BooleanUtils.toBoolean("tRUe")  = true BooleanUtils.toBoolean("on")    = true BooleanUtils.toBoolean("yes")   = true BooleanUtils.toBoolean("false") = false BooleanUtils.toBoolean("x gti") = false </pre>
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */



PACKAGE : package org.apache.commons.lang;

NAME : toBoolean
COMMENT : /** 
 * <p>Converts a String to a Boolean throwing an exception if no match found.</p> <p>null is returned if there is no match.</p> <pre> BooleanUtils.toBoolean("true", "true", "false")  = true BooleanUtils.toBoolean("false", "true", "false") = false </pre>
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>(case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>(case sensitive), may be <code>null</code>
 * @return the boolean value of the string
 * @throws IllegalArgumentException if the String doesn't match
 */



PACKAGE : package org.apache.commons.lang;

NAME : toStringTrueFalse
COMMENT : /** 
 * <p>Converts a Boolean to a String returning <code>'true'</code>, <code>'false'</code>, or <code>null</code>.</p> <pre> BooleanUtils.toStringTrueFalse(Boolean.TRUE)  = "true" BooleanUtils.toStringTrueFalse(Boolean.FALSE) = "false" BooleanUtils.toStringTrueFalse(null)          = null; </pre>
 * @param bool  the Boolean to check
 * @return <code>'true'</code>, <code>'false'</code>,or <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toStringOnOff
COMMENT : /** 
 * <p>Converts a Boolean to a String returning <code>'on'</code>, <code>'off'</code>, or <code>null</code>.</p> <pre> BooleanUtils.toStringOnOff(Boolean.TRUE)  = "on" BooleanUtils.toStringOnOff(Boolean.FALSE) = "off" BooleanUtils.toStringOnOff(null)          = null; </pre>
 * @param bool  the Boolean to check
 * @return <code>'on'</code>, <code>'off'</code>,or <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toStringYesNo
COMMENT : /** 
 * <p>Converts a Boolean to a String returning <code>'yes'</code>, <code>'no'</code>, or <code>null</code>.</p> <pre> BooleanUtils.toStringYesNo(Boolean.TRUE)  = "yes" BooleanUtils.toStringYesNo(Boolean.FALSE) = "no" BooleanUtils.toStringYesNo(null)          = null; </pre>
 * @param bool  the Boolean to check
 * @return <code>'yes'</code>, <code>'no'</code>,or <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toString
COMMENT : /** 
 * <p>Converts a Boolean to a String returning one of the input Strings.</p> <pre> BooleanUtils.toString(Boolean.TRUE, "true", "false", null)   = "true" BooleanUtils.toString(Boolean.FALSE, "true", "false", null)  = "false" BooleanUtils.toString(null, "true", "false", null)           = null; </pre>
 * @param bool  the Boolean to check
 * @param trueString  the String to return if <code>true</code>,may be <code>null</code>
 * @param falseString  the String to return if <code>false</code>,may be <code>null</code>
 * @param nullString  the String to return if <code>null</code>,may be <code>null</code>
 * @return one of the three input Strings
 */



PACKAGE : package org.apache.commons.lang;

NAME : toStringTrueFalse
COMMENT : /** 
 * <p>Converts a boolean to a String returning <code>'true'</code> or <code>'false'</code>.</p> <pre> BooleanUtils.toStringTrueFalse(true)   = "true" BooleanUtils.toStringTrueFalse(false)  = "false" </pre>
 * @param bool  the Boolean to check
 * @return <code>'true'</code>, <code>'false'</code>,or <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toStringOnOff
COMMENT : /** 
 * <p>Converts a boolean to a String returning <code>'on'</code> or <code>'off'</code>.</p> <pre> BooleanUtils.toStringOnOff(true)   = "on" BooleanUtils.toStringOnOff(false)  = "off" </pre>
 * @param bool  the Boolean to check
 * @return <code>'on'</code>, <code>'off'</code>,or <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toStringYesNo
COMMENT : /** 
 * <p>Converts a boolean to a String returning <code>'yes'</code> or <code>'no'</code>.</p> <pre> BooleanUtils.toStringYesNo(true)   = "yes" BooleanUtils.toStringYesNo(false)  = "no" </pre>
 * @param bool  the Boolean to check
 * @return <code>'yes'</code>, <code>'no'</code>,or <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : toString
COMMENT : /** 
 * <p>Converts a boolean to a String returning one of the input Strings.</p> <pre> BooleanUtils.toString(true, "true", "false")   = "true" BooleanUtils.toString(false, "true", "false")  = "false" </pre>
 * @param bool  the Boolean to check
 * @param trueString  the String to return if <code>true</code>,may be <code>null</code>
 * @param falseString  the String to return if <code>false</code>,may be <code>null</code>
 * @return one of the two input Strings
 */



PACKAGE : package org.apache.commons.lang;

NAME : xor
COMMENT : /** 
 * <p>Performs an xor on a set of booleans.</p> <pre> BooleanUtils.xor(new boolean[] { true, true })   = false BooleanUtils.xor(new boolean[] { false, false }) = false BooleanUtils.xor(new boolean[] { true, false })  = true </pre>
 * @param array  an array of <code>boolean<code>s
 * @return <code>true</code> if the xor is successful.
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty.
 */



PACKAGE : package org.apache.commons.lang;

NAME : xor
COMMENT : /** 
 * <p>Performs an xor on an array of Booleans.</p> <pre> BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE </pre>
 * @param array  an array of <code>Boolean<code>s
 * @return <code>true</code> if the xor is successful.
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty.
 * @throws IllegalArgumentException if <code>array</code> contains a <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : JVMRandom
COMMENT : /** 
 * Constructs a new instance.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : setSeed
COMMENT : /** 
 * Unsupported in 2.0.
 * @param seed ignored
 * @throws UnsupportedOperationException
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextGaussian
COMMENT : /** 
 * Unsupported in 2.0.
 * @return Nothing, this method always throws an UnsupportedOperationException.
 * @throws UnsupportedOperationException
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextBytes
COMMENT : /** 
 * Unsupported in 2.0.
 * @param byteArray ignored
 * @throws UnsupportedOperationException
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextInt
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed int value from the Math.random() sequence.</p>
 * @return the random int
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextInt
COMMENT : /** 
 * <p>Returns a pseudorandom, uniformly distributed int value between <code>0</code> (inclusive) and the specified value (exclusive), from the Math.random() sequence.</p>
 * @param n  the specified exclusive max-value
 * @return the random int
 * @throws IllegalArgumentException when <code>n &lt;= 0</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextLong
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed long value from the Math.random() sequence.</p>
 * @return the random long
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextLong
COMMENT : /** 
 * <p>Returns a pseudorandom, uniformly distributed long value between <code>0</code> (inclusive) and the specified value (exclusive), from the Math.random() sequence.</p>
 * @param n  the specified exclusive max-value
 * @return the random long
 * @throws IllegalArgumentException when <code>n &lt;= 0</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextBoolean
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed boolean value from the Math.random() sequence.</p>
 * @return the random boolean
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextFloat
COMMENT : /** 
 * <p>Returns the next pseudorandom, uniformly distributed float value between <code>0.0</code> and <code>1.0</code> from the Math.random() sequence.</p>
 * @return the random float
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : nextDouble
COMMENT : /** 
 * <p>Synonymous to the Math.random() call.</p>
 * @return the random double
 */



PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : NotImplementedExceptionTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_String1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_String2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_Throwable1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_Throwable2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_StringThrowable1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_StringThrowable2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_Class1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_Class2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetMessage_Indexed
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetThrowable
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfThrowable
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfThrowable_Index
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testPrintStackTrace
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testPrintStackTrace_Stream
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testPrintStackTrace_Writer
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testPrintPartialStackTrace_Writer
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : NestBroken
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : ColorEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : NoFieldNamesToStringStyleTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBlank
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testAppendSuper
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testPerson
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : RandomStringUtils
COMMENT : /** 
 * <p><code>RandomStringUtils</code> instances should NOT be constructed in standard programming. Instead, the class should be used as <code>RandomStringUtils.random(5);</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : random
COMMENT : /** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of all characters.</p>
 * @param count  the length of random string to create
 * @return the random string
 */



PACKAGE : package org.apache.commons.lang;

NAME : randomAscii
COMMENT : /** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of characters whose ASCII value is between <code>32</code> and <code>126</code> (inclusive).</p>
 * @param count  the length of random string to create
 * @return the random string
 */



PACKAGE : package org.apache.commons.lang;

NAME : randomAlphabetic
COMMENT : /** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of alphabetic characters.</p>
 * @param count  the length of random string to create
 * @return the random string
 */



PACKAGE : package org.apache.commons.lang;

NAME : randomAlphanumeric
COMMENT : /** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of alpha-numeric characters.</p>
 * @param count  the length of random string to create
 * @return the random string
 */



PACKAGE : package org.apache.commons.lang;

NAME : randomNumeric
COMMENT : /** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of numeric characters.</p>
 * @param count  the length of random string to create
 * @return the random string
 */



PACKAGE : package org.apache.commons.lang;

NAME : random
COMMENT : /** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.</p>
 * @param count  the length of random string to create
 * @param letters  if <code>true</code>, generated string will includealphabetic characters
 * @param numbers  if <code>true</code>, generated string will includenumeric characters
 * @return the random string
 */



PACKAGE : package org.apache.commons.lang;

NAME : random
COMMENT : /** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.</p>
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  if <code>true</code>, generated string will includealphabetic characters
 * @param numbers  if <code>true</code>, generated string will includenumeric characters
 * @return the random string
 */



PACKAGE : package org.apache.commons.lang;

NAME : random
COMMENT : /** 
 * <p>Creates a random string based on a variety of options, using default source of randomness.</p> <p>This method has exactly the same semantics as {@link #random(int,int,int,boolean,boolean,char[],Random)}, but instead of using an externally supplied source of randomness, it uses the internal static  {@link Random} instance.</p>
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from.If <code>null</code>, then it will use the set of all chars.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not<code>(end - start) + 1</code> characters in the set array.
 */



PACKAGE : package org.apache.commons.lang;

NAME : random
COMMENT : /** 
 * <p>Creates a random string based on a variety of options, using supplied source of randomness.</p> <p>If start and end are both <code>0</code>, start and end are set to <code>' '</code> and <code>'z'</code>, the ASCII printable characters, will be used, unless letters and numbers are both <code>false</code>, in which case, start and end are set to <code>0</code> and <code>Integer.MAX_VALUE</code>. <p>If set is not <code>null</code>, characters between start and end are chosen.</p> <p>This method accepts a user-supplied  {@link Random}instance to use as a source of randomness. By seeding a single  {@link Random} instance with a fixed seed and using it for each call,the same random sequence of strings can be generated repeatedly and predictably.</p>
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from.If <code>null</code>, then it will use the set of all chars.
 * @param random  a source of randomness.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not<code>(end - start) + 1</code> characters in the set array.
 * @throws IllegalArgumentException if <code>count</code> &lt; 0.
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : random
COMMENT : /** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of characters specified.</p>
 * @param count  the length of random string to create
 * @param chars  the String containing the set of characters to use,may be null
 * @return the random string
 * @throws IllegalArgumentException if <code>count</code> &lt; 0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : random
COMMENT : /** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of characters specified.</p>
 * @param count  the length of random string to create
 * @param chars  the character array containing the set of characters to use,may be null
 * @return the random string
 * @throws IllegalArgumentException if <code>count</code> &lt; 0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : WordUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testWrap_StringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testWrap_StringIntStringBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCapitalize_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCapitalizeWithDelimiters_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCapitalizeFully_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCapitalizeFullyWithDelimiters_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUncapitalize_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUncapitalizeWithDelimiters_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testInitials_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testInitials_String_charArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSwapCase_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAbbreviate
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : SerializationException
COMMENT : /** 
 * <p>Constructs a new <code>SerializationException</code> without specified detail message.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : SerializationException
COMMENT : /** 
 * <p>Constructs a new <code>SerializationException</code> with specified detail message.</p>
 * @param msg  The error message.
 */



PACKAGE : package org.apache.commons.lang;

NAME : SerializationException
COMMENT : /** 
 * <p>Constructs a new <code>SerializationException</code> with specified nested <code>Throwable</code>.</p>
 * @param cause  The <code>Exception</code> or <code>Error</code>that caused this exception to be thrown.
 */



PACKAGE : package org.apache.commons.lang;

NAME : SerializationException
COMMENT : /** 
 * <p>Constructs a new <code>SerializationException</code> with specified detail message and nested <code>Throwable</code>.</p>
 * @param msg    The error message.
 * @param cause  The <code>Exception</code> or <code>Error</code>that caused this exception to be thrown.
 */



PACKAGE : package org.apache.commons.lang;

NAME : CharSetTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testClass
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetInstance
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetInstance_Stringarray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_String_simple
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_String_combo
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_String_comboNegated
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_String_oddDash
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_String_oddNegate
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_String_oddCombinations
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEquals_Object
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContains_Char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSerialization
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testStatics
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : commaMatcher
COMMENT : /** 
 * Returns a matcher which matches the comma character.
 * @return a matcher for a comma
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : tabMatcher
COMMENT : /** 
 * Returns a matcher which matches the tab character.
 * @return a matcher for a tab
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : spaceMatcher
COMMENT : /** 
 * Returns a matcher which matches the space character.
 * @return a matcher for a space
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : splitMatcher
COMMENT : /** 
 * Matches the same characters as StringTokenizer, namely space, tab, newline and formfeed.
 * @return the split matcher
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : trimMatcher
COMMENT : /** 
 * Matches the String trim() whitespace characters.
 * @return the trim matcher
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : singleQuoteMatcher
COMMENT : /** 
 * Returns a matcher which matches the single quote character.
 * @return a matcher for a single quote
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : doubleQuoteMatcher
COMMENT : /** 
 * Returns a matcher which matches the double quote character.
 * @return a matcher for a double quote
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : quoteMatcher
COMMENT : /** 
 * Returns a matcher which matches the single or double quote character.
 * @return a matcher for a single or double quote
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : noneMatcher
COMMENT : /** 
 * Matches no characters.
 * @return a matcher that matches nothing
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : charMatcher
COMMENT : /** 
 * Constructor that creates a matcher from a character.
 * @param ch  the character to match, must not be null
 * @return a new Matcher for the given char
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : charSetMatcher
COMMENT : /** 
 * Constructor that creates a matcher from a set of characters.
 * @param chars  the characters to match, null or empty matches nothing
 * @return a new matcher for the given char[]
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : charSetMatcher
COMMENT : /** 
 * Constructor that creates a matcher from a string representing a set of characters.
 * @param chars  the characters to match, null or empty matches nothing
 * @return a new Matcher for the given characters
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : stringMatcher
COMMENT : /** 
 * Constructor that creates a matcher from a string.
 * @param str  the string to match, null or empty matches nothing
 * @return a new Matcher for the given String
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrMatcher
COMMENT : /** 
 * Constructor.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : isMatch
COMMENT : /** 
 * Returns the number of matching characters, zero for no match. <p> This method is called to check for a match. The parameter <code>pos</code> represents the current position to be checked in the string <code>buffer</code> (a character array which must not be changed). The API guarantees that <code>pos</code> is a valid index for <code>buffer</code>. <p> The character array may be larger than the active area to be matched. Only values in the buffer between the specifed indices may be accessed. <p> The matching code may check one character or many. It may check characters preceeding <code>pos</code> as well as those after, so long as no checks exceed the bounds specified. <p> It must return zero for no match, or a positive number if a match was found. The number indicates the number of characters that matched.
 * @param buffer  the text content to match against, do not change
 * @param pos  the starting position for the match, valid for buffer
 * @param bufferStart  the first active index in the buffer, valid for buffer
 * @param bufferEnd  the end index (exclusive) of the active buffer, valid for buffer
 * @return the number of matching characters, zero for no match
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : isMatch
COMMENT : /** 
 * Returns the number of matching characters, zero for no match. <p> This method is called to check for a match. The parameter <code>pos</code> represents the current position to be checked in the string <code>buffer</code> (a character array which must not be changed). The API guarantees that <code>pos</code> is a valid index for <code>buffer</code>. <p> The matching code may check one character or many. It may check characters preceeding <code>pos</code> as well as those after. <p> It must return zero for no match, or a positive number if a match was found. The number indicates the number of characters that matched.
 * @param buffer  the text content to match against, do not change
 * @param pos  the starting position for the match, valid for buffer
 * @return the number of matching characters, zero for no match
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : CharSetMatcher
COMMENT : /** 
 * Constructor that creates a matcher from a character array.
 * @param chars  the characters to match, must not be null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : isMatch
COMMENT : /** 
 * Returns whether or not the given charatcer matches.
 * @param buffer  the text content to match against, do not change
 * @param pos  the starting position for the match, valid for buffer
 * @param bufferStart  the first active index in the buffer, valid for buffer
 * @param bufferEnd  the end index of the active buffer, valid for buffer
 * @return the number of matching characters, zero for no match
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : CharMatcher
COMMENT : /** 
 * Constructor that creates a matcher that matches a single character.
 * @param ch  the character to match
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : isMatch
COMMENT : /** 
 * Returns whether or not the given character matches.
 * @param buffer  the text content to match against, do not change
 * @param pos  the starting position for the match, valid for buffer
 * @param bufferStart  the first active index in the buffer, valid for buffer
 * @param bufferEnd  the end index of the active buffer, valid for buffer
 * @return the number of matching characters, zero for no match
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StringMatcher
COMMENT : /** 
 * Constructor that creates a matcher from a String.
 * @param str  the string to match, must not be null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : isMatch
COMMENT : /** 
 * Returns whether or not the given text matches the stored string.
 * @param buffer  the text content to match against, do not change
 * @param pos  the starting position for the match, valid for buffer
 * @param bufferStart  the first active index in the buffer, valid for buffer
 * @param bufferEnd  the end index of the active buffer, valid for buffer
 * @return the number of matching characters, zero for no match
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : NoMatcher
COMMENT : /** 
 * Constructs a new instance of <code>NoMatcher</code>.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : isMatch
COMMENT : /** 
 * Always returns <code>false</code>.
 * @param buffer  the text content to match against, do not change
 * @param pos  the starting position for the match, valid for buffer
 * @param bufferStart  the first active index in the buffer, valid for buffer
 * @param bufferEnd  the end index of the active buffer, valid for buffer
 * @return the number of matching characters, zero for no match
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : TrimMatcher
COMMENT : /** 
 * Constructs a new instance of <code>TrimMatcher</code>.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : isMatch
COMMENT : /** 
 * Returns whether or not the given charatcer matches.
 * @param buffer  the text content to match against, do not change
 * @param pos  the starting position for the match, valid for buffer
 * @param bufferStart  the first active index in the buffer, valid for buffer
 * @param bufferEnd  the end index of the active buffer, valid for buffer
 * @return the number of matching characters, zero for no match
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : Broken5OperationEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumClass
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : PlusOperation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : MinusOperation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : null
NAME : round
COMMENT : /** 
 * See the other round method.  Works with a Date object.
 */



PACKAGE : null
NAME : round
COMMENT : /** 
 * Round this date, leaving the field specified as the most significant field.  For example, if you had the datetime of 28 Mar 2002 13:45:01.231, if this was passed with HOUR, it would return 28 Mar 2002 14:00:00.000.  If this was passed with MONTH, it would return 1 April 2002 0:00:00.000.
 */



PACKAGE : null
NAME : round
COMMENT : /** 
 * See the other round method.  Works with an Object, trying to use it as either a Date or Calendar.
 */



PACKAGE : null
NAME : trunc
COMMENT : /** 
 * See the other trunc method.  Works with a Date.
 */



PACKAGE : null
NAME : trunc
COMMENT : /** 
 * Truncate this date, leaving the field specified as the most significant field.  For example, if you had the datetime of 28 Mar 2002 13:45:01.231, if you passed with HOUR, it would return 28 Mar 2002 13:00:00.000.  If this was passed with MONTH, it would return 1 Mar 2002 0:00:00.000.
 */



PACKAGE : null
NAME : trunc
COMMENT : /** 
 * See the other trunc method.  Works with an Object, trying to use it as either a Date or Calendar.
 */



PACKAGE : null
NAME : modify
COMMENT : null


PACKAGE : null
NAME : parse
COMMENT : /** 
 * Parses strings the way that CVS supports it... very human readable
 */



PACKAGE : null
NAME : parse
COMMENT : /** 
 * Parses strings the way that CVS supports it... very human readable
 */



PACKAGE : null
NAME : getCalendarIterator
COMMENT : /** 
 * This constructs an Iterator that will start and stop over a date range based on the focused date and the range style.  For instance, passing Thursday, July 4, 2002 and a RANGE_MONTH_SUNDAY will return an Iterator that starts with Sunday, June 30, 2002 and ends with Saturday, August 3, 2002.
 */



PACKAGE : null
NAME : getCalendarIterator
COMMENT : /** 
 * See the other getCalendarIterator.  Works with a Date.
 */



PACKAGE : null
NAME : getCalendarIterator
COMMENT : /** 
 * See the other getCalendarIterator.  Works with an Object, trying to use it as a Date or Calendar.
 */



PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : NullArgumentExceptionTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_nullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetMessage_nullConstructorInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetMessage_validConstructorInput
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : CompareToBuilderTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionCompare
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionCompareEx1
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionCompareEx2
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHierarchyCompare
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHierarchyCompareExcludeFields
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHierarchyCompareTransients
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : assertXYZCompareOrder
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHierarchyCompare
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : assertReflectionCompareContract
COMMENT : /** 
 * See "Effective Java" under "Consider Implementing Comparable".
 * @param x an object to compare 
 * @param y an object to compare
 * @param z an object to compare
 * @param testTransients Whether to include transients in the comparison
 * @param excludeFields fields to exclude
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionCompareSignum
COMMENT : /** 
 * Returns the signum of the result of comparing x and y with <code>CompareToBuilder.reflectionCompare</code>
 * @param lhs The "left-hand-side" of the comparison.
 * @param rhs The "right-hand-side" of the comparison.
 * @param testTransients Whether to include transients in the comparison
 * @param excludeFields fields to exclude
 * @return int The signum
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testAppendSuper
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectEx2
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectComparator
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectComparatorNull
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testShort
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testChar
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testByte
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testIntArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testShortArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testCharArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testByteArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testDoubleArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFloatArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBooleanArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiIntArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiShortArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiCharArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiByteArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiFloatArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiDoubleArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiBooleanArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testRaggedArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMixedArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testIntArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testShortArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testCharArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testByteArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testDoubleArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFloatArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBooleanArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : equals
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setA
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : getA
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : compareTo
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestSubObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestSubObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : equals
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestTransientSubObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : ColorEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : noneLookup
COMMENT : /** 
 * Returns a lookup which always returns null.
 * @return a lookup that always returns null, not null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : systemPropertiesLookup
COMMENT : /** 
 * Returns a lookup which uses  {@link System#getProperties() System properties}to lookup the key to value. <p> If a security manager blocked access to system properties, then null will be returned from every lookup. <p> If a null key is used, this lookup will throw a NullPointerException.
 * @return a lookup using system properties, not null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : mapLookup
COMMENT : /** 
 * Returns a lookup which looks up values using a map. <p> If the map is null, then null will be returned from every lookup. The map result object is converted to a string using toString().
 * @param map  the map of keys to values, may be null
 * @return a lookup using the map, not null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrLookup
COMMENT : /** 
 * Constructor.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : lookup
COMMENT : /** 
 * Looks up a String key to a String value. <p> The internal implementation may use any mechanism to return the value. The simplest implementation is to use a Map. However, virtually any implementation is possible. <p> For example, it would be possible to implement a lookup that used the key as a primary key, and looked up the value on demand from the database Or, a numeric based implementation could be created that treats the key as an integer, increments the value and return the result as a string - converting 1 to 2, 15 to 16 etc.
 * @param key  the key to be looked up, may be null
 * @return the matching value, null if no match
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : MapStrLookup
COMMENT : /** 
 * Creates a new instance backed by a Map.
 * @param map  the map of keys to values, may be null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : lookup
COMMENT : /** 
 * Looks up a String key to a String value using the map. <p> If the map is null, then null is returned. The map result object is converted to a string using toString().
 * @param key  the key to be looked up, may be null
 * @return the matching value, null if no match
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableByte
COMMENT : /** 
 * Constructs a new MutableByte with the default value of zero.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableByte
COMMENT : /** 
 * Constructs a new MutableByte with the specified value.
 * @param value a value.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableByte
COMMENT : /** 
 * Constructs a new MutableByte with the specified value.
 * @param value a value.
 * @throws NullPointerException if the object is null
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : getValue
COMMENT : /** 
 * Gets the value as a Byte instance.
 * @return the value as a Byte
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value.
 * @param value the value to set
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value from any Number instance.
 * @param value the value to set
 * @throws NullPointerException if the object is null
 * @throws ClassCastException if the type is not a  {@link Number}
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : byteValue
COMMENT : /** 
 * Returns the value of this MutableByte as a byte.
 * @return the numeric value represented by this object after conversion to type byte.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : intValue
COMMENT : /** 
 * Returns the value of this MutableByte as a int.
 * @return the numeric value represented by this object after conversion to type int.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : longValue
COMMENT : /** 
 * Returns the value of this MutableByte as a long.
 * @return the numeric value represented by this object after conversion to type long.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : floatValue
COMMENT : /** 
 * Returns the value of this MutableByte as a float.
 * @return the numeric value represented by this object after conversion to type float.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : doubleValue
COMMENT : /** 
 * Returns the value of this MutableByte as a double.
 * @return the numeric value represented by this object after conversion to type double.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toByte
COMMENT : /** 
 * Gets this mutable as an instance of Byte.
 * @return a Byte instance containing the value from this mutable
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : increment
COMMENT : /** 
 * Increments the value.
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : decrement
COMMENT : /** 
 * Decrements the value.
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : add
COMMENT : /** 
 * Adds a value.
 * @param operand the value to add
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : add
COMMENT : /** 
 * Adds a value.
 * @param operand the value to add
 * @throws NullPointerException if the object is null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : subtract
COMMENT : /** 
 * Subtracts a value.
 * @param operand the value to add
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : subtract
COMMENT : /** 
 * Subtracts a value.
 * @param operand the value to add
 * @throws NullPointerException if the object is null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : equals
COMMENT : /** 
 * Compares this object against the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>MutableByte</code> object that contains the same <code>byte</code> value as this object.
 * @param obj the object to compare with.
 * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : hashCode
COMMENT : /** 
 * Returns a suitable hashcode for this mutable.
 * @return a suitable hashcode
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : compareTo
COMMENT : /** 
 * Compares this mutable to another in ascending order.
 * @param obj the mutable to compare to
 * @return negative if this is less, zero if equal, positive if greater
 * @throws ClassCastException if the argument is not a MutableByte
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toString
COMMENT : /** 
 * Returns the String value of this mutable.
 * @return the mutable value as a string
 */



PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : BitFieldTest
COMMENT : /** 
 * Constructor BitFieldTest
 * @param name
 */



PACKAGE : package org.apache.commons.lang;

NAME : testGetValue
COMMENT : /** 
 * test the getValue() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testGetShortValue
COMMENT : /** 
 * test the getShortValue() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testGetRawValue
COMMENT : /** 
 * test the getRawValue() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testGetShortRawValue
COMMENT : /** 
 * test the getShortRawValue() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testIsSet
COMMENT : /** 
 * test the isSet() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testIsAllSet
COMMENT : /** 
 * test the isAllSet() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testSetValue
COMMENT : /** 
 * test the setValue() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testSetShortValue
COMMENT : /** 
 * test the setShortValue() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testByte
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testClear
COMMENT : /** 
 * test the clear() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testClearShort
COMMENT : /** 
 * test the clearShort() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testSet
COMMENT : /** 
 * test the set() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testSetShort
COMMENT : /** 
 * test the setShort() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testSetBoolean
COMMENT : /** 
 * test the setBoolean() method
 */



PACKAGE : package org.apache.commons.lang;

NAME : testSetShortBoolean
COMMENT : /** 
 * test the setShortBoolean() method
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableInt
COMMENT : /** 
 * Constructs a new MutableInt with the default value of zero.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableInt
COMMENT : /** 
 * Constructs a new MutableInt with the specified value.
 * @param value a value.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableInt
COMMENT : /** 
 * Constructs a new MutableInt with the specified value.
 * @param value a value.
 * @throws NullPointerException if the object is null
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : getValue
COMMENT : /** 
 * Gets the value as a Integer instance.
 * @return the value as a Integer
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value.
 * @param value the value to set
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value from any Number instance.
 * @param value the value to set
 * @throws NullPointerException if the object is null
 * @throws ClassCastException if the type is not a  {@link Number}
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : increment
COMMENT : /** 
 * Increments the value.
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : decrement
COMMENT : /** 
 * Decrements the value.
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : add
COMMENT : /** 
 * Adds a value.
 * @param operand the value to add
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : add
COMMENT : /** 
 * Adds a value.
 * @param operand the value to add
 * @throws NullPointerException if the object is null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : subtract
COMMENT : /** 
 * Subtracts a value.
 * @param operand the value to add
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : subtract
COMMENT : /** 
 * Subtracts a value.
 * @param operand the value to add
 * @throws NullPointerException if the object is null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : intValue
COMMENT : /** 
 * Returns the value of this MutableInt as a int.
 * @return the numeric value represented by this object after conversion to type int.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : longValue
COMMENT : /** 
 * Returns the value of this MutableInt as a long.
 * @return the numeric value represented by this object after conversion to type long.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : floatValue
COMMENT : /** 
 * Returns the value of this MutableInt as a float.
 * @return the numeric value represented by this object after conversion to type float.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : doubleValue
COMMENT : /** 
 * Returns the value of this MutableInt as a double.
 * @return the numeric value represented by this object after conversion to type double.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toInteger
COMMENT : /** 
 * Gets this mutable as an instance of Integer.
 * @return a Integer instance containing the value from this mutable
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : equals
COMMENT : /** 
 * Compares this object to the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is an <code>MutableInt</code> object that contains the same <code>int</code> value as this object.
 * @param obj the object to compare with.
 * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : hashCode
COMMENT : /** 
 * Returns a suitable hashcode for this mutable.
 * @return a suitable hashcode
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : compareTo
COMMENT : /** 
 * Compares this mutable to another in ascending order.
 * @param obj the mutable to compare to
 * @return negative if this is less, zero if equal, positive if greater
 * @throws ClassCastException if the argument is not a MutableInt
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toString
COMMENT : /** 
 * Returns the String value of this mutable.
 * @return the mutable value as a string
 */



PACKAGE : package org.apache.commons.lang;

NAME : CharRangeTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testClass
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorAccessors_Char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorAccessors_CharBoolean_Normal
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorAccessors_CharBoolean_Negated
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorAccessors_CharChar_Same
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorAccessors_CharChar_Normal
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorAccessors_CharChar_Reversed
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorAccessors_CharCharBoolean_Same
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorAccessors_CharCharBoolean_Normal
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorAccessors_CharCharBoolean_Reversed
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorAccessors_CharCharBoolean_SameNegated
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorAccessors_CharCharBoolean_NormalNegated
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorAccessors_CharCharBoolean_ReversedNegated
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEquals_Object
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContains_Char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContains_Charrange
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsNullArg
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSerialization
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : LongRange
COMMENT : /** 
 * <p>Constructs a new <code>LongRange</code> using the specified number as both the minimum and maximum in this range.</p>
 * @param number  the number to use for this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : LongRange
COMMENT : /** 
 * <p>Constructs a new <code>LongRange</code> using the specified number as both the minimum and maximum in this range.</p>
 * @param number  the number to use for this range, must notbe <code>null</code>
 * @throws IllegalArgumentException if the number is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : LongRange
COMMENT : /** 
 * <p>Constructs a new <code>LongRange</code> with the specified minimum and maximum numbers (both inclusive).</p> <p>The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.</p>
 * @param number1  first number that defines the edge of the range, inclusive
 * @param number2  second number that defines the edge of the range, inclusive
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : LongRange
COMMENT : /** 
 * <p>Constructs a new <code>LongRange</code> with the specified minimum and maximum numbers (both inclusive).</p> <p>The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.</p>
 * @param number1  first number that defines the edge of the range, inclusive
 * @param number2  second number that defines the edge of the range, inclusive
 * @throws IllegalArgumentException if either number is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumNumber
COMMENT : /** 
 * <p>Returns the minimum number in this range.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumLong
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>long</code>.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumInteger
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>int</code>.</p> <p>This conversion can lose information for large values.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumDouble
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>double</code>.</p> <p>This conversion can lose information for large values.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumFloat
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>float</code>.</p> <p>This conversion can lose information for large values.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumNumber
COMMENT : /** 
 * <p>Returns the maximum number in this range.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumLong
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>long</code>.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumInteger
COMMENT : /** 
 * <p>Gets the maximum number in this range cast to an <code>int</code>.</p> <p>This conversion can lose information for large values.</p>
 * @return the maximum number in this range cast to an <code>int</code>.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumDouble
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>double</code>.</p> <p>This conversion can lose information for large values.</p>
 * @return The maximum number in this range as a <code>double</code>.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumFloat
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>float</code>.</p> <p>This conversion can lose information for large values.</p>
 * @return The maximum number in this range as a <code>float</code>.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsNumber
COMMENT : /** 
 * <p>Tests whether the specified <code>number</code> occurs within this range using <code>long</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param number  the number to test, may be <code>null</code>
 * @return <code>true</code> if the specified number occurs within this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsLong
COMMENT : /** 
 * <p>Tests whether the specified <code>long</code> occurs within this range using <code>long</code> comparison.</p> <p>This implementation overrides the superclass for performance as it is the most common case.</p>
 * @param value  the long to test
 * @return <code>true</code> if the specified number occurs within thisrange by <code>long</code> comparison
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsRange
COMMENT : /** 
 * <p>Tests whether the specified range occurs entirely within this range using <code>long</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param range  the range to test, may be <code>null</code>
 * @return <code>true</code> if the specified range occurs entirely within this range
 * @throws IllegalArgumentException if the range is not of this type
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : overlapsRange
COMMENT : /** 
 * <p>Tests whether the specified range overlaps with this range using <code>long</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param range  the range to test, may be <code>null</code>
 * @return <code>true</code> if the specified range overlaps with this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : equals
COMMENT : /** 
 * <p>Compares this range to another object to test if they are equal.</p>. <p>To be equal, the class, minimum and maximum must be equal.</p>
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : hashCode
COMMENT : /** 
 * <p>Gets a hashCode for the range.</p>
 * @return a hash code value for this object
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toString
COMMENT : /** 
 * <p>Gets the range as a <code>String</code>.</p> <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>
 * @return the <code>String</code> representation of this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toArray
COMMENT : /** 
 * <p>Returns an array containing all the long values in the range.</p>
 * @return the <code>long[]</code> representation of this range
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableObject
COMMENT : /** 
 * Constructs a new MutableObject with the default value of <code>null</code>.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableObject
COMMENT : /** 
 * Constructs a new MutableObject with the specified value.
 * @param value a value.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : getValue
COMMENT : /** 
 * Gets the value.
 * @return the value
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value.
 * @param value the value to set
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : equals
COMMENT : /** 
 * Compares this object against the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>MutableObject</code> object that contains the same <code>Object</code> value as this object.
 * @param obj the object to compare with.
 * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : hashCode
COMMENT : /** 
 * Returns the value's hash code or <code>0</code> if the value is <code>null</code>.
 * @return the value's hash code or <code>0</code> if the value is <code>null</code>.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toString
COMMENT : /** 
 * Returns the String value of this mutable.
 * @return the mutable value as a string
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : HashCodeBuilderAndEqualsBuilderTest
COMMENT : /** 
 * Constructor for HashCodeBuilderAndEqualsBuilderTest.
 * @param name
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testInteger
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testInteger
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testIntegerWithTransients
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFixture
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFixtureWithTransients
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFixture
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : assertEqualsAndHashCodeContract
COMMENT : /** 
 * Asserts that if <code>lhs</code> equals <code>rhs</code>  then their hash codes MUST be identical.
 * @param lhs The Left-Hand-Side of the equals test
 * @param rhs The Right-Hand-Side of the equals test
 * @param testTransients wether to test transient fields
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : TestFixture
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : SubTestFixture
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : AllTransientFixture
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : SubAllTransientFixture
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeException
COMMENT : /** 
 * Constructs a new <code>NestableRuntimeException</code> without specified detail message.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeException
COMMENT : /** 
 * Constructs a new <code>NestableRuntimeException</code> with specified detail message.
 * @param msg the error message
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeException
COMMENT : /** 
 * Constructs a new <code>NestableRuntimeException</code> with specified nested <code>Throwable</code>.
 * @param cause the exception or error that caused this exception to bethrown
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeException
COMMENT : /** 
 * Constructs a new <code>NestableRuntimeException</code> with specified detail message and nested <code>Throwable</code>.
 * @param msg    the error message
 * @param cause  the exception or error that caused this exception to bethrown
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCause
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * Returns the detail message string of this throwable. If it was created with a null message, returns the following: (cause==null ? null : cause.toString()).
 * @return String message string of the throwable
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessages
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableCount
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowables
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printPartialStackTrace
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : SerializationUtils
COMMENT : /** 
 * <p>SerializationUtils instances should NOT be constructed in standard programming. Instead, the class should be used as <code>SerializationUtils.clone(object)</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : clone
COMMENT : /** 
 * <p>Deep clone an <code>Object</code> using serialization.</p> <p>This is many times slower than writing clone methods by hand on all objects in your object graph. However, for complex object graphs, or for those that don't support deep cloning this can be a simple alternative implementation. Of course all the objects must be <code>Serializable</code>.</p>
 * @param object  the <code>Serializable</code> object to clone
 * @return the cloned object
 * @throws SerializationException (runtime) if the serialization fails
 */



PACKAGE : package org.apache.commons.lang;

NAME : serialize
COMMENT : /** 
 * <p>Serializes an <code>Object</code> to the specified stream.</p> <p>The stream will be closed once the object is written. This avoids the need for a finally clause, and maybe also exception handling, in the application code.</p> <p>The stream passed in is not buffered internally within this method. This is the responsibility of your application if desired.</p>
 * @param obj  the object to serialize to bytes, may be null
 * @param outputStream  the stream to write to, must not be null
 * @throws IllegalArgumentException if <code>outputStream</code> is <code>null</code>
 * @throws SerializationException (runtime) if the serialization fails
 */



PACKAGE : package org.apache.commons.lang;

NAME : serialize
COMMENT : /** 
 * <p>Serializes an <code>Object</code> to a byte array for storage/serialization.</p>
 * @param obj  the object to serialize to bytes
 * @return a byte[] with the converted Serializable
 * @throws SerializationException (runtime) if the serialization fails
 */



PACKAGE : package org.apache.commons.lang;

NAME : deserialize
COMMENT : /** 
 * <p>Deserializes an <code>Object</code> from the specified stream.</p> <p>The stream will be closed once the object is written. This avoids the need for a finally clause, and maybe also exception handling, in the application code.</p> <p>The stream passed in is not buffered internally within this method. This is the responsibility of your application if desired.</p>
 * @param inputStream  the serialized object input stream, must not be null
 * @return the deserialized object
 * @throws IllegalArgumentException if <code>inputStream</code> is <code>null</code>
 * @throws SerializationException (runtime) if the serialization fails
 */



PACKAGE : package org.apache.commons.lang;

NAME : deserialize
COMMENT : /** 
 * <p>Deserializes a single <code>Object</code> from an array of bytes.</p>
 * @param objectData  the serialized object, must not be null
 * @return the deserialized object
 * @throws IllegalArgumentException if <code>objectData</code> is <code>null</code>
 * @throws SerializationException (runtime) if the serialization fails
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : Broken2OperationEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumClass
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : PlusOperation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : MinusOperation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : printSysInfo
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : run
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : run_CharSet
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : run_CharUtils_isAsciiNumeric
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : run_inlined_CharUtils_isAsciiNumeric
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : printlnTotal
COMMENT : null


PACKAGE : null
NAME : ValuedColorEnum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : invert
COMMENT : /** 
 * Invert the specified Map.
 * @param map the Map to invert.
 * @return a new Map instance.
 * @throws NullPointerException if <code>map</code> is <code>null</code>.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : seekFormatElementEnd
COMMENT : /** 
 * Find the end of the subformat.
 * @param source String
 * @param pos current parse position
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : next
COMMENT : /** 
 * Advance the parse index by 1.
 * @param pos the ParsePosition to advance.
 * @return <code>pos</code>
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : parseObject
COMMENT : /** 
 * Parse an object from the specified String and ParsePosition. If an error occurs <code>pos.getErrorIndex()</code> will contain a value >= zero, indicating the index at which the parse error occurred.
 * @param source String to parse
 * @param pos ParsePosition marking index into <code>source</code>
 * @return Object parsed
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : format
COMMENT : /** 
 * Format the specified object, appending to the given StringBuffer, and optionally respecting the specified FieldPosition.
 * @param obj the object to format
 * @param toAppendTo the StringBuffer to which the formatted object shouldbe appended
 * @param pos FieldPosition associated with <code>obj</code>
 * @return <code>toAppendTo</code>
 * @throws NullPointerException if <code>toAppendTo</code> or<code>pos</code> is <code>null</code>
 * @throws IllegalArgumentException if unable to format <code>obj</code>
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : createMessageFormat
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : LocaleUtilsTest
COMMENT : /** 
 * Constructor.
 * @param name
 */



PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : /** 
 * Main.
 * @param args
 */



PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : /** 
 * Run the test cases as a suite.
 * @return the Test
 */



PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : /** 
 * Test that constructors are public, and work, etc.
 */



PACKAGE : package org.apache.commons.lang;

NAME : assertValidToLocale
COMMENT : /** 
 * Pass in a valid language, test toLocale.
 * @param language  the language string
 */



PACKAGE : package org.apache.commons.lang;

NAME : assertValidToLocale
COMMENT : /** 
 * Pass in a valid language, test toLocale.
 * @param localeString to pass to toLocale()
 * @param language of the resulting Locale
 * @param country of the resulting Locale
 */



PACKAGE : package org.apache.commons.lang;

NAME : assertValidToLocale
COMMENT : /** 
 * Pass in a valid language, test toLocale.
 * @param localeString to pass to toLocale()
 * @param language of the resulting Locale
 * @param country of the resulting Locale
 * @param variant of the resulting Locale
 */



PACKAGE : package org.apache.commons.lang;

NAME : testToLocale_1Part
COMMENT : /** 
 * Test toLocale() method.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testToLocale_2Part
COMMENT : /** 
 * Test toLocale() method.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testToLocale_3Part
COMMENT : /** 
 * Test toLocale() method.
 */



PACKAGE : package org.apache.commons.lang;

NAME : assertLocaleLookupList
COMMENT : /** 
 * Helper method for local lookups.
 * @param locale  the input locale
 * @param defaultLocale  the input default locale
 * @param expected  expected results
 */



PACKAGE : package org.apache.commons.lang;

NAME : testLocaleLookupList_Locale
COMMENT : /** 
 * Test localeLookupList() method.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testLocaleLookupList_LocaleLocale
COMMENT : /** 
 * Test localeLookupList() method.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testAvailableLocaleList
COMMENT : /** 
 * Test availableLocaleList() method.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testAvailableLocaleSet
COMMENT : /** 
 * Test availableLocaleSet() method.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testIsAvailableLocale
COMMENT : /** 
 * Test availableLocaleSet() method.
 */



PACKAGE : package org.apache.commons.lang;

NAME : assertLanguageByCountry
COMMENT : /** 
 * Make sure the language by country is correct. It checks that  the LocaleUtils.languagesByCountry(country) call contains the  array of languages passed in. It may contain more due to JVM  variations.
 * @param country
 * @param languages array of languages that should be returned
 */



PACKAGE : package org.apache.commons.lang;

NAME : testLanguagesByCountry
COMMENT : /** 
 * Test languagesByCountry() method.
 */



PACKAGE : package org.apache.commons.lang;

NAME : assertCountriesByLanguage
COMMENT : /** 
 * Make sure the country by language is correct. It checks that  the LocaleUtils.countryByLanguage(language) call contains the  array of countries passed in. It may contain more due to JVM  variations.
 * @param language
 * @param countries array of countries that should be returned
 */



PACKAGE : package org.apache.commons.lang;

NAME : testCountriesByLanguage
COMMENT : /** 
 * Test countriesByLanguage() method.
 */



PACKAGE : package org.apache.commons.lang;

NAME : assertUnmodifiableCollection
COMMENT : /** 
 * @param coll  the collection to check
 */



PACKAGE : package org.apache.commons.lang;

NAME : testLang328
COMMENT : /** 
 * Tests #LANG-328 - only language+variant
 */



PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveBooleanArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveByteArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveCharArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveDoubleArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveFloatArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveIntArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveShortArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveElementObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveElementBooleanArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveElementByteArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveElementCharArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveElementDoubleArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveElementFloatArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveElementIntArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveElementLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveElementShortArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : IllegalClassException
COMMENT : /** 
 * <p>Instantiates with the expected type, and actual object.</p>
 * @param expected  the expected type
 * @param actual  the actual object
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : IllegalClassException
COMMENT : /** 
 * <p>Instantiates with the expected and actual types.</p>
 * @param expected  the expected type
 * @param actual  the actual type
 */



PACKAGE : package org.apache.commons.lang;

NAME : IllegalClassException
COMMENT : /** 
 * <p>Instantiates with the specified message.</p>
 * @param message  the exception message
 */



PACKAGE : package org.apache.commons.lang;

NAME : safeGetClassName
COMMENT : /** 
 * <p>Returns the class name or <code>null</code> if the class is <code>null</code>.</p>
 * @param cls  a <code>Class</code>
 * @return the name of <code>cls</code>, or <code>null</code> if if <code>cls</code> is <code>null</code>.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Returns the minimum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Returns the minimum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Gets the minimum of three <code>double</code> values.</p> <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Gets the minimum of two <code>double</code> values.</p> <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
 * @param a  value 1
 * @param b  value 2
 * @return  the smallest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Gets the minimum of three <code>float</code> values.</p> <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Gets the minimum of two <code>float</code> values.</p> <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
 * @param a  value 1
 * @param b  value 2
 * @return  the smallest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Returns the maximum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Returns the maximum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Gets the maximum of three <code>double</code> values.</p> <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Gets the maximum of two <code>double</code> values.</p> <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
 * @param a  value 1
 * @param b  value 2
 * @return  the largest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Gets the maximum of three <code>float</code> values.</p> <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Gets the maximum of two <code>float</code> values.</p> <p>NaN is only returned if all numbers are NaN as per IEEE-754r. </p>
 * @param a  value 1
 * @param b  value 2
 * @return  the largest of the values
 */



PACKAGE : package org.apache.commons.lang;

NAME : ArrayUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertIsEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToMap
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testClone
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCloneBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCloneLong
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCloneInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCloneShort
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCloneChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCloneByte
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCloneDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCloneFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubarrayObject
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubarrayLong
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubarrayInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubarrayShort
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubarrChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubarrayByte
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubarrayDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubarrayFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubarrayBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSameLength
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSameLengthBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSameLengthLong
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSameLengthInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSameLengthShort
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSameLengthChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSameLengthByte
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSameLengthDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSameLengthFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSameType
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReverse
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReverseLong
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReverseInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReverseShort
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReverseChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReverseByte
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReverseDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReverseFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReverseBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOf
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOf
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContains
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfLong
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfLongWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfLong
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfLongWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsLong
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfIntWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfIntWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfShort
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfShortWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfShort
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfShortWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsShort
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfCharWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfCharWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfByte
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfByteWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfByte
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfByteWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsByte
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfDoubleTolerance
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfDoubleWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfDoubleWithStartIndexTolerance
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfDoubleTolerance
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfDoubleWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfDoubleWithStartIndexTolerance
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsDoubleTolerance
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfFloatWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfFloatWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfBooleanWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfBooleanWithStartIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_boolean_boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToObject_boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_char_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToObject_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_byte
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_byte_byte
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToObject_byte
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_short
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_short_short
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToObject_short
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_int
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_intNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToObject_int
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_long
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_long_long
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToObject_long
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_float
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_float_float
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToObject_float
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_double
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToPrimitive_double_double
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToObject_double
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsEmptyObject
COMMENT : /** 
 * Test for  {@link ArrayUtils#isEmpty(java.lang.Object[])}.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testIsEmptyPrimitives
COMMENT : /** 
 * Tests for  {@link ArrayUtils#isEmpty(long[])}, {@link ArrayUtils#isEmpty(int[])}, {@link ArrayUtils#isEmpty(short[])}, {@link ArrayUtils#isEmpty(char[])}, {@link ArrayUtils#isEmpty(byte[])}, {@link ArrayUtils#isEmpty(double[])}, {@link ArrayUtils#isEmpty(float[])} and{@link ArrayUtils#isEmpty(boolean[])}.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testGetLength
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : SystemUtils
COMMENT : /** 
 * <p>SystemUtils instances should NOT be constructed in standard programming. Instead, the class should be used as <code>SystemUtils.FILE_SEPARATOR</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : getJavaVersion
COMMENT : /** 
 * <p>Gets the Java version number as a <code>float</code>.</p> <p>Example return values:</p> <ul> <li><code>1.2f</code> for JDK 1.2 <li><code>1.31f</code> for JDK 1.3.1 </ul>
 * @return the version, for example 1.31f for JDK 1.3.1
 * @deprecated Use {@link #JAVA_VERSION_FLOAT} instead.Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : getJavaVersionAsFloat
COMMENT : /** 
 * <p>Gets the Java version number as a <code>float</code>.</p> <p>Example return values:</p> <ul> <li><code>1.2f</code> for JDK 1.2 <li><code>1.31f</code> for JDK 1.3.1 </ul> <p>Patch releases are not reported. Zero is returned if  {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>
 * @return the version, for example 1.31f for JDK 1.3.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getJavaVersionAsInt
COMMENT : /** 
 * <p>Gets the Java version number as an <code>int</code>.</p> <p>Example return values:</p> <ul> <li><code>120</code> for JDK 1.2 <li><code>131</code> for JDK 1.3.1 </ul> <p>Patch releases are not reported. Zero is returned if  {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>
 * @return the version, for example 131 for JDK 1.3.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getJavaVersionTrimmed
COMMENT : /** 
 * Trims the text of the java version to start with numbers.
 * @return the trimmed java version
 */



PACKAGE : package org.apache.commons.lang;

NAME : getJavaVersionMatches
COMMENT : /** 
 * <p>Decides if the java version matches.</p>
 * @param versionPrefix  the prefix for the java version
 * @return true if matches, or false if not or can't determine
 */



PACKAGE : package org.apache.commons.lang;

NAME : getOSMatches
COMMENT : /** 
 * <p>Decides if the operating system matches.</p>
 * @param osNamePrefix  the prefix for the os name
 * @return true if matches, or false if not or can't determine
 */



PACKAGE : package org.apache.commons.lang;

NAME : getOSMatches
COMMENT : /** 
 * <p>Decides if the operating system matches.</p>
 * @param osNamePrefix  the prefix for the os name
 * @param osVersionPrefix  the prefix for the version
 * @return true if matches, or false if not or can't determine
 */



PACKAGE : package org.apache.commons.lang;

NAME : getSystemProperty
COMMENT : /** 
 * <p>Gets a System property, defaulting to <code>null</code> if the property cannot be read.</p> <p>If a <code>SecurityException</code> is caught, the return value is <code>null</code> and a message is written to <code>System.err</code>.</p>
 * @param property the system property name
 * @return the system property value or <code>null</code> if a security problem occurs
 */



PACKAGE : package org.apache.commons.lang;

NAME : isJavaVersionAtLeast
COMMENT : /** 
 * <p>Is the Java version at least the requested version.</p> <p>Example input:</p> <ul> <li><code>1.2f</code> to test for JDK 1.2</li> <li><code>1.31f</code> to test for JDK 1.3.1</li> </ul>
 * @param requiredVersion  the required version, for example 1.31f
 * @return <code>true</code> if the actual version is equal or greaterthan the required version
 */



PACKAGE : package org.apache.commons.lang;

NAME : isJavaVersionAtLeast
COMMENT : /** 
 * <p>Is the Java version at least the requested version.</p> <p>Example input:</p> <ul> <li><code>120</code> to test for JDK 1.2 or greater</li> <li><code>131</code> to test for JDK 1.3.1 or greater</li> </ul>
 * @param requiredVersion  the required version, for example 131
 * @return <code>true</code> if the actual version is equal or greaterthan the required version
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : isJavaAwtHeadless
COMMENT : /** 
 * Returns whether the  {@link #JAVA_AWT_HEADLESS} value is <code>true</code>.
 * @return <code>true</code> if <code>JAVA_AWT_HEADLESS</code> is <code>"true"</code>,<code>false</code> otherwise.
 * @see #JAVA_AWT_HEADLESS
 * @since 2.1
 * @since Java 1.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : getJavaHome
COMMENT : /** 
 * <p>Gets the Java home directory as a <code>File</code>.</p>
 * @return a directory
 * @throws SecurityException  if a security manager exists and its  <code>checkPropertyAccess</code> method doesn't allow access to the specified system property.
 * @see System#getProperty(String)
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getJavaIoTmpDir
COMMENT : /** 
 * <p>Gets the Java IO temporary directory as a <code>File</code>.</p>
 * @return a directory
 * @throws SecurityException  if a security manager exists and its  <code>checkPropertyAccess</code> method doesn't allow access to the specified system property.
 * @see System#getProperty(String)
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getUserDir
COMMENT : /** 
 * <p>Gets the user directory as a <code>File</code>.</p>
 * @return a directory
 * @throws SecurityException  if a security manager exists and its  <code>checkPropertyAccess</code> method doesn't allow access to the specified system property.
 * @see System#getProperty(String)
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getUserHome
COMMENT : /** 
 * <p>Gets the user home directory as a <code>File</code>.</p>
 * @return a directory
 * @throws SecurityException  if a security manager exists and its  <code>checkPropertyAccess</code> method doesn't allow access to the specified system property.
 * @see System#getProperty(String)
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : NumberUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testStringToIntString
COMMENT : /** 
 * Test for int stringToInt(String)
 */



PACKAGE : package org.apache.commons.lang;

NAME : testStringToIntStringI
COMMENT : /** 
 * Test for int stringToInt(String, int)
 */



PACKAGE : package org.apache.commons.lang;

NAME : testCreateNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCreateFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCreateDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCreateInteger
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCreateLong
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCreateBigInteger
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCreateBigDecimal
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testMinimumLong
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testMinimumInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testMaximumLong
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testMaximumInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCompareDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCompareFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsDigits
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsNumber
COMMENT : /** 
 * Tests isNumber(String) and tests that createNumber(String) returns a valid number iff isNumber(String) returns false.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testIsNumberInvalidInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : checkCreateNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testPublicNoArgConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : addAbbreviation
COMMENT : /** 
 * Add primitive type abbreviation to maps of abbreviations.
 * @param primitive Canonical name of primitive type
 * @param abbreviation Corresponding abbreviation of primitive type
 */



PACKAGE : package org.apache.commons.lang;

NAME : ClassUtils
COMMENT : /** 
 * <p>ClassUtils instances should NOT be constructed in standard programming. Instead, the class should be used as <code>ClassUtils.getShortClassName(cls)</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : getShortClassName
COMMENT : /** 
 * <p>Gets the class name minus the package name for an <code>Object</code>.</p>
 * @param object  the class to get the short name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the class name of the object without the package name, or the null value
 */



PACKAGE : package org.apache.commons.lang;

NAME : getShortClassName
COMMENT : /** 
 * <p>Gets the class name minus the package name from a <code>Class</code>.</p>
 * @param cls  the class to get the short name for.
 * @return the class name without the package name or an empty string
 */



PACKAGE : package org.apache.commons.lang;

NAME : getShortClassName
COMMENT : /** 
 * <p>Gets the class name minus the package name from a String.</p> <p>The string passed in is assumed to be a class name - it is not checked.</p>
 * @param className  the className to get the short name for
 * @return the class name of the class without the package name or an empty string
 */



PACKAGE : package org.apache.commons.lang;

NAME : getPackageName
COMMENT : /** 
 * <p>Gets the package name of an <code>Object</code>.</p>
 * @param object  the class to get the package name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the package name of the object, or the null value
 */



PACKAGE : package org.apache.commons.lang;

NAME : getPackageName
COMMENT : /** 
 * <p>Gets the package name of a <code>Class</code>.</p>
 * @param cls  the class to get the package name for, may be <code>null</code>.
 * @return the package name or an empty string
 */



PACKAGE : package org.apache.commons.lang;

NAME : getPackageName
COMMENT : /** 
 * <p>Gets the package name from a <code>String</code>.</p> <p>The string passed in is assumed to be a class name - it is not checked.</p> <p>If the class is unpackaged, return an empty string.</p>
 * @param className  the className to get the package name for, may be <code>null</code>
 * @return the package name or an empty string
 */



PACKAGE : package org.apache.commons.lang;

NAME : getAllSuperclasses
COMMENT : /** 
 * <p>Gets a <code>List</code> of superclasses for the given class.</p>
 * @param cls  the class to look up, may be <code>null</code>
 * @return the <code>List</code> of superclasses in order going up from this one<code>null</code> if null input
 */



PACKAGE : package org.apache.commons.lang;

NAME : getAllInterfaces
COMMENT : /** 
 * <p>Gets a <code>List</code> of all interfaces implemented by the given class and its superclasses.</p> <p>The order is determined by looking through each interface in turn as declared in the source file and following its hierarchy up. Then each superclass is considered in the same way. Later duplicates are ignored, so the order is maintained.</p>
 * @param cls  the class to look up, may be <code>null</code>
 * @return the <code>List</code> of interfaces in order,<code>null</code> if null input
 */



PACKAGE : package org.apache.commons.lang;

NAME : convertClassNamesToClasses
COMMENT : /** 
 * <p>Given a <code>List</code> of class names, this method converts them into classes.</p> <p>A new <code>List</code> is returned. If the class name cannot be found, <code>null</code> is stored in the <code>List</code>. If the class name in the <code>List</code> is <code>null</code>, <code>null</code> is stored in the output <code>List</code>.</p>
 * @param classNames  the classNames to change
 * @return a <code>List</code> of Class objects corresponding to the class names,<code>null</code> if null input
 * @throws ClassCastException if classNames contains a non String entry
 */



PACKAGE : package org.apache.commons.lang;

NAME : convertClassesToClassNames
COMMENT : /** 
 * <p>Given a <code>List</code> of <code>Class</code> objects, this method converts them into class names.</p> <p>A new <code>List</code> is returned. <code>null</code> objects will be copied into the returned list as <code>null</code>.</p>
 * @param classes  the classes to change
 * @return a <code>List</code> of class names corresponding to the Class objects,<code>null</code> if null input
 * @throws ClassCastException if <code>classes</code> contains a non-<code>Class</code> entry
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAssignable
COMMENT : /** 
 * <p>Checks if an array of Classes can be assigned to another array of Classes.</p> <p>This method calls  {@link #isAssignable(Class,Class) isAssignable} for eachClass pair in the input arrays. It can be used to check if a set of arguments (the first parameter) are suitably compatible with a set of method parameter types (the second parameter).</p> <p>Unlike the  {@link Class#isAssignableFrom(java.lang.Class)} method, thismethod takes into account widenings of primitive classes and <code>null</code>s.</p> <p>Primitive widenings allow an int to be assigned to a <code>long</code>, <code>float</code> or <code>double</code>. This method returns the correct result for these cases.</p> <p><code>Null</code> may be assigned to any reference type. This method will return <code>true</code> if <code>null</code> is passed in and the toClass is non-primitive.</p> <p>Specifically, this method tests whether the type represented by the specified <code>Class</code> parameter can be converted to the type represented by this <code>Class</code> object via an identity conversion widening primitive or widening reference conversion. See <em><a href="http://java.sun.com/docs/books/jls/">The Java Language Specification</a></em>, sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>
 * @param classArray  the array of Classes to check, may be <code>null</code>
 * @param toClassArray  the array of Classes to try to assign into, may be <code>null</code>
 * @return <code>true</code> if assignment possible
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAssignable
COMMENT : /** 
 * <p>Checks if one <code>Class</code> can be assigned to a variable of another <code>Class</code>.</p> <p>Unlike the  {@link Class#isAssignableFrom(java.lang.Class)} method,this method takes into account widenings of primitive classes and <code>null</code>s.</p> <p>Primitive widenings allow an int to be assigned to a long, float or double. This method returns the correct result for these cases.</p> <p><code>Null</code> may be assigned to any reference type. This method will return <code>true</code> if <code>null</code> is passed in and the toClass is non-primitive.</p> <p>Specifically, this method tests whether the type represented by the specified <code>Class</code> parameter can be converted to the type represented by this <code>Class</code> object via an identity conversion widening primitive or widening reference conversion. See <em><a href="http://java.sun.com/docs/books/jls/">The Java Language Specification</a></em>, sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>
 * @param cls  the Class to check, may be null
 * @param toClass  the Class to try to assign into, returns false if null
 * @return <code>true</code> if assignment possible
 */



PACKAGE : package org.apache.commons.lang;

NAME : primitiveToWrapper
COMMENT : /** 
 * <p>Converts the specified primitive Class object to its corresponding wrapper Class object.</p> <p>NOTE: From v2.2, this method handles <code>Void.TYPE</code>, returning <code>Void.TYPE</code>.</p>
 * @param cls  the class to convert, may be null
 * @return the wrapper class for <code>cls</code> or <code>cls</code> if<code>cls</code> is not a primitive. <code>null</code> if null input.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : primitivesToWrappers
COMMENT : /** 
 * <p>Converts the specified array of primitive Class objects to an array of its corresponding wrapper Class objects.</p>
 * @param classes  the class array to convert, may be null or empty
 * @return an array which contains for each given class, the wrapper class orthe original class if class is not a primitive. <code>null</code> if null input. Empty array if an empty array passed in.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : wrapperToPrimitive
COMMENT : /** 
 * <p>Converts the specified wrapper class to its corresponding primitive class.</p> <p>This method is the counter part of <code>primitiveToWrapper()</code>. If the passed in class is a wrapper class for a primitive type, this primitive type will be returned (e.g. <code>Integer.TYPE</code> for <code>Integer.class</code>). For other classes, or if the parameter is <b>null</b>, the return value is <b>null</b>.</p>
 * @param cls the class to convert, may be <b>null</b>
 * @return the corresponding primitive type if <code>cls</code> is awrapper class, <b>null</b> otherwise
 * @see #primitiveToWrapper(Class)
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : wrappersToPrimitives
COMMENT : /** 
 * <p>Converts the specified array of wrapper Class objects to an array of its corresponding primitive Class objects.</p> <p>This method invokes <code>wrapperToPrimitive()</code> for each element of the passed in array.</p>
 * @param classes  the class array to convert, may be null or empty
 * @return an array which contains for each given class, the primitive class or<b>null</b> if the original class is not a wrapper class. <code>null</code> if null input. Empty array if an empty array passed in.
 * @see #wrapperToPrimitive(Class)
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : isInnerClass
COMMENT : /** 
 * <p>Is the specified class an inner class or static nested class.</p>
 * @param cls  the class to check, may be null
 * @return <code>true</code> if the class is an inner or static nested class,false if not or <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : getClass
COMMENT : /** 
 * Returns the class represented by <code>className</code> using the <code>classLoader</code>.  This implementation supports names like "<code>java.lang.String[]</code>" as well as "<code>[Ljava.lang.String;</code>".
 * @param classLoader  the class loader to use to load the class
 * @param className  the class name
 * @param initialize  whether the class must be initialized
 * @return the class represented by <code>className</code> using the <code>classLoader</code>
 * @throws ClassNotFoundException if the class is not found
 */



PACKAGE : package org.apache.commons.lang;

NAME : getClass
COMMENT : /** 
 * Returns the (initialized) class represented by <code>className</code> using the <code>classLoader</code>.  This implementation supports names like "<code>java.lang.String[]</code>" as well as "<code>[Ljava.lang.String;</code>".
 * @param classLoader  the class loader to use to load the class
 * @param className  the class name
 * @return the class represented by <code>className</code> using the <code>classLoader</code>
 * @throws ClassNotFoundException if the class is not found
 */



PACKAGE : package org.apache.commons.lang;

NAME : getClass
COMMENT : /** 
 * Returns the (initialized )class represented by <code>className</code> using the current thread's context class loader. This implementation supports names like "<code>java.lang.String[]</code>" as well as "<code>[Ljava.lang.String;</code>".
 * @param className  the class name
 * @return the class represented by <code>className</code> using the current thread's context class loader
 * @throws ClassNotFoundException if the class is not found
 */



PACKAGE : package org.apache.commons.lang;

NAME : getClass
COMMENT : /** 
 * Returns the class represented by <code>className</code> using the current thread's context class loader. This implementation supports names like "<code>java.lang.String[]</code>" as well as "<code>[Ljava.lang.String;</code>".
 * @param className  the class name
 * @param initialize  whether the class must be initialized
 * @return the class represented by <code>className</code> using the current thread's context class loader
 * @throws ClassNotFoundException if the class is not found
 */



PACKAGE : package org.apache.commons.lang;

NAME : getPublicMethod
COMMENT : /** 
 * <p>Returns the desired Method much like <code>Class.getMethod</code>, however  it ensures that the returned Method is from a public class or interface and not  from an anonymous inner class. This means that the Method is invokable and  doesn't fall foul of Java bug  <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4071957">4071957</a>). <code><pre>Set set = Collections.unmodifiableSet(...); Method method = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]); Object result = method.invoke(set, new Object[]);</pre></code> </p>
 * @param cls  the class to check, not null
 * @param methodName  the name of the method
 * @param parameterTypes  the list of parameters
 * @return the method
 * @throws NullPointerException if the class is null
 * @throws SecurityException if a a security violation occured
 * @throws NoSuchMethodException if the method is not found in the given classor if the metothod doen't conform with the requirements
 */



PACKAGE : package org.apache.commons.lang;

NAME : toCanonicalName
COMMENT : /** 
 * Converts a class name to a JLS style class name.
 * @param className  the class name
 * @return the converted name
 */



PACKAGE : package org.apache.commons.lang;

NAME : toClass
COMMENT : /** 
 * <p>Converts an array of <code>Object</code> in to an array of <code>Class</code> objects.</p> <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 * @param array an <code>Object</code> array
 * @return a <code>Class</code> array, <code>null</code> if null array input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : getShortCanonicalName
COMMENT : /** 
 * <p>Gets the canonical name minus the package name for an <code>Object</code>.</p>
 * @param object  the class to get the short name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the canonical name of the object without the package name, or the null value
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : getShortCanonicalName
COMMENT : /** 
 * <p>Gets the canonical name minus the package name from a <code>Class</code>.</p>
 * @param cls  the class to get the short name for.
 * @return the canonical name without the package name or an empty string
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : getShortCanonicalName
COMMENT : /** 
 * <p>Gets the canonical name minus the package name from a String.</p> <p>The string passed in is assumed to be a canonical name - it is not checked.</p>
 * @param canonicalName  the class name to get the short name for
 * @return the canonical name of the class without the package name or an empty string
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : getPackageCanonicalName
COMMENT : /** 
 * <p>Gets the package name from the canonical name of an <code>Object</code>.</p>
 * @param object  the class to get the package name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the package name of the object, or the null value
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : getPackageCanonicalName
COMMENT : /** 
 * <p>Gets the package name from the canonical name of a <code>Class</code>.</p>
 * @param cls  the class to get the package name for, may be <code>null</code>.
 * @return the package name or an empty string
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : getPackageCanonicalName
COMMENT : /** 
 * <p>Gets the package name from the canonical name. </p> <p>The string passed in is assumed to be a canonical name - it is not checked.</p> <p>If the class is unpackaged, return an empty string.</p>
 * @param canonicalName  the canonical name to get the package name for, may be <code>null</code>
 * @return the package name or an empty string
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : getCanonicalName
COMMENT : /** 
 * <p>Converts a given name of class into canonical format. If name of class is not a name of array class it returns unchanged name.</p> <p>Example: <ul> <li><code>getCanonicalName("[I") = "int[]"</code></li> <li><code>getCanonicalName("[Ljava.lang.String;") = "java.lang.String[]"</code></li> <li><code>getCanonicalName("java.lang.String") = "java.lang.String"</code></li> </ul> </p>
 * @param className the name of class
 * @return canonical form of class name
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : ObjectUtils
COMMENT : /** 
 * <p><code>ObjectUtils</code> instances should NOT be constructed in standard programming. Instead, the class should be used as <code>ObjectUtils.defaultIfNull("a","b");</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : defaultIfNull
COMMENT : /** 
 * <p>Returns a default value if the object passed is <code>null</code>.</p> <pre> ObjectUtils.defaultIfNull(null, null)      = null ObjectUtils.defaultIfNull(null, "")        = "" ObjectUtils.defaultIfNull(null, "zz")      = "zz" ObjectUtils.defaultIfNull("abc", *)        = "abc" ObjectUtils.defaultIfNull(Boolean.TRUE, *) = Boolean.TRUE </pre>
 * @param object  the <code>Object</code> to test, may be <code>null</code>
 * @param defaultValue  the default value to return, may be <code>null</code>
 * @return <code>object</code> if it is not <code>null</code>, defaultValue otherwise
 */



PACKAGE : package org.apache.commons.lang;

NAME : equals
COMMENT : /** 
 * <p>Compares two objects for equality, where either one or both objects may be <code>null</code>.</p> <pre> ObjectUtils.equals(null, null)                  = true ObjectUtils.equals(null, "")                    = false ObjectUtils.equals("", null)                    = false ObjectUtils.equals("", "")                      = true ObjectUtils.equals(Boolean.TRUE, null)          = false ObjectUtils.equals(Boolean.TRUE, "true")        = false ObjectUtils.equals(Boolean.TRUE, Boolean.TRUE)  = true ObjectUtils.equals(Boolean.TRUE, Boolean.FALSE) = false </pre>
 * @param object1  the first object, may be <code>null</code>
 * @param object2  the second object, may be <code>null</code>
 * @return <code>true</code> if the values of both objects are the same
 */



PACKAGE : package org.apache.commons.lang;

NAME : hashCode
COMMENT : /** 
 * <p>Gets the hash code of an object returning zero when the object is <code>null</code>.</p> <pre> ObjectUtils.hashCode(null)   = 0 ObjectUtils.hashCode(obj)    = obj.hashCode() </pre>
 * @param obj  the object to obtain the hash code of, may be <code>null</code>
 * @return the hash code of the object, or zero if null
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : identityToString
COMMENT : /** 
 * <p>Gets the toString that would be produced by <code>Object</code> if a class did not override toString itself. <code>null</code> will return <code>null</code>.</p> <pre> ObjectUtils.identityToString(null)         = null ObjectUtils.identityToString("")           = "java.lang.String@1e23" ObjectUtils.identityToString(Boolean.TRUE) = "java.lang.Boolean@7fa" </pre>
 * @param object  the object to create a toString for, may be<code>null</code>
 * @return the default toString text, or <code>null</code> if<code>null</code> passed in
 */



PACKAGE : package org.apache.commons.lang;

NAME : identityToString
COMMENT : /** 
 * <p>Appends the toString that would be produced by <code>Object</code> if a class did not override toString itself. <code>null</code> will throw a NullPointerException for either of the two parameters. </p> <pre> ObjectUtils.identityToString(buf, "")            = buf.append("java.lang.String@1e23" ObjectUtils.identityToString(buf, Boolean.TRUE)  = buf.append("java.lang.Boolean@7fa" ObjectUtils.identityToString(buf, Boolean.TRUE)  = buf.append("java.lang.Boolean@7fa") </pre>
 * @param buffer  the buffer to append to
 * @param object  the object to create a toString for
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : appendIdentityToString
COMMENT : /** 
 * <p>Appends the toString that would be produced by <code>Object</code> if a class did not override toString itself. <code>null</code> will return <code>null</code>.</p> <pre> ObjectUtils.appendIdentityToString(*, null)            = null ObjectUtils.appendIdentityToString(null, "")           = "java.lang.String@1e23" ObjectUtils.appendIdentityToString(null, Boolean.TRUE) = "java.lang.Boolean@7fa" ObjectUtils.appendIdentityToString(buf, Boolean.TRUE)  = buf.append("java.lang.Boolean@7fa") </pre>
 * @param buffer  the buffer to append to, may be <code>null</code>
 * @param object  the object to create a toString for, may be <code>null</code>
 * @return the default toString text, or <code>null</code> if<code>null</code> passed in
 * @since 2.0
 * @deprecated The design of this method is bad - see LANG-360. Instead, use identityToString(StringBuffer, Object).
 */



PACKAGE : package org.apache.commons.lang;

NAME : toString
COMMENT : /** 
 * <p>Gets the <code>toString</code> of an <code>Object</code> returning an empty string ("") if <code>null</code> input.</p> <pre> ObjectUtils.toString(null)         = "" ObjectUtils.toString("")           = "" ObjectUtils.toString("bat")        = "bat" ObjectUtils.toString(Boolean.TRUE) = "true" </pre>
 * @see StringUtils#defaultString(String)
 * @see String#valueOf(Object)
 * @param obj  the Object to <code>toString</code>, may be null
 * @return the passed in Object's toString, or nullStr if <code>null</code> input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : toString
COMMENT : /** 
 * <p>Gets the <code>toString</code> of an <code>Object</code> returning a specified text if <code>null</code> input.</p> <pre> ObjectUtils.toString(null, null)           = null ObjectUtils.toString(null, "null")         = "null" ObjectUtils.toString("", "null")           = "" ObjectUtils.toString("bat", "null")        = "bat" ObjectUtils.toString(Boolean.TRUE, "null") = "true" </pre>
 * @see StringUtils#defaultString(String,String)
 * @see String#valueOf(Object)
 * @param obj  the Object to <code>toString</code>, may be null
 * @param nullStr  the String to return if <code>null</code> input, may be null
 * @return the passed in Object's toString, or nullStr if <code>null</code> input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : min
COMMENT : /** 
 * Null safe comparison of Comparables.
 * @param c1  the first comparable, may be null
 * @param c2  the second comparable, may be null
 * @return <ul> <li>If both objects are non-null and unequal, the lesser object. <li>If both objects are non-null and equal, c1. <li>If one of the comparables is null, the non-null object. <li>If both the comparables are null, null is returned. </ul>
 */



PACKAGE : package org.apache.commons.lang;

NAME : max
COMMENT : /** 
 * Null safe comparison of Comparables.
 * @param c1  the first comparable, may be null
 * @param c2  the second comparable, may be null
 * @return <ul> <li>If both objects are non-null and unequal, the greater object. <li>If both objects are non-null and equal, c1. <li>If one of the comparables is null, the non-null object. <li>If both the comparables are null, null is returned. </ul>
 */



PACKAGE : package org.apache.commons.lang;

NAME : Null
COMMENT : /** 
 * Restricted constructor - singleton.
 */



PACKAGE : package org.apache.commons.lang;

NAME : readResolve
COMMENT : /** 
 * <p>Ensure singleton.</p>
 * @return the singleton value
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : DateFormatUtils
COMMENT : /** 
 * <p>DateFormatUtils instances should NOT be constructed in standard programming.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : formatUTC
COMMENT : /** 
 * <p>Formats a date/time into a specific pattern using the UTC time zone.</p>
 * @param millis  the date to format expressed in milliseconds
 * @param pattern  the pattern to use to format the date
 * @return the formatted date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : formatUTC
COMMENT : /** 
 * <p>Formats a date/time into a specific pattern using the UTC time zone.</p>
 * @param date  the date to format
 * @param pattern  the pattern to use to format the date
 * @return the formatted date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : formatUTC
COMMENT : /** 
 * <p>Formats a date/time into a specific pattern using the UTC time zone.</p>
 * @param millis  the date to format expressed in milliseconds
 * @param pattern  the pattern to use to format the date
 * @param locale  the locale to use, may be <code>null</code>
 * @return the formatted date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : formatUTC
COMMENT : /** 
 * <p>Formats a date/time into a specific pattern using the UTC time zone.</p>
 * @param date  the date to format
 * @param pattern  the pattern to use to format the date
 * @param locale  the locale to use, may be <code>null</code>
 * @return the formatted date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a date/time into a specific pattern.</p>
 * @param millis  the date to format expressed in milliseconds
 * @param pattern  the pattern to use to format the date
 * @return the formatted date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a date/time into a specific pattern.</p>
 * @param date  the date to format
 * @param pattern  the pattern to use to format the date
 * @return the formatted date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a calendar into a specific pattern.</p>
 * @param calendar  the calendar to format
 * @param pattern  the pattern to use to format the calendar
 * @return the formatted calendar
 * @see FastDateFormat#format(Calendar)
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a date/time into a specific pattern in a time zone.</p>
 * @param millis  the time expressed in milliseconds
 * @param pattern  the pattern to use to format the date
 * @param timeZone  the time zone  to use, may be <code>null</code>
 * @return the formatted date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a date/time into a specific pattern in a time zone.</p>
 * @param date  the date to format
 * @param pattern  the pattern to use to format the date
 * @param timeZone  the time zone  to use, may be <code>null</code>
 * @return the formatted date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a calendar into a specific pattern in a time zone.</p>
 * @param calendar  the calendar to format
 * @param pattern  the pattern to use to format the calendar
 * @param timeZone  the time zone  to use, may be <code>null</code>
 * @return the formatted calendar
 * @see FastDateFormat#format(Calendar)
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a date/time into a specific pattern in a locale.</p>
 * @param millis  the date to format expressed in milliseconds
 * @param pattern  the pattern to use to format the date
 * @param locale  the locale to use, may be <code>null</code>
 * @return the formatted date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a date/time into a specific pattern in a locale.</p>
 * @param date  the date to format
 * @param pattern  the pattern to use to format the date
 * @param locale  the locale to use, may be <code>null</code>
 * @return the formatted date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a calendar into a specific pattern in a locale.</p>
 * @param calendar  the calendar to format
 * @param pattern  the pattern to use to format the calendar
 * @param locale  the locale to use, may be <code>null</code>
 * @return the formatted calendar
 * @see FastDateFormat#format(Calendar)
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a date/time into a specific pattern in a time zone  and locale.</p>
 * @param millis  the date to format expressed in milliseconds
 * @param pattern  the pattern to use to format the date
 * @param timeZone  the time zone  to use, may be <code>null</code>
 * @param locale  the locale to use, may be <code>null</code>
 * @return the formatted date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a date/time into a specific pattern in a time zone  and locale.</p>
 * @param date  the date to format
 * @param pattern  the pattern to use to format the date
 * @param timeZone  the time zone  to use, may be <code>null</code>
 * @param locale  the locale to use, may be <code>null</code>
 * @return the formatted date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>Formats a calendar into a specific pattern in a time zone  and locale.</p>
 * @param calendar  the calendar to format
 * @param pattern  the pattern to use to format the calendar
 * @param timeZone  the time zone  to use, may be <code>null</code>
 * @param locale  the locale to use, may be <code>null</code>
 * @return the formatted calendar
 * @see FastDateFormat#format(Calendar)
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : IncompleteArgumentException
COMMENT : /** 
 * <p>Instantiates with the specified description.</p>
 * @param argName  a description of the incomplete argument
 */



PACKAGE : package org.apache.commons.lang;

NAME : IncompleteArgumentException
COMMENT : /** 
 * <p>Instantiates with the specified description.</p>
 * @param argName  a description of the incomplete argument
 * @param items  an array describing the arguments missing
 */



PACKAGE : package org.apache.commons.lang;

NAME : safeArrayToString
COMMENT : /** 
 * <p>Converts an array to a string without throwing an exception.</p>
 * @param array  an array
 * @return the array as a string
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : Extended2Enum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : null
NAME : Nest
COMMENT : null


PACKAGE : null
NAME : ColorEnum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : NumberRange
COMMENT : /** 
 * <p>Constructs a new <code>NumberRange</code> using <code>number</code> as both the minimum and maximum in this range.</p>
 * @param num the number to use for this range
 * @throws NullPointerException if the number is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : NumberRange
COMMENT : /** 
 * <p>Constructs a new <code>NumberRange</code> with the specified minimum and maximum numbers.</p> <p><em>If the maximum is less than the minimum, the range will be constructed from the minimum value to the minimum value, not what you would expect!.</em></p>
 * @param min the minimum number in this range
 * @param max the maximum number in this range
 * @throws NullPointerException if either the minimum or maximum number is<code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : getMinimum
COMMENT : /** 
 * <p>Returns the minimum number in this range.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang;

NAME : getMaximum
COMMENT : /** 
 * <p>Returns the maximum number in this range.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang;

NAME : includesNumber
COMMENT : /** 
 * <p>Tests whether the specified <code>number</code> occurs within this range using <code>double</code> comparison.</p>
 * @param number the number to test
 * @return <code>true</code> if the specified number occurs within thisrange; otherwise, <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : includesRange
COMMENT : /** 
 * <p>Tests whether the specified range occurs entirely within this range using <code>double</code> comparison.</p>
 * @param range the range to test
 * @return <code>true</code> if the specified range occurs entirely withinthis range; otherwise, <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : overlaps
COMMENT : /** 
 * <p>Tests whether the specified range overlaps with this range using <code>double</code> comparison.</p>
 * @param range the range to test
 * @return <code>true</code> if the specified range overlaps with thisrange; otherwise, <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : equals
COMMENT : /** 
 * <p>Indicates whether some other <code>Object</code> is &quot;equal&quot; to this one.</p>
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is the same as the objargument; <code>false</code> otherwise
 */



PACKAGE : package org.apache.commons.lang;

NAME : hashCode
COMMENT : /** 
 * <p>Returns a hash code value for this object.</p>
 * @return a hash code value for this object
 */



PACKAGE : package org.apache.commons.lang;

NAME : toString
COMMENT : /** 
 * <p>Returns the string representation of this range.</p> <p>This string is the string representation of the minimum and maximum numbers in the range, separated by a hyphen. If a number is negative, then it is enclosed in parentheses.</p>
 * @return the string representation of this range
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : main
COMMENT : /** 
 * Main method.
 * @param args  command line arguments, ignored
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : suite
COMMENT : /** 
 * Return a new test suite containing this test case.
 * @return a new test suite containing this test case
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceSimple
COMMENT : /** 
 * Tests simple key replace.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceSolo
COMMENT : /** 
 * Tests simple key replace.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceNoVariables
COMMENT : /** 
 * Tests replace with no variables.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceNull
COMMENT : /** 
 * Tests replace with null.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceEmpty
COMMENT : /** 
 * Tests replace with null.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceChangedMap
COMMENT : /** 
 * Tests key replace changing map after initialization (not recommended).
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceUnknownKey
COMMENT : /** 
 * Tests unknown key replace.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceAdjacentAtStart
COMMENT : /** 
 * Tests adjacent keys.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceAdjacentAtEnd
COMMENT : /** 
 * Tests adjacent keys.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceRecursive
COMMENT : /** 
 * Tests simple recursive replace.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceEscaping
COMMENT : /** 
 * Tests escaping.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceSoloEscaping
COMMENT : /** 
 * Tests escaping.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceComplexEscaping
COMMENT : /** 
 * Tests complex escaping.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceNoPefixNoSuffix
COMMENT : /** 
 * Tests when no prefix or suffix.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceIncompletePefix
COMMENT : /** 
 * Tests when no incomplete prefix.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplacePrefixNoSuffix
COMMENT : /** 
 * Tests when prefix but no suffix.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceNoPrefixSuffix
COMMENT : /** 
 * Tests when suffix but no prefix.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceEmptyKeys
COMMENT : /** 
 * Tests when no variable name.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceToIdentical
COMMENT : /** 
 * Tests replace creates output same as input.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testCyclicReplacement
COMMENT : /** 
 * Tests a cyclic replace operation. The cycle should be detected and cause an exception to be thrown.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplaceWeirdPattens
COMMENT : /** 
 * Tests interpolation with weird boundary patterns.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testReplacePartialString_noReplace
COMMENT : /** 
 * Tests simple key replace.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testResolveVariable
COMMENT : /** 
 * Tests protected.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testConstructorNoArgs
COMMENT : /** 
 * Tests constructor.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testConstructorMapPrefixSuffix
COMMENT : /** 
 * Tests constructor.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testConstructorMapFull
COMMENT : /** 
 * Tests constructor.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testGetSetEscape
COMMENT : /** 
 * Tests get set.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testGetSetPrefix
COMMENT : /** 
 * Tests get set.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testGetSetSuffix
COMMENT : /** 
 * Tests get set.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testStaticReplace
COMMENT : /** 
 * Tests static.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testStaticReplacePrefixSuffix
COMMENT : /** 
 * Tests static.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testStaticReplaceSystemProperties
COMMENT : /** 
 * Tests interpolation with system properties.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : doTestReplace
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : doTestNoReplace
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : NumberUtils
COMMENT : /** 
 * <p><code>NumberUtils</code> instances should NOT be constructed in standard programming. Instead, the class should be used as <code>NumberUtils.stringToInt("6");</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : stringToInt
COMMENT : /** 
 * <p>Convert a <code>String</code> to an <code>int</code>, returning <code>zero</code> if the conversion fails.</p>
 * @param str  the string to convert
 * @return the int represented by the string, or <code>zero</code> ifconversion fails
 */



PACKAGE : package org.apache.commons.lang;

NAME : stringToInt
COMMENT : /** 
 * <p>Convert a <code>String</code> to an <code>int</code>, returning a default value if the conversion fails.</p>
 * @param str  the string to convert
 * @param defaultValue  the default value
 * @return the int represented by the string, or the default if conversion fails
 */



PACKAGE : package org.apache.commons.lang;

NAME : createNumber
COMMENT : /** 
 * <p>Turns a string value into a java.lang.Number.</p> <p>First, the value is examined for a type qualifier on the end (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts  trying to create successively larger types from the type specified until one is found that can hold the value.</p> <p>If a type specifier is not found, it will check for a decimal point and then try successively larger types from <code>Integer</code> to <code>BigInteger</code> and from <code>Float</code> to <code>BigDecimal</code>.</p> <p>If the string starts with <code>0x</code> or <code>-0x</code>, it will be interpreted as a hexadecimal integer.  Values with leading <code>0</code>'s will not be interpreted as octal.</p>
 * @param val String containing a number
 * @return Number created from the string
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAllZeros
COMMENT : /** 
 * <p>Utility method for  {@link #createNumber(java.lang.String)}.</p> <p>Returns <code>true</code> if s is <code>null</code>.</p>
 * @param s the String to check
 * @return if it is all zeros or <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : createFloat
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>Float</code>.</p>
 * @param val  a <code>String</code> to convert
 * @return converted <code>Float</code>
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang;

NAME : createDouble
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>Double</code>.</p>
 * @param val  a <code>String</code> to convert
 * @return converted <code>Double</code>
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang;

NAME : createInteger
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>Integer</code>, handling hex and octal notations.</p>
 * @param val  a <code>String</code> to convert
 * @return converted <code>Integer</code>
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang;

NAME : createLong
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>Long</code>.</p>
 * @param val  a <code>String</code> to convert
 * @return converted <code>Long</code>
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang;

NAME : createBigInteger
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>BigInteger</code>.</p>
 * @param val  a <code>String</code> to convert
 * @return converted <code>BigInteger</code>
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang;

NAME : createBigDecimal
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>
 * @param val  a <code>String</code> to convert
 * @return converted <code>BigDecimal</code>
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang;

NAME : minimum
COMMENT : /** 
 * <p>Gets the minimum of three <code>long</code> values.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */



PACKAGE : package org.apache.commons.lang;

NAME : minimum
COMMENT : /** 
 * <p>Gets the minimum of three <code>int</code> values.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */



PACKAGE : package org.apache.commons.lang;

NAME : maximum
COMMENT : /** 
 * <p>Gets the maximum of three <code>long</code> values.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */



PACKAGE : package org.apache.commons.lang;

NAME : maximum
COMMENT : /** 
 * <p>Gets the maximum of three <code>int</code> values.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */



PACKAGE : package org.apache.commons.lang;

NAME : compare
COMMENT : /** 
 * <p>Compares two <code>doubles</code> for order.</p> <p>This method is more comprehensive than the standard Java greater than, less than and equals operators.</p> <ul> <li>It returns <code>-1</code> if the first value is less than the second. <li>It returns <code>+1</code> if the first value is greater than the second. <li>It returns <code>0</code> if the values are equal. </ul> <p> The ordering is as follows, largest to smallest: <ul> <li>NaN <li>Positive infinity <li>Maximum double <li>Normal positive numbers <li>+0.0 <li>-0.0 <li>Normal negative numbers <li>Minimum double (-Double.MAX_VALUE) <li>Negative infinity </ul> </p> <p>Comparing <code>NaN</code> with <code>NaN</code> will return <code>0</code>.</p>
 * @param lhs  the first <code>double</code>
 * @param rhs  the second <code>double</code>
 * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,<code>0</code> if equal to rhs
 */



PACKAGE : package org.apache.commons.lang;

NAME : compare
COMMENT : /** 
 * <p>Compares two floats for order.</p> <p>This method is more comprehensive than the standard Java greater than, less than and equals operators.</p> <ul> <li>It returns <code>-1</code> if the first value is less than the second. <li>It returns <code>+1</code> if the first value is greater than the second. <li>It returns <code>0</code> if the values are equal. </ul> <p> The ordering is as follows, largest to smallest: <ul> <li>NaN <li>Positive infinity <li>Maximum float <li>Normal positive numbers <li>+0.0 <li>-0.0 <li>Normal negative numbers <li>Minimum float (-Float.MAX_VALUE) <li>Negative infinity </ul> <p>Comparing <code>NaN</code> with <code>NaN</code> will return <code>0</code>.</p>
 * @param lhs  the first <code>float</code>
 * @param rhs  the second <code>float</code>
 * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,<code>0</code> if equal to rhs
 */



PACKAGE : package org.apache.commons.lang;

NAME : isDigits
COMMENT : /** 
 * <p>Checks whether the <code>String</code> contains only digit characters.</p> <p><code>Null</code> and empty String will return <code>false</code>.</p>
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if str contains only unicode numeric
 */



PACKAGE : package org.apache.commons.lang;

NAME : isNumber
COMMENT : /** 
 * <p>Checks whether the String a valid Java number.</p> <p>Valid numbers include hexadecimal marked with the <code>0x</code> qualifier, scientific notation and numbers marked with a type qualifier (e.g. 123L).</p> <p><code>Null</code> and empty String will return <code>false</code>.</p>
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : HashCodeBuilderTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testConstructorEx1
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testConstructorEx2
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHierarchyHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHierarchyHashCodeEx1
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHierarchyHashCodeEx2
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHashCodeEx1
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHashCodeEx2
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHashCodeEx3
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSuper
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testShort
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testChar
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testByte
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArrayAsObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArrayAsObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testIntArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testIntArrayAsObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testShortArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testShortArrayAsObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testCharArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testCharArrayAsObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testByteArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testByteArrayAsObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testDoubleArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testDoubleArrayAsObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFloatArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFloatArrayAsObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBooleanArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBooleanArrayAsObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBooleanMultiArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHashCodeExcludeFields
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionObjectCycle
COMMENT : /** 
 * Test Objects pointing to each other.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : hashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : hashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : equals
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setA
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : getA
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestSubObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestSubObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : equals
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestObjectWithMultipleFields
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : ExceptionUtilsTestCase
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : createExceptionWithoutCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : createExceptionWithCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testCauseMethodNameOps
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testCauseMethodNameOps
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetCause_Throwable
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetCause_ThrowableArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetRootCause_Throwable
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testSetCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testSetCauseToNull
COMMENT : /** 
 * Tests overriding a cause to <code>null</code>.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : testIsThrowableNested
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testIsNestedThrowable_Throwable
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowableCount_Throwable
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowables_Throwable_null
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowables_Throwable_withoutCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowables_Throwable_nested
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowables_Throwable_withCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowables_Throwable_jdkNoCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowables_Throwable_selfCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowables_Throwable_recursiveCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowableList_Throwable_null
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowableList_Throwable_withoutCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowableList_Throwable_nested
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowableList_Throwable_withCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowableList_Throwable_jdkNoCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowableList_Throwable_selfCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowableList_Throwable_recursiveCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testIndexOf_ThrowableClass
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testIndexOf_ThrowableClassInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testIndexOfType_ThrowableClass
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testIndexOfType_ThrowableClassInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testPrintRootCauseStackTrace_Throwable
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testPrintRootCauseStackTrace_ThrowableStream
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testPrintRootCauseStackTrace_ThrowableWriter
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetRootCauseStackTrace_Throwable
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testRemoveCommonFrames_ListList
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : test_getMessage_Throwable
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : test_getRootCauseMessage_Throwable
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : ExceptionWithCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : ExceptionWithCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : getCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : setCause
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : getTargetException
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : DateMetaFormat
COMMENT : /** 
 * Create a new DateMetaFormat.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : DateMetaFormat
COMMENT : /** 
 * Create a new DateMetaFormat.
 * @param locale the Locale to use
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : createSubformatInstance
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : Broken4OperationEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumClass
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : PlusOperation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : MinusOperation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : WordUtils
COMMENT : /** 
 * <p><code>WordUtils</code> instances should NOT be constructed in standard programming. Instead, the class should be used as <code>WordUtils.wrap("foo bar", 20);</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : wrap
COMMENT : /** 
 * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p> <p>New lines will be separated by the system property line separator. Very long words, such as URLs will <i>not</i> be wrapped.</p> <p>Leading spaces on a new line are stripped. Trailing spaces are not stripped.</p> <pre> WordUtils.wrap(null, *) = null WordUtils.wrap("", *) = "" </pre>
 * @param str  the String to be word wrapped, may be null
 * @param wrapLength  the column to wrap the words at, less than 1 is treated as 1
 * @return a line with newlines inserted, <code>null</code> if null input
 */



PACKAGE : package org.apache.commons.lang;

NAME : wrap
COMMENT : /** 
 * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p> <p>Leading spaces on a new line are stripped. Trailing spaces are not stripped.</p> <pre> WordUtils.wrap(null, *, *, *) = null WordUtils.wrap("", *, *, *) = "" </pre>
 * @param str  the String to be word wrapped, may be null
 * @param wrapLength  the column to wrap the words at, less than 1 is treated as 1
 * @param newLineStr  the string to insert for a new line, <code>null</code> uses the system property line separator
 * @param wrapLongWords  true if long words (such as URLs) should be wrapped
 * @return a line with newlines inserted, <code>null</code> if null input
 */



PACKAGE : package org.apache.commons.lang;

NAME : capitalize
COMMENT : /** 
 * <p>Capitalizes all the whitespace separated words in a String. Only the first letter of each word is changed. To convert the  rest of each word to lowercase at the same time,  use  {@link #capitalizeFully(String)}.</p> <p>Whitespace is defined by  {@link Character#isWhitespace(char)}. A <code>null</code> input String returns <code>null</code>. Capitalization uses the unicode title case, normally equivalent to upper case.</p> <pre> WordUtils.capitalize(null)        = null WordUtils.capitalize("")          = "" WordUtils.capitalize("i am FINE") = "I Am FINE" </pre>
 * @param str  the String to capitalize, may be null
 * @return capitalized String, <code>null</code> if null String input
 * @see #uncapitalize(String)
 * @see #capitalizeFully(String)
 */



PACKAGE : package org.apache.commons.lang;

NAME : capitalize
COMMENT : /** 
 * <p>Capitalizes all the delimiter separated words in a String. Only the first letter of each word is changed. To convert the  rest of each word to lowercase at the same time,  use  {@link #capitalizeFully(String,char[])}.</p> <p>The delimiters represent a set of characters understood to separate words. The first string character and the first non-delimiter character after a delimiter will be capitalized. </p> <p>A <code>null</code> input String returns <code>null</code>. Capitalization uses the unicode title case, normally equivalent to upper case.</p> <pre> WordUtils.capitalize(null, *)            = null WordUtils.capitalize("", *)              = "" WordUtils.capitalize(*, new char[0])     =  WordUtils.capitalize("i am fine", null)  = "I Am Fine" WordUtils.capitalize("i aM.fine", {'.'}) = "I aM.Fine" </pre>
 * @param str  the String to capitalize, may be null
 * @param delimiters  set of characters to determine capitalization, null means whitespace
 * @return capitalized String, <code>null</code> if null String input
 * @see #uncapitalize(String)
 * @see #capitalizeFully(String)
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : capitalizeFully
COMMENT : /** 
 * <p>Converts all the whitespace separated words in a String into capitalized words,  that is each word is made up of a titlecase character and then a series of  lowercase characters.  </p> <p>Whitespace is defined by  {@link Character#isWhitespace(char)}. A <code>null</code> input String returns <code>null</code>. Capitalization uses the unicode title case, normally equivalent to upper case.</p> <pre> WordUtils.capitalizeFully(null)        = null WordUtils.capitalizeFully("")          = "" WordUtils.capitalizeFully("i am FINE") = "I Am Fine" </pre>
 * @param str  the String to capitalize, may be null
 * @return capitalized String, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : capitalizeFully
COMMENT : /** 
 * <p>Converts all the delimiter separated words in a String into capitalized words,  that is each word is made up of a titlecase character and then a series of  lowercase characters. </p> <p>The delimiters represent a set of characters understood to separate words. The first string character and the first non-delimiter character after a delimiter will be capitalized. </p> <p>A <code>null</code> input String returns <code>null</code>. Capitalization uses the unicode title case, normally equivalent to upper case.</p> <pre> WordUtils.capitalizeFully(null, *)            = null WordUtils.capitalizeFully("", *)              = "" WordUtils.capitalizeFully(*, null)            =  WordUtils.capitalizeFully(*, new char[0])     =  WordUtils.capitalizeFully("i aM.fine", {'.'}) = "I am.Fine" </pre>
 * @param str  the String to capitalize, may be null
 * @param delimiters  set of characters to determine capitalization, null means whitespace
 * @return capitalized String, <code>null</code> if null String input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : uncapitalize
COMMENT : /** 
 * <p>Uncapitalizes all the whitespace separated words in a String. Only the first letter of each word is changed.</p> <p>Whitespace is defined by  {@link Character#isWhitespace(char)}. A <code>null</code> input String returns <code>null</code>.</p> <pre> WordUtils.uncapitalize(null)        = null WordUtils.uncapitalize("")          = "" WordUtils.uncapitalize("I Am FINE") = "i am fINE" </pre>
 * @param str  the String to uncapitalize, may be null
 * @return uncapitalized String, <code>null</code> if null String input
 * @see #capitalize(String)
 */



PACKAGE : package org.apache.commons.lang;

NAME : uncapitalize
COMMENT : /** 
 * <p>Uncapitalizes all the whitespace separated words in a String. Only the first letter of each word is changed.</p> <p>The delimiters represent a set of characters understood to separate words. The first string character and the first non-delimiter character after a delimiter will be uncapitalized. </p> <p>Whitespace is defined by  {@link Character#isWhitespace(char)}. A <code>null</code> input String returns <code>null</code>.</p> <pre> WordUtils.uncapitalize(null, *)            = null WordUtils.uncapitalize("", *)              = "" WordUtils.uncapitalize(*, null)            =  WordUtils.uncapitalize(*, new char[0])     =  WordUtils.uncapitalize("I AM.FINE", {'.'}) = "i AM.fINE" </pre>
 * @param str  the String to uncapitalize, may be null
 * @param delimiters  set of characters to determine uncapitalization, null means whitespace
 * @return uncapitalized String, <code>null</code> if null String input
 * @see #capitalize(String)
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : swapCase
COMMENT : /** 
 * <p>Swaps the case of a String using a word based algorithm.</p> <ul> <li>Upper case character converts to Lower case</li> <li>Title case character converts to Lower case</li> <li>Lower case character after Whitespace or at start converts to Title case</li> <li>Other Lower case character converts to Upper case</li> </ul> <p>Whitespace is defined by  {@link Character#isWhitespace(char)}. A <code>null</code> input String returns <code>null</code>.</p> <pre> StringUtils.swapCase(null)                 = null StringUtils.swapCase("")                   = "" StringUtils.swapCase("The dog has a BONE") = "tHE DOG HAS A bone" </pre>
 * @param str  the String to swap case, may be null
 * @return the changed String, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : initials
COMMENT : /** 
 * <p>Extracts the initial letters from each word in the String.</p> <p>The first letter of the string and all first letters after whitespace are returned as a new string. Their case is not changed.</p> <p>Whitespace is defined by  {@link Character#isWhitespace(char)}. A <code>null</code> input String returns <code>null</code>.</p> <pre> WordUtils.initials(null)             = null WordUtils.initials("")               = "" WordUtils.initials("Ben John Lee")   = "BJL" WordUtils.initials("Ben J.Lee")      = "BJ" </pre>
 * @param str  the String to get initials from, may be null
 * @return String of initial letters, <code>null</code> if null String input
 * @see #initials(String,char[])
 * @since 2.2
 */



PACKAGE : package org.apache.commons.lang;

NAME : initials
COMMENT : /** 
 * <p>Extracts the initial letters from each word in the String.</p> <p>The first letter of the string and all first letters after the defined delimiters are returned as a new string. Their case is not changed.</p> <p>If the delimiters array is null, then Whitespace is used. Whitespace is defined by  {@link Character#isWhitespace(char)}. A <code>null</code> input String returns <code>null</code>. An empty delimiter array returns an empty String.</p> <pre> WordUtils.initials(null, *)                = null WordUtils.initials("", *)                  = "" WordUtils.initials("Ben John Lee", null)   = "BJL" WordUtils.initials("Ben J.Lee", null)      = "BJ" WordUtils.initials("Ben J.Lee", [' ','.']) = "BJL" WordUtils.initials(*, new char[0])         = "" </pre>
 * @param str  the String to get initials from, may be null
 * @param delimiters  set of characters to determine words, null means whitespace
 * @return String of initial letters, <code>null</code> if null String input
 * @see #initials(String)
 * @since 2.2
 */



PACKAGE : package org.apache.commons.lang;

NAME : isDelimiter
COMMENT : /** 
 * Is the character a delimiter.
 * @param ch  the character to check
 * @param delimiters  the delimiters
 * @return true if it is a delimiter
 */



PACKAGE : package org.apache.commons.lang;

NAME : abbreviate
COMMENT : /** 
 * Abbreviates a string nicely. This method searches for the first space after the lower limit and abbreviates the String there. It will also append any String passed as a parameter to the end of the String. The upper limit can be specified to forcibly abbreviate a String.
 * @param str         the string to be abbreviated. If null is passed, null is returned.If the empty String is passed, the empty string is returned.
 * @param lower       the lower limit.
 * @param upper       the upper limit; specify -1 if no limit is desired.If the upper limit is lower than the lower limit, it will be adjusted to be the same as the lower limit.
 * @param appendToEnd String to be appended to the end of the abbreviated string.This is appended ONLY if the string was indeed abbreviated. The append does not count towards the lower or upper limits.
 * @return the abbreviated String.
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : getInstance
COMMENT : /** 
 * <p>Factory method to create a new CharSet using a special syntax.</p> <ul> <li><code>null</code> or empty string ("") - set containing no characters</li> <li>Single character, such as "a" - set containing just that character</li> <li>Multi character, such as "a-e" - set containing characters from one character to the other</li> <li>Negated, such as "^a" or "^a-e" - set containing all characters except those defined</li> <li>Combinations, such as "abe-g" - set containing all the characters from the individual sets</li> </ul> <p>The matching order is:</p> <ol> <li>Negated multi character range, such as "^a-e" <li>Ordinary multi character range, such as "a-e" <li>Negated single character, such as "^a" <li>Ordinary single character, such as "a" </ol> <p>Matching works left to right. Once a match is found the search starts again from the next character.</p> <p>If the same range is defined twice using the same syntax, only one range will be kept. Thus, "a-ca-c" creates only one range of "a-c".</p> <p>If the start and end of a range are in the wrong order, they are reversed. Thus "a-e" is the same as "e-a". As a result, "a-ee-a" would create only one range, as the "a-e" and "e-a" are the same.</p> <p>The set of characters represented is the union of the specified ranges.</p> <p>All CharSet objects returned by this method will be immutable.</p>
 * @param setStr  the String describing the set, may be null
 * @return a CharSet instance
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : getInstance
COMMENT : /** 
 * <p>Constructs a new CharSet using the set syntax. Each string is merged in with the set.</p>
 * @param setStrs  Strings to merge into the initial set, may be null
 * @return a CharSet instance
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : CharSet
COMMENT : /** 
 * <p>Constructs a new CharSet using the set syntax.</p>
 * @param setStr  the String describing the set, may be null
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : CharSet
COMMENT : /** 
 * <p>Constructs a new CharSet using the set syntax. Each string is merged in with the set.</p>
 * @param set  Strings to merge into the initial set
 * @throws NullPointerException if set is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : add
COMMENT : /** 
 * <p>Add a set definition string to the <code>CharSet</code>.</p>
 * @param str  set definition string
 */



PACKAGE : package org.apache.commons.lang;

NAME : getCharRanges
COMMENT : /** 
 * <p>Gets the internal set as an array of CharRange objects.</p>
 * @return an array of immutable CharRange objects
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Does the <code>CharSet</code> contain the specified character <code>ch</code>.</p>
 * @param ch  the character to check for
 * @return <code>true</code> if the set contains the characters
 */



PACKAGE : package org.apache.commons.lang;

NAME : equals
COMMENT : /** 
 * <p>Compares two CharSet objects, returning true if they represent exactly the same set of characters defined in the same way.</p> <p>The two sets <code>abc</code> and <code>a-c</code> are <i>not</i> equal according to this method.</p>
 * @param obj  the object to compare to
 * @return true if equal
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : hashCode
COMMENT : /** 
 * <p>Gets a hashCode compatible with the equals method.</p>
 * @return a suitable hashCode
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : toString
COMMENT : /** 
 * <p>Gets a string representation of the set.</p>
 * @return string representation of the set
 */



PACKAGE : package org.apache.commons.lang;

NAME : RandomStringUtilsTest
COMMENT : /** 
 * Construct a new instance of RandomStringUtilsTest with the specified name
 */



PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : /** 
 * Set up instance variables required by this test case.
 */



PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : /** 
 * Tear down instance variables required by this test case.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRandomStringUtils
COMMENT : /** 
 * Test the implementation
 */



PACKAGE : package org.apache.commons.lang;

NAME : testExceptions
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRandomAlphaNumeric
COMMENT : /** 
 * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7
 */



PACKAGE : package org.apache.commons.lang;

NAME : testRandomNumeric
COMMENT : /** 
 * Make sure '0' and '9' are generated by randomNumeric This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46
 */



PACKAGE : package org.apache.commons.lang;

NAME : testRandomAlphabetic
COMMENT : /** 
 * Make sure boundary alpha characters are generated by randomAlphabetic This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8
 */



PACKAGE : package org.apache.commons.lang;

NAME : testRandomAscii
COMMENT : /** 
 * Make sure 32 and 127 are generated by randomNumeric This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5
 */



PACKAGE : package org.apache.commons.lang;

NAME : testRandomStringUtilsHomog
COMMENT : /** 
 * Test homogeneity of random strings generated -- i.e., test that characters show up with expected frequencies in generated strings.  Will fail randomly about 1 in 1000 times. Repeated failures indicate a problem.
 */



PACKAGE : package org.apache.commons.lang;

NAME : chiSquare
COMMENT : /** 
 * Computes Chi-Square statistic given observed and expected counts
 * @param observed array of observed frequency counts
 * @param expected array of expected frequency counts
 */



PACKAGE : package org.apache.commons.lang;

NAME : testLang100
COMMENT : /** 
 * Checks if the string got by  {@link RandomStringUtils#random(int)}can be converted to UTF-8 and back without loss.
 * @author stefanhoehne@fastmail.fm
 * @throws Exception
 */



PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : getIntegerNumberFormat
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testFormatNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testParseNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testFormatDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testParseDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testFormatObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testParseGarbage
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : GuardedFormat
COMMENT : /** 
 * Create a new MultiFormatTest.GuardedFormat.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : format
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : parseObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : AbstractRangeTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testGetMinimum
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testGetMaximum
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsInteger
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testOverlapsRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : createRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : createRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : doubleValue
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : floatValue
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : intValue
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : longValue
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : ValuedEnum
COMMENT : /** 
 * Constructor for enum item.
 * @param name  the name of enum item
 * @param value  the value of enum item
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : /** 
 * <p>Gets an <code>Enum</code> object by class and value.</p> <p>This method loops through the list of <code>Enum</code>, thus if there are many <code>Enum</code>s this will be slow.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @param value  the value of the <code>Enum</code> to get
 * @return the enum object, or null if the enum does not exist
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getValue
COMMENT : /** 
 * <p>Get value of enum item.</p>
 * @return the enum item's value.
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : compareTo
COMMENT : /** 
 * <p>Tests for order.</p> <p>The default ordering is numeric by value, but this can be overridden by subclasses.</p> <p>NOTE: From v2.2 the enums must be of the same type. If the parameter is in a different class loader than this instance, reflection is used to compare the values.</p>
 * @see java.lang.Comparable#compareTo(Object)
 * @param other  the other object to compare to
 * @return -ve if this is less than the other object, +ve if greater than,<code>0</code> of equal
 * @throws ClassCastException if other is not an <code>Enum</code>
 * @throws NullPointerException if other is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getValueInOtherClassLoader
COMMENT : /** 
 * <p>Use reflection to return an objects value.</p>
 * @param other  the object to determine the value for
 * @return the value
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : toString
COMMENT : /** 
 * <p>Human readable description of this <code>Enum</code> item.</p>
 * @return String in the form <code>type[name=value]</code>, for example:<code>JavaVersion[Java 1.0=100]</code>. Note that the package name is stripped from the type name.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableObjectTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testConstructors
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testGetSet
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testParseCVS
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertEquals
COMMENT : /** 
 * Used to check that Calendar objects are close enough delta is in milliseconds
 */



PACKAGE : null
NAME : NestReferenced
COMMENT : null


PACKAGE : null
NAME : ColorEnum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : DateFormatUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testFormat
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testFormatCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testFormatUTC
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testDateTimeISO
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testDateISO
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testTimeISO
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testTimeNoTISO
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSMTP
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : NumberRange
COMMENT : /** 
 * <p>Constructs a new <code>NumberRange</code> using the specified number as both the minimum and maximum in this range.</p>
 * @param num the number to use for this range
 * @throws IllegalArgumentException if the number is <code>null</code>
 * @throws IllegalArgumentException if the number doesn't implement <code>Comparable</code>
 * @throws IllegalArgumentException if the number is <code>Double.NaN</code> or <code>Float.NaN</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : NumberRange
COMMENT : /** 
 * <p>Constructs a new <code>NumberRange</code> with the specified minimum and maximum numbers (both inclusive).</p> <p>The arguments may be passed in the order (min,max) or (max,min). The {@link #getMinimumNumber()} and {@link #getMaximumNumber()} methods will return thecorrect value.</p> <p>This constructor is designed to be used with two <code>Number</code> objects of the same type. If two objects of different types are passed in, an exception is thrown.</p>
 * @param num1  first number that defines the edge of the range, inclusive
 * @param num2  second number that defines the edge of the range, inclusive
 * @throws IllegalArgumentException if either number is <code>null</code>
 * @throws IllegalArgumentException if the numbers are of different types
 * @throws IllegalArgumentException if the numbers don't implement <code>Comparable</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumNumber
COMMENT : /** 
 * <p>Returns the minimum number in this range.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumNumber
COMMENT : /** 
 * <p>Returns the maximum number in this range.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsNumber
COMMENT : /** 
 * <p>Tests whether the specified <code>number</code> occurs within this range.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param number  the number to test, may be <code>null</code>
 * @return <code>true</code> if the specified number occurs within this range
 * @throws IllegalArgumentException if the number is of a different type to the range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : equals
COMMENT : /** 
 * <p>Compares this range to another object to test if they are equal.</p>. <p>To be equal, the class, minimum and maximum must be equal.</p>
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : hashCode
COMMENT : /** 
 * <p>Gets a hashCode for the range.</p>
 * @return a hash code value for this object
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toString
COMMENT : /** 
 * <p>Gets the range as a <code>String</code>.</p> <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>
 * @return the <code>String</code> representation of this range
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableDelegate
COMMENT : /** 
 * Constructs a new <code>NestableDelegate</code> instance to manage the specified <code>Nestable</code>.
 * @param nestable the Nestable implementation (<i>must</i> extend{@link java.lang.Throwable})
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * Returns the error message of the <code>Throwable</code> in the chain of <code>Throwable</code>s at the specified index, numbered from 0.
 * @param index the index of the <code>Throwable</code> in the chain of <code>Throwable</code>s
 * @return the error message, or null if the <code>Throwable</code> at the specified index in the chain does notcontain a message
 * @throws IndexOutOfBoundsException if the <code>index</code> argument is negative or not less than the count of <code>Throwable</code>s in the chain
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * Returns the full message contained by the <code>Nestable</code> and any nested <code>Throwable</code>s.
 * @param baseMsg the base message to use when creating the full message. Should be generally be called via <code>nestableHelper.getMessage(super.getMessage())</code>, where <code>super</code> is an instance of  {@link java.lang.Throwable}.
 * @return The concatenated message for this and all nested <code>Throwable</code>s
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessages
COMMENT : /** 
 * Returns the error message of this and any nested <code>Throwable</code>s in an array of Strings, one element for each message. Any <code>Throwable</code> not containing a message is represented in the array by a null. This has the effect of cause the length of the returned array to be equal to the result of the {@link #getThrowableCount()} operation.
 * @return the error messages
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * Returns the <code>Throwable</code> in the chain of <code>Throwable</code>s at the specified index, numbered from 0.
 * @param index the index, numbered from 0, of the <code>Throwable</code> inthe chain of <code>Throwable</code>s
 * @return the <code>Throwable</code>
 * @throws IndexOutOfBoundsException if the <code>index</code> argument isnegative or not less than the count of <code>Throwable</code>s in the chain
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableCount
COMMENT : /** 
 * Returns the number of <code>Throwable</code>s contained in the <code>Nestable</code> contained by this delegate.
 * @return the throwable count
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowables
COMMENT : /** 
 * Returns this delegate's <code>Nestable</code> and any nested <code>Throwable</code>s in an array of <code>Throwable</code>s, one element for each <code>Throwable</code>.
 * @return the <code>Throwable</code>s
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * Returns the index, numbered from 0, of the first <code>Throwable</code> that matches the specified type, or a subclass, in the chain of <code>Throwable</code>s with an index greater than or equal to the specified index. The method returns -1 if the specified type is not found in the chain. <p> NOTE: From v2.1, we have clarified the <code>Nestable</code> interface such that this method matches subclasses. If you want to NOT match subclasses, please use {@link ExceptionUtils#indexOfThrowable(Throwable,Class,int)}(which is avaiable in all versions of lang). An alternative is to use the public static flag  {@link #matchSubclasses}on <code>NestableDelegate</code>, however this is not recommended.
 * @param type  the type to find, subclasses match, null returns -1
 * @param fromIndex the index, numbered from 0, of the starting position inthe chain to be searched
 * @return index of the first occurrence of the type in the chain, or -1 ifthe type is not found
 * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argumentis negative or not less than the count of <code>Throwable</code>s in the chain
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * Prints the stack trace of this exception the the standar error stream.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * Prints the stack trace of this exception to the specified stream.
 * @param out <code>PrintStream</code> to use for output.
 * @see #printStackTrace(PrintWriter)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * Prints the stack trace of this exception to the specified writer. If the Throwable class has a <code>getCause</code> method (i.e. running on jre1.4 or higher), this method just  uses Throwable's printStackTrace() method. Otherwise, generates the stack-trace, by taking into account the 'topDown' and  'trimStackFrames' parameters. The topDown and trimStackFrames  are set to 'true' by default (produces jre1.4-like stack trace).
 * @param out <code>PrintWriter</code> to use for output.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getStackFrames
COMMENT : /** 
 * Captures the stack trace associated with the specified <code>Throwable</code> object, decomposing it into a list of stack frames.
 * @param t The <code>Throwable</code>.
 * @return  An array of strings describing each stack frame.
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : trimStackFrames
COMMENT : /** 
 * Trims the stack frames. The first set is left untouched. The rest of the frames are truncated from the bottom by comparing with one just on top.
 * @param stacks The list containing String[] elements
 * @since 2.0
 */



PACKAGE : null
NAME : NestLinked
COMMENT : null


PACKAGE : null
NAME : ColorEnum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : main
COMMENT : /** 
 * Main method.
 * @param args  command line arguments, ignored
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : suite
COMMENT : /** 
 * Return a new test suite containing this test case.
 * @return a new test suite containing this test case
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrMatcherTest
COMMENT : /** 
 * Create a new test case with the specified name.
 * @param name  the name
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testCommaMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testTabMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testSpaceMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testSplitMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testTrimMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testSingleQuoteMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testDoubleQuoteMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testQuoteMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testNoneMatcher
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCharMatcher_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCharSetMatcher_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCharSetMatcher_charArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testStringMatcher_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testMatcherIndices
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableIntTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testConstructors
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testGetSet
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testEquals
COMMENT : /** 
 * @param numA must not be a 0 Integer; must not equal numC.
 * @param numB must equal numA; must not equal numC.
 * @param numC must not equal numA; must not equal numC.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testCompareTo
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testPrimitiveValues
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToInteger
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testIncrement
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testDecrement
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testAddValuePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testAddValueObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testSubtractValuePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testSubtractValueObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToString
COMMENT : null


PACKAGE : null
NAME : ColorEnum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : StringUtils
COMMENT : /** 
 * <p><code>StringUtils</code> instances should NOT be constructed in standard programming. Instead, the class should be used as <code>StringUtils.trim(" foo ");</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : isEmpty
COMMENT : /** 
 * <p>Checks if a String is empty ("") or null.</p> <pre> StringUtils.isEmpty(null)      = true StringUtils.isEmpty("")        = true StringUtils.isEmpty(" ")       = false StringUtils.isEmpty("bob")     = false StringUtils.isEmpty("  bob  ") = false </pre> <p>NOTE: This method changed in Lang version 2.0. It no longer trims the String. That functionality is available in isBlank().</p>
 * @param str  the String to check, may be null
 * @return <code>true</code> if the String is empty or null
 */



PACKAGE : package org.apache.commons.lang;

NAME : isNotEmpty
COMMENT : /** 
 * <p>Checks if a String is not empty ("") and not null.</p> <pre> StringUtils.isNotEmpty(null)      = false StringUtils.isNotEmpty("")        = false StringUtils.isNotEmpty(" ")       = true StringUtils.isNotEmpty("bob")     = true StringUtils.isNotEmpty("  bob  ") = true </pre>
 * @param str  the String to check, may be null
 * @return <code>true</code> if the String is not empty and not null
 */



PACKAGE : package org.apache.commons.lang;

NAME : isBlank
COMMENT : /** 
 * <p>Checks if a String is whitespace, empty ("") or null.</p> <pre> StringUtils.isBlank(null)      = true StringUtils.isBlank("")        = true StringUtils.isBlank(" ")       = true StringUtils.isBlank("bob")     = false StringUtils.isBlank("  bob  ") = false </pre>
 * @param str  the String to check, may be null
 * @return <code>true</code> if the String is null, empty or whitespace
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : isNotBlank
COMMENT : /** 
 * <p>Checks if a String is not empty (""), not null and not whitespace only.</p> <pre> StringUtils.isNotBlank(null)      = false StringUtils.isNotBlank("")        = false StringUtils.isNotBlank(" ")       = false StringUtils.isNotBlank("bob")     = true StringUtils.isNotBlank("  bob  ") = true </pre>
 * @param str  the String to check, may be null
 * @return <code>true</code> if the String isnot empty and not null and not whitespace
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : clean
COMMENT : /** 
 * <p>Removes control characters (char &lt;= 32) from both ends of this String, handling <code>null</code> by returning an empty String ("").</p> <pre> StringUtils.clean(null)          = "" StringUtils.clean("")            = "" StringUtils.clean("abc")         = "abc" StringUtils.clean("    abc    ") = "abc" StringUtils.clean("     ")       = "" </pre>
 * @see java.lang.String#trim()
 * @param str  the String to clean, may be null
 * @return the trimmed text, never <code>null</code>
 * @deprecated Use the clearer named {@link #trimToEmpty(String)}. Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : trim
COMMENT : /** 
 * <p>Removes control characters (char &lt;= 32) from both ends of this String, handling <code>null</code> by returning <code>null</code>.</p> <p>The String is trimmed using  {@link String#trim()}. Trim removes start and end characters &lt;= 32. To strip whitespace use  {@link #strip(String)}.</p> <p>To trim your choice of characters, use the {@link #strip(String,String)} methods.</p><pre> StringUtils.trim(null)          = null StringUtils.trim("")            = "" StringUtils.trim("     ")       = "" StringUtils.trim("abc")         = "abc" StringUtils.trim("    abc    ") = "abc" </pre>
 * @param str  the String to be trimmed, may be null
 * @return the trimmed string, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : trimToNull
COMMENT : /** 
 * <p>Removes control characters (char &lt;= 32) from both ends of this String returning <code>null</code> if the String is empty ("") after the trim or if it is <code>null</code>. <p>The String is trimmed using  {@link String#trim()}. Trim removes start and end characters &lt;= 32. To strip whitespace use  {@link #stripToNull(String)}.</p> <pre> StringUtils.trimToNull(null)          = null StringUtils.trimToNull("")            = null StringUtils.trimToNull("     ")       = null StringUtils.trimToNull("abc")         = "abc" StringUtils.trimToNull("    abc    ") = "abc" </pre>
 * @param str  the String to be trimmed, may be null
 * @return the trimmed String,<code>null</code> if only chars &lt;= 32, empty or null String input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : trimToEmpty
COMMENT : /** 
 * <p>Removes control characters (char &lt;= 32) from both ends of this String returning an empty String ("") if the String is empty ("") after the trim or if it is <code>null</code>. <p>The String is trimmed using  {@link String#trim()}. Trim removes start and end characters &lt;= 32. To strip whitespace use  {@link #stripToEmpty(String)}.</p> <pre> StringUtils.trimToEmpty(null)          = "" StringUtils.trimToEmpty("")            = "" StringUtils.trimToEmpty("     ")       = "" StringUtils.trimToEmpty("abc")         = "abc" StringUtils.trimToEmpty("    abc    ") = "abc" </pre>
 * @param str  the String to be trimmed, may be null
 * @return the trimmed String, or an empty String if <code>null</code> input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : strip
COMMENT : /** 
 * <p>Strips whitespace from the start and end of a String.</p> <p>This is similar to  {@link #trim(String)} but removes whitespace.Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>A <code>null</code> input String returns <code>null</code>.</p> <pre> StringUtils.strip(null)     = null StringUtils.strip("")       = "" StringUtils.strip("   ")    = "" StringUtils.strip("abc")    = "abc" StringUtils.strip("  abc")  = "abc" StringUtils.strip("abc  ")  = "abc" StringUtils.strip(" abc ")  = "abc" StringUtils.strip(" ab c ") = "ab c" </pre>
 * @param str  the String to remove whitespace from, may be null
 * @return the stripped String, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : stripToNull
COMMENT : /** 
 * <p>Strips whitespace from the start and end of a String  returning <code>null</code> if the String is empty ("") after the strip.</p> <p>This is similar to  {@link #trimToNull(String)} but removes whitespace.Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripToNull(null)     = null StringUtils.stripToNull("")       = null StringUtils.stripToNull("   ")    = null StringUtils.stripToNull("abc")    = "abc" StringUtils.stripToNull("  abc")  = "abc" StringUtils.stripToNull("abc  ")  = "abc" StringUtils.stripToNull(" abc ")  = "abc" StringUtils.stripToNull(" ab c ") = "ab c" </pre>
 * @param str  the String to be stripped, may be null
 * @return the stripped String,<code>null</code> if whitespace, empty or null String input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : stripToEmpty
COMMENT : /** 
 * <p>Strips whitespace from the start and end of a String  returning an empty String if <code>null</code> input.</p> <p>This is similar to  {@link #trimToEmpty(String)} but removes whitespace.Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripToEmpty(null)     = "" StringUtils.stripToEmpty("")       = "" StringUtils.stripToEmpty("   ")    = "" StringUtils.stripToEmpty("abc")    = "abc" StringUtils.stripToEmpty("  abc")  = "abc" StringUtils.stripToEmpty("abc  ")  = "abc" StringUtils.stripToEmpty(" abc ")  = "abc" StringUtils.stripToEmpty(" ab c ") = "ab c" </pre>
 * @param str  the String to be stripped, may be null
 * @return the trimmed String, or an empty String if <code>null</code> input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : strip
COMMENT : /** 
 * <p>Strips any of a set of characters from the start and end of a String. This is similar to  {@link String#trim()} but allows the charactersto be stripped to be controlled.</p> <p>A <code>null</code> input String returns <code>null</code>. An empty string ("") input returns the empty string.</p> <p>If the stripChars String is <code>null</code>, whitespace is stripped as defined by  {@link Character#isWhitespace(char)}. Alternatively use  {@link #strip(String)}.</p> <pre> StringUtils.strip(null, *)          = null StringUtils.strip("", *)            = "" StringUtils.strip("abc", null)      = "abc" StringUtils.strip("  abc", null)    = "abc" StringUtils.strip("abc  ", null)    = "abc" StringUtils.strip(" abc ", null)    = "abc" StringUtils.strip("  abcyx", "xyz") = "  abc" </pre>
 * @param str  the String to remove characters from, may be null
 * @param stripChars  the characters to remove, null treated as whitespace
 * @return the stripped String, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : stripStart
COMMENT : /** 
 * <p>Strips any of a set of characters from the start of a String.</p> <p>A <code>null</code> input String returns <code>null</code>. An empty string ("") input returns the empty string.</p> <p>If the stripChars String is <code>null</code>, whitespace is stripped as defined by  {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripStart(null, *)          = null StringUtils.stripStart("", *)            = "" StringUtils.stripStart("abc", "")        = "abc" StringUtils.stripStart("abc", null)      = "abc" StringUtils.stripStart("  abc", null)    = "abc" StringUtils.stripStart("abc  ", null)    = "abc  " StringUtils.stripStart(" abc ", null)    = "abc " StringUtils.stripStart("yxabc  ", "xyz") = "abc  " </pre>
 * @param str  the String to remove characters from, may be null
 * @param stripChars  the characters to remove, null treated as whitespace
 * @return the stripped String, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : stripEnd
COMMENT : /** 
 * <p>Strips any of a set of characters from the end of a String.</p> <p>A <code>null</code> input String returns <code>null</code>. An empty string ("") input returns the empty string.</p> <p>If the stripChars String is <code>null</code>, whitespace is stripped as defined by  {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripEnd(null, *)          = null StringUtils.stripEnd("", *)            = "" StringUtils.stripEnd("abc", "")        = "abc" StringUtils.stripEnd("abc", null)      = "abc" StringUtils.stripEnd("  abc", null)    = "  abc" StringUtils.stripEnd("abc  ", null)    = "abc" StringUtils.stripEnd(" abc ", null)    = " abc" StringUtils.stripEnd("  abcyx", "xyz") = "  abc" </pre>
 * @param str  the String to remove characters from, may be null
 * @param stripChars  the characters to remove, null treated as whitespace
 * @return the stripped String, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : stripAll
COMMENT : /** 
 * <p>Strips whitespace from the start and end of every String in an array. Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>A new array is returned each time, except for length zero. A <code>null</code> array will return <code>null</code>. An empty array will return itself. A <code>null</code> array entry will be ignored.</p> <pre> StringUtils.stripAll(null)             = null StringUtils.stripAll([])               = [] StringUtils.stripAll(["abc", "  abc"]) = ["abc", "abc"] StringUtils.stripAll(["abc  ", null])  = ["abc", null] </pre>
 * @param strs  the array to remove whitespace from, may be null
 * @return the stripped Strings, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : stripAll
COMMENT : /** 
 * <p>Strips any of a set of characters from the start and end of every String in an array.</p> Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>A new array is returned each time, except for length zero. A <code>null</code> array will return <code>null</code>. An empty array will return itself. A <code>null</code> array entry will be ignored. A <code>null</code> stripChars will strip whitespace as defined by {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripAll(null, *)                = null StringUtils.stripAll([], *)                  = [] StringUtils.stripAll(["abc", "  abc"], null) = ["abc", "abc"] StringUtils.stripAll(["abc  ", null], null)  = ["abc", null] StringUtils.stripAll(["abc  ", null], "yz")  = ["abc  ", null] StringUtils.stripAll(["yabcz", null], "yz")  = ["abc", null] </pre>
 * @param strs  the array to remove characters from, may be null
 * @param stripChars  the characters to remove, null treated as whitespace
 * @return the stripped Strings, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : equals
COMMENT : /** 
 * <p>Compares two Strings, returning <code>true</code> if they are equal.</p> <p><code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal. The comparison is case sensitive.</p> <pre> StringUtils.equals(null, null)   = true StringUtils.equals(null, "abc")  = false StringUtils.equals("abc", null)  = false StringUtils.equals("abc", "abc") = true StringUtils.equals("abc", "ABC") = false </pre>
 * @see java.lang.String#equals(Object)
 * @param str1  the first String, may be null
 * @param str2  the second String, may be null
 * @return <code>true</code> if the Strings are equal, case sensitive, orboth <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : equalsIgnoreCase
COMMENT : /** 
 * <p>Compares two Strings, returning <code>true</code> if they are equal ignoring the case.</p> <p><code>null</code>s are handled without exceptions. Two <code>null</code> references are considered equal. Comparison is case insensitive.</p> <pre> StringUtils.equalsIgnoreCase(null, null)   = true StringUtils.equalsIgnoreCase(null, "abc")  = false StringUtils.equalsIgnoreCase("abc", null)  = false StringUtils.equalsIgnoreCase("abc", "abc") = true StringUtils.equalsIgnoreCase("abc", "ABC") = true </pre>
 * @see java.lang.String#equalsIgnoreCase(String)
 * @param str1  the first String, may be null
 * @param str2  the second String, may be null
 * @return <code>true</code> if the Strings are equal, case insensitive, orboth <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the first index within a String, handling <code>null</code>. This method uses  {@link String#indexOf(int)}.</p> <p>A <code>null</code> or empty ("") String will return <code>-1</code>.</p> <pre> StringUtils.indexOf(null, *)         = -1 StringUtils.indexOf("", *)           = -1 StringUtils.indexOf("aabaabaa", 'a') = 0 StringUtils.indexOf("aabaabaa", 'b') = 2 </pre>
 * @param str  the String to check, may be null
 * @param searchChar  the character to find
 * @return the first index of the search character,-1 if no match or <code>null</code> string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the first index within a String from a start position, handling <code>null</code>. This method uses  {@link String#indexOf(int,int)}.</p> <p>A <code>null</code> or empty ("") String will return <code>-1</code>. A negative start position is treated as zero. A start position greater than the string length returns <code>-1</code>.</p> <pre> StringUtils.indexOf(null, *, *)          = -1 StringUtils.indexOf("", *, *)            = -1 StringUtils.indexOf("aabaabaa", 'b', 0)  = 2 StringUtils.indexOf("aabaabaa", 'b', 3)  = 5 StringUtils.indexOf("aabaabaa", 'b', 9)  = -1 StringUtils.indexOf("aabaabaa", 'b', -1) = 2 </pre>
 * @param str  the String to check, may be null
 * @param searchChar  the character to find
 * @param startPos  the start position, negative treated as zero
 * @return the first index of the search character,-1 if no match or <code>null</code> string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the first index within a String, handling <code>null</code>. This method uses  {@link String#indexOf(String)}.</p> <p>A <code>null</code> String will return <code>-1</code>.</p> <pre> StringUtils.indexOf(null, *)          = -1 StringUtils.indexOf(*, null)          = -1 StringUtils.indexOf("", "")           = 0 StringUtils.indexOf("aabaabaa", "a")  = 0 StringUtils.indexOf("aabaabaa", "b")  = 2 StringUtils.indexOf("aabaabaa", "ab") = 1 StringUtils.indexOf("aabaabaa", "")   = 0 </pre>
 * @param str  the String to check, may be null
 * @param searchStr  the String to find, may be null
 * @return the first index of the search String,-1 if no match or <code>null</code> string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : ordinalIndexOf
COMMENT : /** 
 * <p>Finds the n-th index within a String, handling <code>null</code>. This method uses  {@link String#indexOf(String)}.</p> <p>A <code>null</code> String will return <code>-1</code>.</p> <pre> StringUtils.ordinalIndexOf(null, *, *)          = -1 StringUtils.ordinalIndexOf(*, null, *)          = -1 StringUtils.ordinalIndexOf("", "", *)           = 0 StringUtils.ordinalIndexOf("aabaabaa", "a", 1)  = 0 StringUtils.ordinalIndexOf("aabaabaa", "a", 2)  = 1 StringUtils.ordinalIndexOf("aabaabaa", "b", 1)  = 2 StringUtils.ordinalIndexOf("aabaabaa", "b", 2)  = 5 StringUtils.ordinalIndexOf("aabaabaa", "ab", 1) = 1 StringUtils.ordinalIndexOf("aabaabaa", "ab", 2) = 4 StringUtils.ordinalIndexOf("aabaabaa", "", 1)   = 0 StringUtils.ordinalIndexOf("aabaabaa", "", 2)   = 0 </pre>
 * @param str  the String to check, may be null
 * @param searchStr  the String to find, may be null
 * @param ordinal  the n-th <code>searchStr</code> to find
 * @return the n-th index of the search String,<code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOf
COMMENT : /** 
 * <p>Finds the first index within a String, handling <code>null</code>. This method uses  {@link String#indexOf(String,int)}.</p> <p>A <code>null</code> String will return <code>-1</code>. A negative start position is treated as zero. An empty ("") search String always matches. A start position greater than the string length only matches an empty search String.</p> <pre> StringUtils.indexOf(null, *, *)          = -1 StringUtils.indexOf(*, null, *)          = -1 StringUtils.indexOf("", "", 0)           = 0 StringUtils.indexOf("aabaabaa", "a", 0)  = 0 StringUtils.indexOf("aabaabaa", "b", 0)  = 2 StringUtils.indexOf("aabaabaa", "ab", 0) = 1 StringUtils.indexOf("aabaabaa", "b", 3)  = 5 StringUtils.indexOf("aabaabaa", "b", 9)  = -1 StringUtils.indexOf("aabaabaa", "b", -1) = 2 StringUtils.indexOf("aabaabaa", "", 2)   = 2 StringUtils.indexOf("abc", "", 9)        = 3 </pre>
 * @param str  the String to check, may be null
 * @param searchStr  the String to find, may be null
 * @param startPos  the start position, negative treated as zero
 * @return the first index of the search String,-1 if no match or <code>null</code> string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index within a String, handling <code>null</code>. This method uses  {@link String#lastIndexOf(int)}.</p> <p>A <code>null</code> or empty ("") String will return <code>-1</code>.</p> <pre> StringUtils.lastIndexOf(null, *)         = -1 StringUtils.lastIndexOf("", *)           = -1 StringUtils.lastIndexOf("aabaabaa", 'a') = 7 StringUtils.lastIndexOf("aabaabaa", 'b') = 5 </pre>
 * @param str  the String to check, may be null
 * @param searchChar  the character to find
 * @return the last index of the search character,-1 if no match or <code>null</code> string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index within a String from a start position, handling <code>null</code>. This method uses  {@link String#lastIndexOf(int,int)}.</p> <p>A <code>null</code> or empty ("") String will return <code>-1</code>. A negative start position returns <code>-1</code>. A start position greater than the string length searches the whole string.</p> <pre> StringUtils.lastIndexOf(null, *, *)          = -1 StringUtils.lastIndexOf("", *,  *)           = -1 StringUtils.lastIndexOf("aabaabaa", 'b', 8)  = 5 StringUtils.lastIndexOf("aabaabaa", 'b', 4)  = 2 StringUtils.lastIndexOf("aabaabaa", 'b', 0)  = -1 StringUtils.lastIndexOf("aabaabaa", 'b', 9)  = 5 StringUtils.lastIndexOf("aabaabaa", 'b', -1) = -1 StringUtils.lastIndexOf("aabaabaa", 'a', 0)  = 0 </pre>
 * @param str  the String to check, may be null
 * @param searchChar  the character to find
 * @param startPos  the start position
 * @return the last index of the search character,-1 if no match or <code>null</code> string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the last index within a String, handling <code>null</code>. This method uses  {@link String#lastIndexOf(String)}.</p> <p>A <code>null</code> String will return <code>-1</code>.</p> <pre> StringUtils.lastIndexOf(null, *)          = -1 StringUtils.lastIndexOf(*, null)          = -1 StringUtils.lastIndexOf("", "")           = 0 StringUtils.lastIndexOf("aabaabaa", "a")  = 0 StringUtils.lastIndexOf("aabaabaa", "b")  = 2 StringUtils.lastIndexOf("aabaabaa", "ab") = 1 StringUtils.lastIndexOf("aabaabaa", "")   = 8 </pre>
 * @param str  the String to check, may be null
 * @param searchStr  the String to find, may be null
 * @return the last index of the search String,-1 if no match or <code>null</code> string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOf
COMMENT : /** 
 * <p>Finds the first index within a String, handling <code>null</code>. This method uses  {@link String#lastIndexOf(String,int)}.</p> <p>A <code>null</code> String will return <code>-1</code>. A negative start position returns <code>-1</code>. An empty ("") search String always matches unless the start position is negative. A start position greater than the string length searches the whole string.</p> <pre> StringUtils.lastIndexOf(null, *, *)          = -1 StringUtils.lastIndexOf(*, null, *)          = -1 StringUtils.lastIndexOf("aabaabaa", "a", 8)  = 7 StringUtils.lastIndexOf("aabaabaa", "b", 8)  = 5 StringUtils.lastIndexOf("aabaabaa", "ab", 8) = 4 StringUtils.lastIndexOf("aabaabaa", "b", 9)  = 5 StringUtils.lastIndexOf("aabaabaa", "b", -1) = -1 StringUtils.lastIndexOf("aabaabaa", "a", 0)  = 0 StringUtils.lastIndexOf("aabaabaa", "b", 0)  = -1 </pre>
 * @param str  the String to check, may be null
 * @param searchStr  the String to find, may be null
 * @param startPos  the start position, negative treated as zero
 * @return the first index of the search String,-1 if no match or <code>null</code> string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Checks if String contains a search character, handling <code>null</code>. This method uses  {@link String#indexOf(int)}.</p> <p>A <code>null</code> or empty ("") String will return <code>false</code>.</p> <pre> StringUtils.contains(null, *)    = false StringUtils.contains("", *)      = false StringUtils.contains("abc", 'a') = true StringUtils.contains("abc", 'z') = false </pre>
 * @param str  the String to check, may be null
 * @param searchChar  the character to find
 * @return true if the String contains the search character,false if not or <code>null</code> string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Checks if String contains a search String, handling <code>null</code>. This method uses  {@link String#indexOf(String)}.</p> <p>A <code>null</code> String will return <code>false</code>.</p> <pre> StringUtils.contains(null, *)     = false StringUtils.contains(*, null)     = false StringUtils.contains("", "")      = true StringUtils.contains("abc", "")   = true StringUtils.contains("abc", "a")  = true StringUtils.contains("abc", "z")  = false </pre>
 * @param str  the String to check, may be null
 * @param searchStr  the String to find, may be null
 * @return true if the String contains the search String,false if not or <code>null</code> string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : containsIgnoreCase
COMMENT : /** 
 * <p>Checks if String contains a search String irrespective of case, handling <code>null</code>. This method uses {@link #contains(String,String)}.</p> <p>A <code>null</code> String will return <code>false</code>.</p> <pre> StringUtils.contains(null, *) = false StringUtils.contains(*, null) = false StringUtils.contains("", "") = true StringUtils.contains("abc", "") = true StringUtils.contains("abc", "a") = true StringUtils.contains("abc", "z") = false StringUtils.contains("abc", "A") = true StringUtils.contains("abc", "Z") = false </pre>
 * @param str  the String to check, may be null
 * @param searchStr  the String to find, may be null
 * @return true if the String contains the search String irrespective ofcase or false if not or <code>null</code> string input
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOfAny
COMMENT : /** 
 * <p>Search a String to find the first index of any character in the given set of characters.</p> <p>A <code>null</code> String will return <code>-1</code>. A <code>null</code> or zero length search array will return <code>-1</code>.</p> <pre> StringUtils.indexOfAny(null, *)                = -1 StringUtils.indexOfAny("", *)                  = -1 StringUtils.indexOfAny(*, null)                = -1 StringUtils.indexOfAny(*, [])                  = -1 StringUtils.indexOfAny("zzabyycdxx",['z','a']) = 0 StringUtils.indexOfAny("zzabyycdxx",['b','y']) = 3 StringUtils.indexOfAny("aba", ['z'])           = -1 </pre>
 * @param str  the String to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the index of any of the chars, -1 if no match or null input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOfAny
COMMENT : /** 
 * <p>Search a String to find the first index of any character in the given set of characters.</p> <p>A <code>null</code> String will return <code>-1</code>. A <code>null</code> search string will return <code>-1</code>.</p> <pre> StringUtils.indexOfAny(null, *)            = -1 StringUtils.indexOfAny("", *)              = -1 StringUtils.indexOfAny(*, null)            = -1 StringUtils.indexOfAny(*, "")              = -1 StringUtils.indexOfAny("zzabyycdxx", "za") = 0 StringUtils.indexOfAny("zzabyycdxx", "by") = 3 StringUtils.indexOfAny("aba","z")          = -1 </pre>
 * @param str  the String to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the index of any of the chars, -1 if no match or null input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : containsAny
COMMENT : /** 
 * <p>Checks if the String contains any character in the given set of characters.</p> <p>A <code>null</code> String will return <code>false</code>. A <code>null</code> or zero length search array will return <code>false</code>.</p> <pre> StringUtils.containsAny(null, *)                = false StringUtils.containsAny("", *)                  = false StringUtils.containsAny(*, null)                = false StringUtils.containsAny(*, [])                  = false StringUtils.containsAny("zzabyycdxx",['z','a']) = true StringUtils.containsAny("zzabyycdxx",['b','y']) = true StringUtils.containsAny("aba", ['z'])           = false </pre>
 * @param str  the String to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the <code>true</code> if any of the chars are found,<code>false</code> if no match or null input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : containsAny
COMMENT : /** 
 * <p> Checks if the String contains any character in the given set of characters. </p> <p> A <code>null</code> String will return <code>false</code>. A <code>null</code> search string will return <code>false</code>. </p> <pre> StringUtils.containsAny(null, *)            = false StringUtils.containsAny("", *)              = false StringUtils.containsAny(*, null)            = false StringUtils.containsAny(*, "")              = false StringUtils.containsAny("zzabyycdxx", "za") = true StringUtils.containsAny("zzabyycdxx", "by") = true StringUtils.containsAny("aba","z")          = false </pre>
 * @param str the String to check, may be null
 * @param searchChars the chars to search for, may be null
 * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOfAnyBut
COMMENT : /** 
 * <p>Search a String to find the first index of any character not in the given set of characters.</p> <p>A <code>null</code> String will return <code>-1</code>. A <code>null</code> or zero length search array will return <code>-1</code>.</p> <pre> StringUtils.indexOfAnyBut(null, *)           = -1 StringUtils.indexOfAnyBut("", *)             = -1 StringUtils.indexOfAnyBut(*, null)           = -1 StringUtils.indexOfAnyBut(*, [])             = -1 StringUtils.indexOfAnyBut("zzabyycdxx",'za') = 3 StringUtils.indexOfAnyBut("zzabyycdxx", '')  = 0 StringUtils.indexOfAnyBut("aba", 'ab')       = -1 </pre>
 * @param str  the String to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the index of any of the chars, -1 if no match or null input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOfAnyBut
COMMENT : /** 
 * <p>Search a String to find the first index of any character not in the given set of characters.</p> <p>A <code>null</code> String will return <code>-1</code>. A <code>null</code> search string will return <code>-1</code>.</p> <pre> StringUtils.indexOfAnyBut(null, *)            = -1 StringUtils.indexOfAnyBut("", *)              = -1 StringUtils.indexOfAnyBut(*, null)            = -1 StringUtils.indexOfAnyBut(*, "")              = -1 StringUtils.indexOfAnyBut("zzabyycdxx", "za") = 3 StringUtils.indexOfAnyBut("zzabyycdxx", "")   = 0 StringUtils.indexOfAnyBut("aba","ab")         = -1 </pre>
 * @param str  the String to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the index of any of the chars, -1 if no match or null input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : containsOnly
COMMENT : /** 
 * <p>Checks if the String contains only certain characters.</p> <p>A <code>null</code> String will return <code>false</code>. A <code>null</code> valid character array will return <code>false</code>. An empty String ("") always returns <code>true</code>.</p> <pre> StringUtils.containsOnly(null, *)       = false StringUtils.containsOnly(*, null)       = false StringUtils.containsOnly("", *)         = true StringUtils.containsOnly("ab", '')      = false StringUtils.containsOnly("abab", 'abc') = true StringUtils.containsOnly("ab1", 'abc')  = false StringUtils.containsOnly("abz", 'abc')  = false </pre>
 * @param str  the String to check, may be null
 * @param valid  an array of valid chars, may be null
 * @return true if it only contains valid chars and is non-null
 */



PACKAGE : package org.apache.commons.lang;

NAME : containsOnly
COMMENT : /** 
 * <p>Checks if the String contains only certain characters.</p> <p>A <code>null</code> String will return <code>false</code>. A <code>null</code> valid character String will return <code>false</code>. An empty String ("") always returns <code>true</code>.</p> <pre> StringUtils.containsOnly(null, *)       = false StringUtils.containsOnly(*, null)       = false StringUtils.containsOnly("", *)         = true StringUtils.containsOnly("ab", "")      = false StringUtils.containsOnly("abab", "abc") = true StringUtils.containsOnly("ab1", "abc")  = false StringUtils.containsOnly("abz", "abc")  = false </pre>
 * @param str  the String to check, may be null
 * @param validChars  a String of valid chars, may be null
 * @return true if it only contains valid chars and is non-null
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : containsNone
COMMENT : /** 
 * <p>Checks that the String does not contain certain characters.</p> <p>A <code>null</code> String will return <code>true</code>. A <code>null</code> invalid character array will return <code>true</code>. An empty String ("") always returns true.</p> <pre> StringUtils.containsNone(null, *)       = true StringUtils.containsNone(*, null)       = true StringUtils.containsNone("", *)         = true StringUtils.containsNone("ab", '')      = true StringUtils.containsNone("abab", 'xyz') = true StringUtils.containsNone("ab1", 'xyz')  = true StringUtils.containsNone("abz", 'xyz')  = false </pre>
 * @param str  the String to check, may be null
 * @param invalidChars  an array of invalid chars, may be null
 * @return true if it contains none of the invalid chars, or is null
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : containsNone
COMMENT : /** 
 * <p>Checks that the String does not contain certain characters.</p> <p>A <code>null</code> String will return <code>true</code>. A <code>null</code> invalid character array will return <code>true</code>. An empty String ("") always returns true.</p> <pre> StringUtils.containsNone(null, *)       = true StringUtils.containsNone(*, null)       = true StringUtils.containsNone("", *)         = true StringUtils.containsNone("ab", "")      = true StringUtils.containsNone("abab", "xyz") = true StringUtils.containsNone("ab1", "xyz")  = true StringUtils.containsNone("abz", "xyz")  = false </pre>
 * @param str  the String to check, may be null
 * @param invalidChars  a String of invalid chars, may be null
 * @return true if it contains none of the invalid chars, or is null
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOfAny
COMMENT : /** 
 * <p>Find the first index of any of a set of potential substrings.</p> <p>A <code>null</code> String will return <code>-1</code>. A <code>null</code> or zero length search array will return <code>-1</code>. A <code>null</code> search array entry will be ignored, but a search array containing "" will return <code>0</code> if <code>str</code> is not null. This method uses  {@link String#indexOf(String)}.</p> <pre> StringUtils.indexOfAny(null, *)                     = -1 StringUtils.indexOfAny(*, null)                     = -1 StringUtils.indexOfAny(*, [])                       = -1 StringUtils.indexOfAny("zzabyycdxx", ["ab","cd"])   = 2 StringUtils.indexOfAny("zzabyycdxx", ["cd","ab"])   = 2 StringUtils.indexOfAny("zzabyycdxx", ["mn","op"])   = -1 StringUtils.indexOfAny("zzabyycdxx", ["zab","aby"]) = 1 StringUtils.indexOfAny("zzabyycdxx", [""])          = 0 StringUtils.indexOfAny("", [""])                    = 0 StringUtils.indexOfAny("", ["a"])                   = -1 </pre>
 * @param str  the String to check, may be null
 * @param searchStrs  the Strings to search for, may be null
 * @return the first index of any of the searchStrs in str, -1 if no match
 */



PACKAGE : package org.apache.commons.lang;

NAME : lastIndexOfAny
COMMENT : /** 
 * <p>Find the latest index of any of a set of potential substrings.</p> <p>A <code>null</code> String will return <code>-1</code>. A <code>null</code> search array will return <code>-1</code>. A <code>null</code> or zero length search array entry will be ignored, but a search array containing "" will return the length of <code>str</code> if <code>str</code> is not null. This method uses  {@link String#indexOf(String)}</p> <pre> StringUtils.lastIndexOfAny(null, *)                   = -1 StringUtils.lastIndexOfAny(*, null)                   = -1 StringUtils.lastIndexOfAny(*, [])                     = -1 StringUtils.lastIndexOfAny(*, [null])                 = -1 StringUtils.lastIndexOfAny("zzabyycdxx", ["ab","cd"]) = 6 StringUtils.lastIndexOfAny("zzabyycdxx", ["cd","ab"]) = 6 StringUtils.lastIndexOfAny("zzabyycdxx", ["mn","op"]) = -1 StringUtils.lastIndexOfAny("zzabyycdxx", ["mn","op"]) = -1 StringUtils.lastIndexOfAny("zzabyycdxx", ["mn",""])   = 10 </pre>
 * @param str  the String to check, may be null
 * @param searchStrs  the Strings to search for, may be null
 * @return the last index of any of the Strings, -1 if no match
 */



PACKAGE : package org.apache.commons.lang;

NAME : substring
COMMENT : /** 
 * <p>Gets a substring from the specified String avoiding exceptions.</p> <p>A negative start position can be used to start <code>n</code> characters from the end of the String.</p> <p>A <code>null</code> String will return <code>null</code>. An empty ("") String will return "".</p> <pre> StringUtils.substring(null, *)   = null StringUtils.substring("", *)     = "" StringUtils.substring("abc", 0)  = "abc" StringUtils.substring("abc", 2)  = "c" StringUtils.substring("abc", 4)  = "" StringUtils.substring("abc", -2) = "bc" StringUtils.substring("abc", -4) = "abc" </pre>
 * @param str  the String to get the substring from, may be null
 * @param start  the position to start from, negative meanscount back from the end of the String by this many characters
 * @return substring from start position, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : substring
COMMENT : /** 
 * <p>Gets a substring from the specified String avoiding exceptions.</p> <p>A negative start position can be used to start/end <code>n</code> characters from the end of the String.</p> <p>The returned substring starts with the character in the <code>start</code> position and ends before the <code>end</code> position. All position counting is zero-based -- i.e., to start at the beginning of the string use <code>start = 0</code>. Negative start and end positions can be used to specify offsets relative to the end of the String.</p> <p>If <code>start</code> is not strictly to the left of <code>end</code>, "" is returned.</p> <pre> StringUtils.substring(null, *, *)    = null StringUtils.substring("", * ,  *)    = ""; StringUtils.substring("abc", 0, 2)   = "ab" StringUtils.substring("abc", 2, 0)   = "" StringUtils.substring("abc", 2, 4)   = "c" StringUtils.substring("abc", 4, 6)   = "" StringUtils.substring("abc", 2, 2)   = "" StringUtils.substring("abc", -2, -1) = "b" StringUtils.substring("abc", -4, 2)  = "ab" </pre>
 * @param str  the String to get the substring from, may be null
 * @param start  the position to start from, negative meanscount back from the end of the String by this many characters
 * @param end  the position to end at (exclusive), negative meanscount back from the end of the String by this many characters
 * @return substring from start position to end positon,<code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : left
COMMENT : /** 
 * <p>Gets the leftmost <code>len</code> characters of a String.</p> <p>If <code>len</code> characters are not available, or the String is <code>null</code>, the String will be returned without an exception. An exception is thrown if len is negative.</p> <pre> StringUtils.left(null, *)    = null StringUtils.left(*, -ve)     = "" StringUtils.left("", *)      = "" StringUtils.left("abc", 0)   = "" StringUtils.left("abc", 2)   = "ab" StringUtils.left("abc", 4)   = "abc" </pre>
 * @param str  the String to get the leftmost characters from, may be null
 * @param len  the length of the required String, must be zero or positive
 * @return the leftmost characters, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : right
COMMENT : /** 
 * <p>Gets the rightmost <code>len</code> characters of a String.</p> <p>If <code>len</code> characters are not available, or the String is <code>null</code>, the String will be returned without an an exception. An exception is thrown if len is negative.</p> <pre> StringUtils.right(null, *)    = null StringUtils.right(*, -ve)     = "" StringUtils.right("", *)      = "" StringUtils.right("abc", 0)   = "" StringUtils.right("abc", 2)   = "bc" StringUtils.right("abc", 4)   = "abc" </pre>
 * @param str  the String to get the rightmost characters from, may be null
 * @param len  the length of the required String, must be zero or positive
 * @return the rightmost characters, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : mid
COMMENT : /** 
 * <p>Gets <code>len</code> characters from the middle of a String.</p> <p>If <code>len</code> characters are not available, the remainder of the String will be returned without an exception. If the String is <code>null</code>, <code>null</code> will be returned. An exception is thrown if len is negative.</p> <pre> StringUtils.mid(null, *, *)    = null StringUtils.mid(*, *, -ve)     = "" StringUtils.mid("", 0, *)      = "" StringUtils.mid("abc", 0, 2)   = "ab" StringUtils.mid("abc", 0, 4)   = "abc" StringUtils.mid("abc", 2, 4)   = "c" StringUtils.mid("abc", 4, 2)   = "" StringUtils.mid("abc", -2, 2)  = "ab" </pre>
 * @param str  the String to get the characters from, may be null
 * @param pos  the position to start from, negative treated as zero
 * @param len  the length of the required String, must be zero or positive
 * @return the middle characters, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : substringBefore
COMMENT : /** 
 * <p>Gets the substring before the first occurrence of a separator. The separator is not returned.</p> <p>A <code>null</code> string input will return <code>null</code>. An empty ("") string input will return the empty string. A <code>null</code> separator will return the input string.</p> <pre> StringUtils.substringBefore(null, *)      = null StringUtils.substringBefore("", *)        = "" StringUtils.substringBefore("abc", "a")   = "" StringUtils.substringBefore("abcba", "b") = "a" StringUtils.substringBefore("abc", "c")   = "ab" StringUtils.substringBefore("abc", "d")   = "abc" StringUtils.substringBefore("abc", "")    = "" StringUtils.substringBefore("abc", null)  = "abc" </pre>
 * @param str  the String to get a substring from, may be null
 * @param separator  the String to search for, may be null
 * @return the substring before the first occurrence of the separator,<code>null</code> if null String input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : substringAfter
COMMENT : /** 
 * <p>Gets the substring after the first occurrence of a separator. The separator is not returned.</p> <p>A <code>null</code> string input will return <code>null</code>. An empty ("") string input will return the empty string. A <code>null</code> separator will return the empty string if the input string is not <code>null</code>.</p> <pre> StringUtils.substringAfter(null, *)      = null StringUtils.substringAfter("", *)        = "" StringUtils.substringAfter(*, null)      = "" StringUtils.substringAfter("abc", "a")   = "bc" StringUtils.substringAfter("abcba", "b") = "cba" StringUtils.substringAfter("abc", "c")   = "" StringUtils.substringAfter("abc", "d")   = "" StringUtils.substringAfter("abc", "")    = "abc" </pre>
 * @param str  the String to get a substring from, may be null
 * @param separator  the String to search for, may be null
 * @return the substring after the first occurrence of the separator,<code>null</code> if null String input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : substringBeforeLast
COMMENT : /** 
 * <p>Gets the substring before the last occurrence of a separator. The separator is not returned.</p> <p>A <code>null</code> string input will return <code>null</code>. An empty ("") string input will return the empty string. An empty or <code>null</code> separator will return the input string.</p> <pre> StringUtils.substringBeforeLast(null, *)      = null StringUtils.substringBeforeLast("", *)        = "" StringUtils.substringBeforeLast("abcba", "b") = "abc" StringUtils.substringBeforeLast("abc", "c")   = "ab" StringUtils.substringBeforeLast("a", "a")     = "" StringUtils.substringBeforeLast("a", "z")     = "a" StringUtils.substringBeforeLast("a", null)    = "a" StringUtils.substringBeforeLast("a", "")      = "a" </pre>
 * @param str  the String to get a substring from, may be null
 * @param separator  the String to search for, may be null
 * @return the substring before the last occurrence of the separator,<code>null</code> if null String input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : substringAfterLast
COMMENT : /** 
 * <p>Gets the substring after the last occurrence of a separator. The separator is not returned.</p> <p>A <code>null</code> string input will return <code>null</code>. An empty ("") string input will return the empty string. An empty or <code>null</code> separator will return the empty string if the input string is not <code>null</code>.</p> <pre> StringUtils.substringAfterLast(null, *)      = null StringUtils.substringAfterLast("", *)        = "" StringUtils.substringAfterLast(*, "")        = "" StringUtils.substringAfterLast(*, null)      = "" StringUtils.substringAfterLast("abc", "a")   = "bc" StringUtils.substringAfterLast("abcba", "b") = "a" StringUtils.substringAfterLast("abc", "c")   = "" StringUtils.substringAfterLast("a", "a")     = "" StringUtils.substringAfterLast("a", "z")     = "" </pre>
 * @param str  the String to get a substring from, may be null
 * @param separator  the String to search for, may be null
 * @return the substring after the last occurrence of the separator,<code>null</code> if null String input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : substringBetween
COMMENT : /** 
 * <p>Gets the String that is nested in between two instances of the same String.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> tag returns <code>null</code>.</p> <pre> StringUtils.substringBetween(null, *)            = null StringUtils.substringBetween("", "")             = "" StringUtils.substringBetween("", "tag")          = null StringUtils.substringBetween("tagabctag", null)  = null StringUtils.substringBetween("tagabctag", "")    = "" StringUtils.substringBetween("tagabctag", "tag") = "abc" </pre>
 * @param str  the String containing the substring, may be null
 * @param tag  the String before and after the substring, may be null
 * @return the substring, <code>null</code> if no match
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : substringBetween
COMMENT : /** 
 * <p>Gets the String that is nested in between two Strings. Only the first match is returned.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> open/close returns <code>null</code> (no match). An empty ("") open and close returns an empty string.</p> <pre> StringUtils.substringBetween("wx[b]yz", "[", "]") = "b" StringUtils.substringBetween(null, *, *)          = null StringUtils.substringBetween(*, null, *)          = null StringUtils.substringBetween(*, *, null)          = null StringUtils.substringBetween("", "", "")          = "" StringUtils.substringBetween("", "", "]")         = null StringUtils.substringBetween("", "[", "]")        = null StringUtils.substringBetween("yabcz", "", "")     = "" StringUtils.substringBetween("yabcz", "y", "z")   = "abc" StringUtils.substringBetween("yabczyabcz", "y", "z")   = "abc" </pre>
 * @param str  the String containing the substring, may be null
 * @param open  the String before the substring, may be null
 * @param close  the String after the substring, may be null
 * @return the substring, <code>null</code> if no match
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : substringsBetween
COMMENT : /** 
 * <p>Searches a String for substrings delimited by a start and end tag, returning all matching substrings in an array.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> open/close returns <code>null</code> (no match). An empty ("") open/close returns <code>null</code> (no match).</p> <pre> StringUtils.substringsBetween("[a][b][c]", "[", "]") = ["a","b","c"] StringUtils.substringsBetween(null, *, *)            = null StringUtils.substringsBetween(*, null, *)            = null StringUtils.substringsBetween(*, *, null)            = null StringUtils.substringsBetween("", "[", "]")          = [] </pre>
 * @param str  the String containing the substrings, null returns null, empty returns empty
 * @param open  the String identifying the start of the substring, empty returns null
 * @param close  the String identifying the end of the substring, empty returns null
 * @return a String Array of substrings, or <code>null</code> if no match
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang;

NAME : getNestedString
COMMENT : /** 
 * <p>Gets the String that is nested in between two instances of the same String.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> tag returns <code>null</code>.</p> <pre> StringUtils.getNestedString(null, *)            = null StringUtils.getNestedString("", "")             = "" StringUtils.getNestedString("", "tag")          = null StringUtils.getNestedString("tagabctag", null)  = null StringUtils.getNestedString("tagabctag", "")    = "" StringUtils.getNestedString("tagabctag", "tag") = "abc" </pre>
 * @param str  the String containing nested-string, may be null
 * @param tag  the String before and after nested-string, may be null
 * @return the nested String, <code>null</code> if no match
 * @deprecated Use the better named {@link #substringBetween(String,String)}. Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : getNestedString
COMMENT : /** 
 * <p>Gets the String that is nested in between two Strings. Only the first match is returned.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> open/close returns <code>null</code> (no match). An empty ("") open/close returns an empty string.</p> <pre> StringUtils.getNestedString(null, *, *)          = null StringUtils.getNestedString("", "", "")          = "" StringUtils.getNestedString("", "", "tag")       = null StringUtils.getNestedString("", "tag", "tag")    = null StringUtils.getNestedString("yabcz", null, null) = null StringUtils.getNestedString("yabcz", "", "")     = "" StringUtils.getNestedString("yabcz", "y", "z")   = "abc" StringUtils.getNestedString("yabczyabcz", "y", "z")   = "abc" </pre>
 * @param str  the String containing nested-string, may be null
 * @param open  the String before nested-string, may be null
 * @param close  the String after nested-string, may be null
 * @return the nested String, <code>null</code> if no match
 * @deprecated Use the better named {@link #substringBetween(String,String,String)}. Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : split
COMMENT : /** 
 * <p>Splits the provided text into an array, using whitespace as the separator. Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.</p> <p>A <code>null</code> input String returns <code>null</code>.</p> <pre> StringUtils.split(null)       = null StringUtils.split("")         = [] StringUtils.split("abc def")  = ["abc", "def"] StringUtils.split("abc  def") = ["abc", "def"] StringUtils.split(" abc ")    = ["abc"] </pre>
 * @param str  the String to parse, may be null
 * @return an array of parsed Strings, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : split
COMMENT : /** 
 * <p>Splits the provided text into an array, separator specified. This is an alternative to using StringTokenizer.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.</p> <p>A <code>null</code> input String returns <code>null</code>.</p> <pre> StringUtils.split(null, *)         = null StringUtils.split("", *)           = [] StringUtils.split("a.b.c", '.')    = ["a", "b", "c"] StringUtils.split("a..b.c", '.')   = ["a", "b", "c"] StringUtils.split("a:b:c", '.')    = ["a:b:c"] StringUtils.split("a\tb\nc", null) = ["a", "b", "c"] StringUtils.split("a b c", ' ')    = ["a", "b", "c"] </pre>
 * @param str  the String to parse, may be null
 * @param separatorChar  the character used as the delimiter,<code>null</code> splits on whitespace
 * @return an array of parsed Strings, <code>null</code> if null String input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : split
COMMENT : /** 
 * <p>Splits the provided text into an array, separators specified. This is an alternative to using StringTokenizer.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> separatorChars splits on whitespace.</p> <pre> StringUtils.split(null, *)         = null StringUtils.split("", *)           = [] StringUtils.split("abc def", null) = ["abc", "def"] StringUtils.split("abc def", " ")  = ["abc", "def"] StringUtils.split("abc  def", " ") = ["abc", "def"] StringUtils.split("ab:cd:ef", ":") = ["ab", "cd", "ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separatorChars  the characters used as the delimiters,<code>null</code> splits on whitespace
 * @return an array of parsed Strings, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : split
COMMENT : /** 
 * <p>Splits the provided text into an array with a maximum length, separators specified.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as one separator.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> separatorChars splits on whitespace.</p> <p>If more than <code>max</code> delimited substrings are found, the last returned string includes all characters after the first <code>max - 1</code> returned strings (including separator characters).</p> <pre> StringUtils.split(null, *, *)            = null StringUtils.split("", *, *)              = [] StringUtils.split("ab de fg", null, 0)   = ["ab", "cd", "ef"] StringUtils.split("ab   de fg", null, 0) = ["ab", "cd", "ef"] StringUtils.split("ab:cd:ef", ":", 0)    = ["ab", "cd", "ef"] StringUtils.split("ab:cd:ef", ":", 2)    = ["ab", "cd:ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separatorChars  the characters used as the delimiters,<code>null</code> splits on whitespace
 * @param max  the maximum number of elements to include in thearray. A zero or negative value implies no limit
 * @return an array of parsed Strings, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitByWholeSeparator
COMMENT : /** 
 * <p>Splits the provided text into an array, separator string specified.</p> <p>The separator(s) will not be included in the returned String array. Adjacent separators are treated as one separator.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> separator splits on whitespace.</p> <pre> StringUtils.splitByWholeSeparator(null, *)               = null StringUtils.splitByWholeSeparator("", *)                 = [] StringUtils.splitByWholeSeparator("ab de fg", null)      = ["ab", "de", "fg"] StringUtils.splitByWholeSeparator("ab   de fg", null)    = ["ab", "de", "fg"] StringUtils.splitByWholeSeparator("ab:cd:ef", ":")       = ["ab", "cd", "ef"] StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-") = ["ab", "cd", "ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,<code>null</code> splits on whitespace
 * @return an array of parsed Strings, <code>null</code> if null String was input
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitByWholeSeparator
COMMENT : /** 
 * <p>Splits the provided text into an array, separator string specified. Returns a maximum of <code>max</code> substrings.</p> <p>The separator(s) will not be included in the returned String array. Adjacent separators are treated as one separator.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> separator splits on whitespace.</p> <pre> StringUtils.splitByWholeSeparator(null, *, *)               = null StringUtils.splitByWholeSeparator("", *, *)                 = [] StringUtils.splitByWholeSeparator("ab de fg", null, 0)      = ["ab", "de", "fg"] StringUtils.splitByWholeSeparator("ab   de fg", null, 0)    = ["ab", "de", "fg"] StringUtils.splitByWholeSeparator("ab:cd:ef", ":", 2)       = ["ab", "cd:ef"] StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-", 5) = ["ab", "cd", "ef"] StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-", 2) = ["ab", "cd-!-ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,<code>null</code> splits on whitespace
 * @param max  the maximum number of elements to include in the returnedarray. A zero or negative value implies no limit.
 * @return an array of parsed Strings, <code>null</code> if null String was input
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitByWholeSeparatorPreserveAllTokens
COMMENT : /** 
 * <p>Splits the provided text into an array, separator string specified. </p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> separator splits on whitespace.</p> <pre> StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *)               = null StringUtils.splitByWholeSeparatorPreserveAllTokens("", *)                 = [] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab de fg", null)      = ["ab", "de", "fg"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab   de fg", null)    = ["ab", "", "", "de", "fg"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab:cd:ef", ":")       = ["ab", "cd", "ef"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-") = ["ab", "cd", "ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,<code>null</code> splits on whitespace
 * @return an array of parsed Strings, <code>null</code> if null String was input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitByWholeSeparatorPreserveAllTokens
COMMENT : /** 
 * <p>Splits the provided text into an array, separator string specified. Returns a maximum of <code>max</code> substrings.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> separator splits on whitespace.</p> <pre> StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *, *)               = null StringUtils.splitByWholeSeparatorPreserveAllTokens("", *, *)                 = [] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab de fg", null, 0)      = ["ab", "de", "fg"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab   de fg", null, 0)    = ["ab", "", "", "de", "fg"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab:cd:ef", ":", 2)       = ["ab", "cd:ef"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-", 5) = ["ab", "cd", "ef"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-", 2) = ["ab", "cd-!-ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,<code>null</code> splits on whitespace
 * @param max  the maximum number of elements to include in the returnedarray. A zero or negative value implies no limit.
 * @return an array of parsed Strings, <code>null</code> if null String was input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitByWholeSeparatorWorker
COMMENT : /** 
 * Performs the logic for the <code>splitByWholeSeparatorPreserveAllTokens</code> methods.
 * @param str  the String to parse, may be <code>null</code>
 * @param separator  String containing the String to be used as a delimiter,<code>null</code> splits on whitespace
 * @param max  the maximum number of elements to include in the returnedarray. A zero or negative value implies no limit.
 * @param preserveAllTokens if <code>true</code>, adjacent separators aretreated as empty token separators; if <code>false</code>, adjacent separators are treated as one separator.
 * @return an array of parsed Strings, <code>null</code> if null String input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitPreserveAllTokens
COMMENT : /** 
 * <p>Splits the provided text into an array, using whitespace as the separator, preserving all tokens, including empty tokens created by  adjacent separators. This is an alternative to using StringTokenizer. Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A <code>null</code> input String returns <code>null</code>.</p> <pre> StringUtils.splitPreserveAllTokens(null)       = null StringUtils.splitPreserveAllTokens("")         = [] StringUtils.splitPreserveAllTokens("abc def")  = ["abc", "def"] StringUtils.splitPreserveAllTokens("abc  def") = ["abc", "", "def"] StringUtils.splitPreserveAllTokens(" abc ")    = ["", "abc", ""] </pre>
 * @param str  the String to parse, may be <code>null</code>
 * @return an array of parsed Strings, <code>null</code> if null String input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitPreserveAllTokens
COMMENT : /** 
 * <p>Splits the provided text into an array, separator specified, preserving all tokens, including empty tokens created by adjacent separators. This is an alternative to using StringTokenizer.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A <code>null</code> input String returns <code>null</code>.</p> <pre> StringUtils.splitPreserveAllTokens(null, *)         = null StringUtils.splitPreserveAllTokens("", *)           = [] StringUtils.splitPreserveAllTokens("a.b.c", '.')    = ["a", "b", "c"] StringUtils.splitPreserveAllTokens("a..b.c", '.')   = ["a", "", "b", "c"] StringUtils.splitPreserveAllTokens("a:b:c", '.')    = ["a:b:c"] StringUtils.splitPreserveAllTokens("a\tb\nc", null) = ["a", "b", "c"] StringUtils.splitPreserveAllTokens("a b c", ' ')    = ["a", "b", "c"] StringUtils.splitPreserveAllTokens("a b c ", ' ')   = ["a", "b", "c", ""] StringUtils.splitPreserveAllTokens("a b c  ", ' ')   = ["a", "b", "c", "", ""] StringUtils.splitPreserveAllTokens(" a b c", ' ')   = ["", a", "b", "c"] StringUtils.splitPreserveAllTokens("  a b c", ' ')  = ["", "", a", "b", "c"] StringUtils.splitPreserveAllTokens(" a b c ", ' ')  = ["", a", "b", "c", ""] </pre>
 * @param str  the String to parse, may be <code>null</code>
 * @param separatorChar  the character used as the delimiter,<code>null</code> splits on whitespace
 * @return an array of parsed Strings, <code>null</code> if null String input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitWorker
COMMENT : /** 
 * Performs the logic for the <code>split</code> and  <code>splitPreserveAllTokens</code> methods that do not return a maximum array length.
 * @param str  the String to parse, may be <code>null</code>
 * @param separatorChar the separate character
 * @param preserveAllTokens if <code>true</code>, adjacent separators aretreated as empty token separators; if <code>false</code>, adjacent separators are treated as one separator.
 * @return an array of parsed Strings, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitPreserveAllTokens
COMMENT : /** 
 * <p>Splits the provided text into an array, separators specified,  preserving all tokens, including empty tokens created by adjacent separators. This is an alternative to using StringTokenizer.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> separatorChars splits on whitespace.</p> <pre> StringUtils.splitPreserveAllTokens(null, *)           = null StringUtils.splitPreserveAllTokens("", *)             = [] StringUtils.splitPreserveAllTokens("abc def", null)   = ["abc", "def"] StringUtils.splitPreserveAllTokens("abc def", " ")    = ["abc", "def"] StringUtils.splitPreserveAllTokens("abc  def", " ")   = ["abc", "", def"] StringUtils.splitPreserveAllTokens("ab:cd:ef", ":")   = ["ab", "cd", "ef"] StringUtils.splitPreserveAllTokens("ab:cd:ef:", ":")  = ["ab", "cd", "ef", ""] StringUtils.splitPreserveAllTokens("ab:cd:ef::", ":") = ["ab", "cd", "ef", "", ""] StringUtils.splitPreserveAllTokens("ab::cd:ef", ":")  = ["ab", "", cd", "ef"] StringUtils.splitPreserveAllTokens(":cd:ef", ":")     = ["", cd", "ef"] StringUtils.splitPreserveAllTokens("::cd:ef", ":")    = ["", "", cd", "ef"] StringUtils.splitPreserveAllTokens(":cd:ef:", ":")    = ["", cd", "ef", ""] </pre>
 * @param str  the String to parse, may be <code>null</code>
 * @param separatorChars  the characters used as the delimiters,<code>null</code> splits on whitespace
 * @return an array of parsed Strings, <code>null</code> if null String input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitPreserveAllTokens
COMMENT : /** 
 * <p>Splits the provided text into an array with a maximum length, separators specified, preserving all tokens, including empty tokens  created by adjacent separators.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. Adjacent separators are treated as one separator.</p> <p>A <code>null</code> input String returns <code>null</code>. A <code>null</code> separatorChars splits on whitespace.</p> <p>If more than <code>max</code> delimited substrings are found, the last returned string includes all characters after the first <code>max - 1</code> returned strings (including separator characters).</p> <pre> StringUtils.splitPreserveAllTokens(null, *, *)            = null StringUtils.splitPreserveAllTokens("", *, *)              = [] StringUtils.splitPreserveAllTokens("ab de fg", null, 0)   = ["ab", "cd", "ef"] StringUtils.splitPreserveAllTokens("ab   de fg", null, 0) = ["ab", "cd", "ef"] StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 0)    = ["ab", "cd", "ef"] StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2)    = ["ab", "cd:ef"] StringUtils.splitPreserveAllTokens("ab   de fg", null, 2) = ["ab", "  de fg"] StringUtils.splitPreserveAllTokens("ab   de fg", null, 3) = ["ab", "", " de fg"] StringUtils.splitPreserveAllTokens("ab   de fg", null, 4) = ["ab", "", "", "de fg"] </pre>
 * @param str  the String to parse, may be <code>null</code>
 * @param separatorChars  the characters used as the delimiters,<code>null</code> splits on whitespace
 * @param max  the maximum number of elements to include in thearray. A zero or negative value implies no limit
 * @return an array of parsed Strings, <code>null</code> if null String input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitWorker
COMMENT : /** 
 * Performs the logic for the <code>split</code> and  <code>splitPreserveAllTokens</code> methods that return a maximum array  length.
 * @param str  the String to parse, may be <code>null</code>
 * @param separatorChars the separate character
 * @param max  the maximum number of elements to include in thearray. A zero or negative value implies no limit.
 * @param preserveAllTokens if <code>true</code>, adjacent separators aretreated as empty token separators; if <code>false</code>, adjacent separators are treated as one separator.
 * @return an array of parsed Strings, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitByCharacterType
COMMENT : /** 
 * <p>Splits a String by Character type as returned by <code>java.lang.Character.getType(char)</code>. Groups of contiguous characters of the same type are returned as complete tokens.  <pre> StringUtils.splitByCharacterType(null)         = null StringUtils.splitByCharacterType("")           = [] StringUtils.splitByCharacterType("ab de fg")   = ["ab", " ", "de", " ", "fg"] StringUtils.splitByCharacterType("ab   de fg") = ["ab", "   ", "de", " ", "fg"] StringUtils.splitByCharacterType("ab:cd:ef")   = ["ab", ":", "cd", ":", "ef"] StringUtils.splitByCharacterType("number5")    = ["number", "5"] StringUtils.splitByCharacterType("fooBar")     = ["foo", "B", "ar"] StringUtils.splitByCharacterType("foo200Bar")  = ["foo", "200", "B", "ar"] StringUtils.splitByCharacterType("ASFRules")   = ["ASFR", "ules"] </pre>
 * @param str the String to split, may be <code>null</code>
 * @return an array of parsed Strings, <code>null</code> if null String input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitByCharacterTypeCamelCase
COMMENT : /** 
 * <p>Splits a String by Character type as returned by <code>java.lang.Character.getType(char)</code>. Groups of contiguous characters of the same type are returned as complete tokens, with the following exception: the character of type <code>Character.UPPERCASE_LETTER</code>, if any, immediately preceding a token of type <code>Character.LOWERCASE_LETTER</code> will belong to the following token rather than to the preceding, if any, <code>Character.UPPERCASE_LETTER</code> token.  <pre> StringUtils.splitByCharacterTypeCamelCase(null)         = null StringUtils.splitByCharacterTypeCamelCase("")           = [] StringUtils.splitByCharacterTypeCamelCase("ab de fg")   = ["ab", " ", "de", " ", "fg"] StringUtils.splitByCharacterTypeCamelCase("ab   de fg") = ["ab", "   ", "de", " ", "fg"] StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef")   = ["ab", ":", "cd", ":", "ef"] StringUtils.splitByCharacterTypeCamelCase("number5")    = ["number", "5"] StringUtils.splitByCharacterTypeCamelCase("fooBar")     = ["foo", "Bar"] StringUtils.splitByCharacterTypeCamelCase("foo200Bar")  = ["foo", "200", "Bar"] StringUtils.splitByCharacterTypeCamelCase("ASFRules")   = ["ASF", "Rules"] </pre>
 * @param str the String to split, may be <code>null</code>
 * @return an array of parsed Strings, <code>null</code> if null String input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : splitByCharacterType
COMMENT : /** 
 * <p>Splits a String by Character type as returned by <code>java.lang.Character.getType(char)</code>. Groups of contiguous characters of the same type are returned as complete tokens, with the following exception: if <code>camelCase</code> is <code>true</code>, the character of type <code>Character.UPPERCASE_LETTER</code>, if any, immediately preceding a token of type <code>Character.LOWERCASE_LETTER</code> will belong to the following token rather than to the preceding, if any, <code>Character.UPPERCASE_LETTER</code> token. 
 * @param str the String to split, may be <code>null</code>
 * @param camelCase whether to use so-called "camel-case" for letter types
 * @return an array of parsed Strings, <code>null</code> if null String input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : concatenate
COMMENT : /** 
 * <p>Concatenates elements of an array into a single String. Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.concatenate(null)            = null StringUtils.concatenate([])              = "" StringUtils.concatenate([null])          = "" StringUtils.concatenate(["a", "b", "c"]) = "abc" StringUtils.concatenate([null, "", "a"]) = "a" </pre>
 * @param array  the array of values to concatenate, may be null
 * @return the concatenated String, <code>null</code> if null array input
 * @deprecated Use the better named {@link #join(Object[])} instead.Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : join
COMMENT : /** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No separator is added to the joined String. Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null)            = null StringUtils.join([])              = "" StringUtils.join([null])          = "" StringUtils.join(["a", "b", "c"]) = "abc" StringUtils.join([null, "", "a"]) = "a" </pre>
 * @param array  the array of values to join together, may be null
 * @return the joined String, <code>null</code> if null array input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : join
COMMENT : /** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join(["a", "b", "c"], ';')  = "a;b;c" StringUtils.join(["a", "b", "c"], null) = "abc" StringUtils.join([null, "", "a"], ';')  = ";;a" </pre>
 * @param array  the array of values to join together, may be null
 * @param separator  the separator character to use
 * @return the joined String, <code>null</code> if null array input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : join
COMMENT : /** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join(["a", "b", "c"], ';')  = "a;b;c" StringUtils.join(["a", "b", "c"], null) = "abc" StringUtils.join([null, "", "a"], ';')  = ";;a" </pre>
 * @param array  the array of values to join together, may be null
 * @param separator  the separator character to use
 * @param startIndex the first index to start joining from.  It isan error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It isan error to pass in an end index past the end of the array
 * @return the joined String, <code>null</code> if null array input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : join
COMMENT : /** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No delimiter is added before or after the list. A <code>null</code> separator is the same as an empty String (""). Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null, *)                = null StringUtils.join([], *)                  = "" StringUtils.join([null], *)              = "" StringUtils.join(["a", "b", "c"], "--")  = "a--b--c" StringUtils.join(["a", "b", "c"], null)  = "abc" StringUtils.join(["a", "b", "c"], "")    = "abc" StringUtils.join([null, "", "a"], ',')   = ",,a" </pre>
 * @param array  the array of values to join together, may be null
 * @param separator  the separator character to use, null treated as ""
 * @return the joined String, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : join
COMMENT : /** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No delimiter is added before or after the list. A <code>null</code> separator is the same as an empty String (""). Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null, *)                = null StringUtils.join([], *)                  = "" StringUtils.join([null], *)              = "" StringUtils.join(["a", "b", "c"], "--")  = "a--b--c" StringUtils.join(["a", "b", "c"], null)  = "abc" StringUtils.join(["a", "b", "c"], "")    = "abc" StringUtils.join([null, "", "a"], ',')   = ",,a" </pre>
 * @param array  the array of values to join together, may be null
 * @param separator  the separator character to use, null treated as ""
 * @param startIndex the first index to start joining from.  It isan error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It isan error to pass in an end index past the end of the array
 * @return the joined String, <code>null</code> if null array input
 */



PACKAGE : package org.apache.commons.lang;

NAME : join
COMMENT : /** 
 * <p>Joins the elements of the provided <code>Iterator</code> into a single String containing the provided elements.</p> <p>No delimiter is added before or after the list. Null objects or empty strings within the iteration are represented by empty strings.</p> <p>See the examples here:  {@link #join(Object[],char)}. </p>
 * @param iterator  the <code>Iterator</code> of values to join together, may be null
 * @param separator  the separator character to use
 * @return the joined String, <code>null</code> if null iterator input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : join
COMMENT : /** 
 * <p>Joins the elements of the provided <code>Iterator</code> into a single String containing the provided elements.</p> <p>No delimiter is added before or after the list. A <code>null</code> separator is the same as an empty String ("").</p> <p>See the examples here:  {@link #join(Object[],String)}. </p>
 * @param iterator  the <code>Iterator</code> of values to join together, may be null
 * @param separator  the separator character to use, null treated as ""
 * @return the joined String, <code>null</code> if null iterator input
 */



PACKAGE : package org.apache.commons.lang;

NAME : join
COMMENT : /** 
 * <p>Joins the elements of the provided <code>Collection</code> into a single String containing the provided elements.</p> <p>No delimiter is added before or after the list. Null objects or empty strings within the iteration are represented by empty strings.</p> <p>See the examples here:  {@link #join(Object[],char)}. </p>
 * @param collection  the <code>Collection</code> of values to join together, may be null
 * @param separator  the separator character to use
 * @return the joined String, <code>null</code> if null iterator input
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang;

NAME : join
COMMENT : /** 
 * <p>Joins the elements of the provided <code>Collection</code> into a single String containing the provided elements.</p> <p>No delimiter is added before or after the list. A <code>null</code> separator is the same as an empty String ("").</p> <p>See the examples here:  {@link #join(Object[],String)}. </p>
 * @param collection  the <code>Collection</code> of values to join together, may be null
 * @param separator  the separator character to use, null treated as ""
 * @return the joined String, <code>null</code> if null iterator input
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang;

NAME : deleteSpaces
COMMENT : /** 
 * <p>Deletes all 'space' characters from a String as defined by {@link Character#isSpace(char)}.</p> <p>This is the only StringUtils method that uses the <code>isSpace</code> definition. You are advised to use {@link #deleteWhitespace(String)} instead as whitespace is muchbetter localized.</p> <pre> StringUtils.deleteSpaces(null)           = null StringUtils.deleteSpaces("")             = "" StringUtils.deleteSpaces("abc")          = "abc" StringUtils.deleteSpaces(" \t  abc \n ") = "abc" StringUtils.deleteSpaces("ab  c")        = "abc" StringUtils.deleteSpaces("a\nb\tc     ") = "abc" </pre> <p>Spaces are defined as <code>{' ', '\t', '\r', '\n', '\b'}</code> in line with the deprecated <code>isSpace</code> method.</p>
 * @param str  the String to delete spaces from, may be null
 * @return the String without 'spaces', <code>null</code> if null String input
 * @deprecated Use the better localized {@link #deleteWhitespace(String)}. Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : deleteWhitespace
COMMENT : /** 
 * <p>Deletes all whitespaces from a String as defined by {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.deleteWhitespace(null)         = null StringUtils.deleteWhitespace("")           = "" StringUtils.deleteWhitespace("abc")        = "abc" StringUtils.deleteWhitespace("   ab  c  ") = "abc" </pre>
 * @param str  the String to delete whitespace from, may be null
 * @return the String without whitespaces, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeStart
COMMENT : /** 
 * <p>Removes a substring only if it is at the begining of a source string, otherwise returns the source string.</p> <p>A <code>null</code> source string will return <code>null</code>. An empty ("") source string will return the empty string. A <code>null</code> search string will return the source string.</p> <pre> StringUtils.removeStart(null, *)      = null StringUtils.removeStart("", *)        = "" StringUtils.removeStart(*, null)      =  StringUtils.removeStart("www.domain.com", "www.")   = "domain.com" StringUtils.removeStart("domain.com", "www.")       = "domain.com" StringUtils.removeStart("www.domain.com", "domain") = "www.domain.com" StringUtils.removeStart("abc", "")    = "abc" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for and remove, may be null
 * @return the substring with the string removed if found,<code>null</code> if null String input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeStartIgnoreCase
COMMENT : /** 
 * <p>Case insensitive removal of a substring if it is at the begining of a source string, otherwise returns the source string.</p> <p>A <code>null</code> source string will return <code>null</code>. An empty ("") source string will return the empty string. A <code>null</code> search string will return the source string.</p> <pre> StringUtils.removeStartIgnoreCase(null, *)      = null StringUtils.removeStartIgnoreCase("", *)        = "" StringUtils.removeStartIgnoreCase(*, null)      =  StringUtils.removeStartIgnoreCase("www.domain.com", "www.")   = "domain.com" StringUtils.removeStartIgnoreCase("www.domain.com", "WWW.")   = "domain.com" StringUtils.removeStartIgnoreCase("domain.com", "www.")       = "domain.com" StringUtils.removeStartIgnoreCase("www.domain.com", "domain") = "www.domain.com" StringUtils.removeStartIgnoreCase("abc", "")    = "abc" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for (case insensitive) and remove, may be null
 * @return the substring with the string removed if found,<code>null</code> if null String input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeEnd
COMMENT : /** 
 * <p>Removes a substring only if it is at the end of a source string, otherwise returns the source string.</p> <p>A <code>null</code> source string will return <code>null</code>. An empty ("") source string will return the empty string. A <code>null</code> search string will return the source string.</p> <pre> StringUtils.removeEnd(null, *)      = null StringUtils.removeEnd("", *)        = "" StringUtils.removeEnd(*, null)      =  StringUtils.removeEnd("www.domain.com", ".com.")  = "www.domain.com" StringUtils.removeEnd("www.domain.com", ".com")   = "www.domain" StringUtils.removeEnd("www.domain.com", "domain") = "www.domain.com" StringUtils.removeEnd("abc", "")    = "abc" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for and remove, may be null
 * @return the substring with the string removed if found,<code>null</code> if null String input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : removeEndIgnoreCase
COMMENT : /** 
 * <p>Case insensitive removal of a substring if it is at the end of a source string, otherwise returns the source string.</p> <p>A <code>null</code> source string will return <code>null</code>. An empty ("") source string will return the empty string. A <code>null</code> search string will return the source string.</p> <pre> StringUtils.removeEnd(null, *)      = null StringUtils.removeEnd("", *)        = "" StringUtils.removeEnd(*, null)      =  StringUtils.removeEnd("www.domain.com", ".com.")  = "www.domain.com." StringUtils.removeEnd("www.domain.com", ".com")   = "www.domain" StringUtils.removeEnd("www.domain.com", "domain") = "www.domain.com" StringUtils.removeEnd("abc", "")    = "abc" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for (case insensitive) and remove, may be null
 * @return the substring with the string removed if found,<code>null</code> if null String input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes all occurrences of a substring from within the source string.</p> <p>A <code>null</code> source string will return <code>null</code>. An empty ("") source string will return the empty string. A <code>null</code> remove string will return the source string. An empty ("") remove string will return the source string.</p> <pre> StringUtils.remove(null, *)        = null StringUtils.remove("", *)          = "" StringUtils.remove(*, null)        =  StringUtils.remove(*, "")          =  StringUtils.remove("queued", "ue") = "qd" StringUtils.remove("queued", "zz") = "queued" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for and remove, may be null
 * @return the substring with the string removed if found,<code>null</code> if null String input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes all occurrences of a character from within the source string.</p> <p>A <code>null</code> source string will return <code>null</code>. An empty ("") source string will return the empty string.</p> <pre> StringUtils.remove(null, *)       = null StringUtils.remove("", *)         = "" StringUtils.remove("queued", 'u') = "qeed" StringUtils.remove("queued", 'z') = "queued" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the char to search for and remove, may be null
 * @return the substring with the char removed if found,<code>null</code> if null String input
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : replaceOnce
COMMENT : /** 
 * <p>Replaces a String with another String inside a larger String, once.</p> <p>A <code>null</code> reference passed to this method is a no-op.</p> <pre> StringUtils.replaceOnce(null, *, *)        = null StringUtils.replaceOnce("", *, *)          = "" StringUtils.replaceOnce("any", null, *)    = "any" StringUtils.replaceOnce("any", *, null)    = "any" StringUtils.replaceOnce("any", "", *)      = "any" StringUtils.replaceOnce("aba", "a", null)  = "aba" StringUtils.replaceOnce("aba", "a", "")    = "ba" StringUtils.replaceOnce("aba", "a", "z")   = "zba" </pre>
 * @see #replace(String text,String repl,String with,int max)
 * @param text  text to search and replace in, may be null
 * @param repl  the String to search for, may be null
 * @param with  the String to replace with, may be null
 * @return the text with any replacements processed,<code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : replace
COMMENT : /** 
 * <p>Replaces all occurrences of a String within another String.</p> <p>A <code>null</code> reference passed to this method is a no-op.</p> <pre> StringUtils.replace(null, *, *)        = null StringUtils.replace("", *, *)          = "" StringUtils.replace("any", null, *)    = "any" StringUtils.replace("any", *, null)    = "any" StringUtils.replace("any", "", *)      = "any" StringUtils.replace("aba", "a", null)  = "aba" StringUtils.replace("aba", "a", "")    = "b" StringUtils.replace("aba", "a", "z")   = "zbz" </pre>
 * @see #replace(String text,String repl,String with,int max)
 * @param text  text to search and replace in, may be null
 * @param repl  the String to search for, may be null
 * @param with  the String to replace with, may be null
 * @return the text with any replacements processed,<code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : replace
COMMENT : /** 
 * <p>Replaces a String with another String inside a larger String, for the first <code>max</code> values of the search String.</p> <p>A <code>null</code> reference passed to this method is a no-op.</p> <pre> StringUtils.replace(null, *, *, *)         = null StringUtils.replace("", *, *, *)           = "" StringUtils.replace("any", null, *, *)     = "any" StringUtils.replace("any", *, null, *)     = "any" StringUtils.replace("any", "", *, *)       = "any" StringUtils.replace("any", *, *, 0)        = "any" StringUtils.replace("abaa", "a", null, -1) = "abaa" StringUtils.replace("abaa", "a", "", -1)   = "b" StringUtils.replace("abaa", "a", "z", 0)   = "abaa" StringUtils.replace("abaa", "a", "z", 1)   = "zbaa" StringUtils.replace("abaa", "a", "z", 2)   = "zbza" StringUtils.replace("abaa", "a", "z", -1)  = "zbzz" </pre>
 * @param text  text to search and replace in, may be null
 * @param repl  the String to search for, may be null
 * @param with  the String to replace with, may be null
 * @param max  maximum number of values to replace, or <code>-1</code> if no maximum
 * @return the text with any replacements processed,<code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : replaceEach
COMMENT : /** 
 * <p> Replaces all occurrences of Strings within another String. </p> <p> A <code>null</code> reference passed to this method is a no-op, or if any "search string" or "string to replace" is null, that replace will be ignored. This will not repeat. For repeating replaces, call the overloaded method. </p> <pre> StringUtils.replaceEach(null, *, *)        = null StringUtils.replaceEach("", *, *)          = "" StringUtils.replaceEach("aba", null, null) = "aba" StringUtils.replaceEach("aba", new String[0], null) = "aba" StringUtils.replaceEach("aba", null, new String[0]) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, null)  = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""})  = "b" StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"})  = "aba" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"})  = "wcte" (example of how it does not repeat) StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"})  = "dcte" </pre>
 * @param text text to search and replace in, no-op if null
 * @param repl the Strings to search for, no-op if null
 * @param with the Strings to replace with, no-op if null
 * @return the text with any replacements processed, <code>null</code> ifnull String input
 * @throws IndexOutOfBoundsException if the lengths of the arrays are not the same (null is ok, and/or size 0)
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : replaceEachRepeatedly
COMMENT : /** 
 * <p> Replaces all occurrences of Strings within another String. </p> <p> A <code>null</code> reference passed to this method is a no-op, or if any "search string" or "string to replace" is null, that replace will be ignored. This will not repeat. For repeating replaces, call the overloaded method. </p> <pre> StringUtils.replaceEach(null, *, *, *)        = null StringUtils.replaceEach("", *, *, *)          = "" StringUtils.replaceEach("aba", null, null, *) = "aba" StringUtils.replaceEach("aba", new String[0], null, *) = "aba" StringUtils.replaceEach("aba", null, new String[0], *) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, null, *)  = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}, *)  = "b" StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}, *)  = "aba" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}, *)  = "wcte" (example of how it repeats) StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, false)  = "dcte" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, true)  = "tcte" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, true)  = IllegalArgumentException StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, false)  = "dcabe" </pre>
 * @param text text to search and replace in, no-op if null
 * @param repl the Strings to search for, no-op if null
 * @param with the Strings to replace with, no-op if null
 * @return the text with any replacements processed, <code>null</code> ifnull String input
 * @throws IllegalArgumentException if the search is repeating and there is an endless loop due to outputs of one being inputs to another
 * @throws IndexOutOfBoundsException if the lengths of the arrays are not the same (null is ok, and/or size 0)
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : replaceEach
COMMENT : /** 
 * <p> Replaces all occurrences of Strings within another String. </p> <p> A <code>null</code> reference passed to this method is a no-op, or if any "search string" or "string to replace" is null, that replace will be ignored.  </p> <pre> StringUtils.replaceEach(null, *, *, *)        = null StringUtils.replaceEach("", *, *, *)          = "" StringUtils.replaceEach("aba", null, null, *) = "aba" StringUtils.replaceEach("aba", new String[0], null, *) = "aba" StringUtils.replaceEach("aba", null, new String[0], *) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, null, *)  = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}, *)  = "b" StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}, *)  = "aba" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}, *)  = "wcte" (example of how it repeats) StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, false)  = "dcte" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, true)  = "tcte" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, *)  = IllegalArgumentException </pre>
 * @param text text to search and replace in, no-op if null
 * @param repl the Strings to search for, no-op if null
 * @param with the Strings to replace with, no-op if null
 * @param timeToLive if less than 0 then there is a circular reference and endless loop
 * @return the text with any replacements processed, <code>null</code> ifnull String input
 * @throws IllegalArgumentException if the search is repeating and there is an endless loop due to outputs of one being inputs to another
 * @throws IndexOutOfBoundsException if the lengths of the arrays are not the same (null is ok, and/or size 0)
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : replaceChars
COMMENT : /** 
 * <p>Replaces all occurrences of a character in a String with another. This is a null-safe version of  {@link String#replace(char,char)}.</p> <p>A <code>null</code> string input returns <code>null</code>. An empty ("") string input returns an empty string.</p> <pre> StringUtils.replaceChars(null, *, *)        = null StringUtils.replaceChars("", *, *)          = "" StringUtils.replaceChars("abcba", 'b', 'y') = "aycya" StringUtils.replaceChars("abcba", 'z', 'y') = "abcba" </pre>
 * @param str  String to replace characters in, may be null
 * @param searchChar  the character to search for, may be null
 * @param replaceChar  the character to replace, may be null
 * @return modified String, <code>null</code> if null string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : replaceChars
COMMENT : /** 
 * <p>Replaces multiple characters in a String in one go. This method can also be used to delete characters.</p> <p>For example:<br /> <code>replaceChars(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;) = jelly</code>.</p> <p>A <code>null</code> string input returns <code>null</code>. An empty ("") string input returns an empty string. A null or empty set of search characters returns the input string.</p> <p>The length of the search characters should normally equal the length of the replace characters. If the search characters is longer, then the extra search characters are deleted. If the search characters is shorter, then the extra replace characters are ignored.</p> <pre> StringUtils.replaceChars(null, *, *)           = null StringUtils.replaceChars("", *, *)             = "" StringUtils.replaceChars("abc", null, *)       = "abc" StringUtils.replaceChars("abc", "", *)         = "abc" StringUtils.replaceChars("abc", "b", null)     = "ac" StringUtils.replaceChars("abc", "b", "")       = "ac" StringUtils.replaceChars("abcba", "bc", "yz")  = "ayzya" StringUtils.replaceChars("abcba", "bc", "y")   = "ayya" StringUtils.replaceChars("abcba", "bc", "yzx") = "ayzya" </pre>
 * @param str  String to replace characters in, may be null
 * @param searchChars  a set of characters to search for, may be null
 * @param replaceChars  a set of characters to replace, may be null
 * @return modified String, <code>null</code> if null string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : overlayString
COMMENT : /** 
 * <p>Overlays part of a String with another String.</p> <pre> StringUtils.overlayString(null, *, *, *)           = NullPointerException StringUtils.overlayString(*, null, *, *)           = NullPointerException StringUtils.overlayString("", "abc", 0, 0)         = "abc" StringUtils.overlayString("abcdef", null, 2, 4)    = "abef" StringUtils.overlayString("abcdef", "", 2, 4)      = "abef" StringUtils.overlayString("abcdef", "zzzz", 2, 4)  = "abzzzzef" StringUtils.overlayString("abcdef", "zzzz", 4, 2)  = "abcdzzzzcdef" StringUtils.overlayString("abcdef", "zzzz", -1, 4) = IndexOutOfBoundsException StringUtils.overlayString("abcdef", "zzzz", 2, 8)  = IndexOutOfBoundsException </pre>
 * @param text  the String to do overlaying in, may be null
 * @param overlay  the String to overlay, may be null
 * @param start  the position to start overlaying at, must be valid
 * @param end  the position to stop overlaying before, must be valid
 * @return overlayed String, <code>null</code> if null String input
 * @throws NullPointerException if text or overlay is null
 * @throws IndexOutOfBoundsException if either position is invalid
 * @deprecated Use better named {@link #overlay(String,String,int,int)} instead.Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : overlay
COMMENT : /** 
 * <p>Overlays part of a String with another String.</p> <p>A <code>null</code> string input returns <code>null</code>. A negative index is treated as zero. An index greater than the string length is treated as the string length. The start index is always the smaller of the two indices.</p> <pre> StringUtils.overlay(null, *, *, *)            = null StringUtils.overlay("", "abc", 0, 0)          = "abc" StringUtils.overlay("abcdef", null, 2, 4)     = "abef" StringUtils.overlay("abcdef", "", 2, 4)       = "abef" StringUtils.overlay("abcdef", "", 4, 2)       = "abef" StringUtils.overlay("abcdef", "zzzz", 2, 4)   = "abzzzzef" StringUtils.overlay("abcdef", "zzzz", 4, 2)   = "abzzzzef" StringUtils.overlay("abcdef", "zzzz", -1, 4)  = "zzzzef" StringUtils.overlay("abcdef", "zzzz", 2, 8)   = "abzzzz" StringUtils.overlay("abcdef", "zzzz", -2, -3) = "zzzzabcdef" StringUtils.overlay("abcdef", "zzzz", 8, 10)  = "abcdefzzzz" </pre>
 * @param str  the String to do overlaying in, may be null
 * @param overlay  the String to overlay, may be null
 * @param start  the position to start overlaying at
 * @param end  the position to stop overlaying before
 * @return overlayed String, <code>null</code> if null String input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : chomp
COMMENT : /** 
 * <p>Removes one newline from end of a String if it's there, otherwise leave it alone.  A newline is &quot;<code>\n</code>&quot;, &quot;<code>\r</code>&quot;, or &quot;<code>\r\n</code>&quot;.</p> <p>NOTE: This method changed in 2.0. It now more closely matches Perl chomp.</p> <pre> StringUtils.chomp(null)          = null StringUtils.chomp("")            = "" StringUtils.chomp("abc \r")      = "abc " StringUtils.chomp("abc\n")       = "abc" StringUtils.chomp("abc\r\n")     = "abc" StringUtils.chomp("abc\r\n\r\n") = "abc\r\n" StringUtils.chomp("abc\n\r")     = "abc\n" StringUtils.chomp("abc\n\rabc")  = "abc\n\rabc" StringUtils.chomp("\r")          = "" StringUtils.chomp("\n")          = "" StringUtils.chomp("\r\n")        = "" </pre>
 * @param str  the String to chomp a newline from, may be null
 * @return String without newline, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : chomp
COMMENT : /** 
 * <p>Removes <code>separator</code> from the end of <code>str</code> if it's there, otherwise leave it alone.</p> <p>NOTE: This method changed in version 2.0. It now more closely matches Perl chomp. For the previous behavior, use  {@link #substringBeforeLast(String,String)}. This method uses  {@link String#endsWith(String)}.</p> <pre> StringUtils.chomp(null, *)         = null StringUtils.chomp("", *)           = "" StringUtils.chomp("foobar", "bar") = "foo" StringUtils.chomp("foobar", "baz") = "foobar" StringUtils.chomp("foo", "foo")    = "" StringUtils.chomp("foo ", "foo")   = "foo " StringUtils.chomp(" foo", "foo")   = " " StringUtils.chomp("foo", "foooo")  = "foo" StringUtils.chomp("foo", "")       = "foo" StringUtils.chomp("foo", null)     = "foo" </pre>
 * @param str  the String to chomp from, may be null
 * @param separator  separator String, may be null
 * @return String without trailing separator, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : chompLast
COMMENT : /** 
 * <p>Remove any &quot;\n&quot; if and only if it is at the end of the supplied String.</p>
 * @param str  the String to chomp from, must not be null
 * @return String without chomped ending
 * @throws NullPointerException if str is <code>null</code>
 * @deprecated Use {@link #chomp(String)} instead.Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : chompLast
COMMENT : /** 
 * <p>Remove a value if and only if the String ends with that value.</p>
 * @param str  the String to chomp from, must not be null
 * @param sep  the String to chomp, must not be null
 * @return String without chomped ending
 * @throws NullPointerException if str or sep is <code>null</code>
 * @deprecated Use {@link #chomp(String,String)} instead.Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : getChomp
COMMENT : /** 
 * <p>Remove everything and return the last value of a supplied String, and everything after it from a String.</p>
 * @param str  the String to chomp from, must not be null
 * @param sep  the String to chomp, must not be null
 * @return String chomped
 * @throws NullPointerException if str or sep is <code>null</code>
 * @deprecated Use {@link #substringAfterLast(String,String)} instead(although this doesn't include the separator) Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : prechomp
COMMENT : /** 
 * <p>Remove the first value of a supplied String, and everything before it from a String.</p>
 * @param str  the String to chomp from, must not be null
 * @param sep  the String to chomp, must not be null
 * @return String without chomped beginning
 * @throws NullPointerException if str or sep is <code>null</code>
 * @deprecated Use {@link #substringAfter(String,String)} instead.Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : getPrechomp
COMMENT : /** 
 * <p>Remove and return everything before the first value of a supplied String from another String.</p>
 * @param str  the String to chomp from, must not be null
 * @param sep  the String to chomp, must not be null
 * @return String prechomped
 * @throws NullPointerException if str or sep is <code>null</code>
 * @deprecated Use {@link #substringBefore(String,String)} instead(although this doesn't include the separator). Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : chop
COMMENT : /** 
 * <p>Remove the last character from a String.</p> <p>If the String ends in <code>\r\n</code>, then remove both of them.</p> <pre> StringUtils.chop(null)          = null StringUtils.chop("")            = "" StringUtils.chop("abc \r")      = "abc " StringUtils.chop("abc\n")       = "abc" StringUtils.chop("abc\r\n")     = "abc" StringUtils.chop("abc")         = "ab" StringUtils.chop("abc\nabc")    = "abc\nab" StringUtils.chop("a")           = "" StringUtils.chop("\r")          = "" StringUtils.chop("\n")          = "" StringUtils.chop("\r\n")        = "" </pre>
 * @param str  the String to chop last character from, may be null
 * @return String without last character, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : chopNewline
COMMENT : /** 
 * <p>Removes <code>\n</code> from end of a String if it's there. If a <code>\r</code> precedes it, then remove that too.</p>
 * @param str  the String to chop a newline from, must not be null
 * @return String without newline
 * @throws NullPointerException if str is <code>null</code>
 * @deprecated Use {@link #chomp(String)} instead.Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : escape
COMMENT : /** 
 * <p>Escapes any values it finds into their String form.</p> <p>So a tab becomes the characters <code>'\\'</code> and <code>'t'</code>.</p> <p>As of Lang 2.0, this calls  {@link StringEscapeUtils#escapeJava(String)}behind the scenes. </p>
 * @see StringEscapeUtils#escapeJava(java.lang.String)
 * @param str String to escape values in
 * @return String with escaped values
 * @throws NullPointerException if str is <code>null</code>
 * @deprecated Use {@link StringEscapeUtils#escapeJava(String)}This method will be removed in Commons Lang 3.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : repeat
COMMENT : /** 
 * <p>Repeat a String <code>repeat</code> times to form a new String.</p> <pre> StringUtils.repeat(null, 2) = null StringUtils.repeat("", 0)   = "" StringUtils.repeat("", 2)   = "" StringUtils.repeat("a", 3)  = "aaa" StringUtils.repeat("ab", 2) = "abab" StringUtils.repeat("a", -2) = "" </pre>
 * @param str  the String to repeat, may be null
 * @param repeat  number of times to repeat str, negative treated as zero
 * @return a new String consisting of the original String repeated,<code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : padding
COMMENT : /** 
 * <p>Returns padding using the specified delimiter repeated to a given length.</p> <pre> StringUtils.padding(0, 'e')  = "" StringUtils.padding(3, 'e')  = "eee" StringUtils.padding(-2, 'e') = IndexOutOfBoundsException </pre> <p>Note: this method doesn't not support padding with <a href="http://www.unicode.org/glossary/#supplementary_character">Unicode Supplementary Characters</a> as they require a pair of <code>char</code>s to be represented. If you are needing to support full I18N of your applications consider using  {@link #repeat(String,int)} instead. </p>
 * @param repeat  number of times to repeat delim
 * @param padChar  character to repeat
 * @return String with repeated character
 * @throws IndexOutOfBoundsException if <code>repeat &lt; 0</code>
 * @see #repeat(String,int)
 */



PACKAGE : package org.apache.commons.lang;

NAME : rightPad
COMMENT : /** 
 * <p>Right pad a String with spaces (' ').</p> <p>The String is padded to the size of <code>size</code>.</p> <pre> StringUtils.rightPad(null, *)   = null StringUtils.rightPad("", 3)     = "   " StringUtils.rightPad("bat", 3)  = "bat" StringUtils.rightPad("bat", 5)  = "bat  " StringUtils.rightPad("bat", 1)  = "bat" StringUtils.rightPad("bat", -1) = "bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @return right padded String or original String if no padding is necessary,<code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : rightPad
COMMENT : /** 
 * <p>Right pad a String with a specified character.</p> <p>The String is padded to the size of <code>size</code>.</p> <pre> StringUtils.rightPad(null, *, *)     = null StringUtils.rightPad("", 3, 'z')     = "zzz" StringUtils.rightPad("bat", 3, 'z')  = "bat" StringUtils.rightPad("bat", 5, 'z')  = "batzz" StringUtils.rightPad("bat", 1, 'z')  = "bat" StringUtils.rightPad("bat", -1, 'z') = "bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @param padChar  the character to pad with
 * @return right padded String or original String if no padding is necessary,<code>null</code> if null String input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : rightPad
COMMENT : /** 
 * <p>Right pad a String with a specified String.</p> <p>The String is padded to the size of <code>size</code>.</p> <pre> StringUtils.rightPad(null, *, *)      = null StringUtils.rightPad("", 3, "z")      = "zzz" StringUtils.rightPad("bat", 3, "yz")  = "bat" StringUtils.rightPad("bat", 5, "yz")  = "batyz" StringUtils.rightPad("bat", 8, "yz")  = "batyzyzy" StringUtils.rightPad("bat", 1, "yz")  = "bat" StringUtils.rightPad("bat", -1, "yz") = "bat" StringUtils.rightPad("bat", 5, null)  = "bat  " StringUtils.rightPad("bat", 5, "")    = "bat  " </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @param padStr  the String to pad with, null or empty treated as single space
 * @return right padded String or original String if no padding is necessary,<code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : leftPad
COMMENT : /** 
 * <p>Left pad a String with spaces (' ').</p> <p>The String is padded to the size of <code>size<code>.</p> <pre> StringUtils.leftPad(null, *)   = null StringUtils.leftPad("", 3)     = "   " StringUtils.leftPad("bat", 3)  = "bat" StringUtils.leftPad("bat", 5)  = "  bat" StringUtils.leftPad("bat", 1)  = "bat" StringUtils.leftPad("bat", -1) = "bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @return left padded String or original String if no padding is necessary,<code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : leftPad
COMMENT : /** 
 * <p>Left pad a String with a specified character.</p> <p>Pad to a size of <code>size</code>.</p> <pre> StringUtils.leftPad(null, *, *)     = null StringUtils.leftPad("", 3, 'z')     = "zzz" StringUtils.leftPad("bat", 3, 'z')  = "bat" StringUtils.leftPad("bat", 5, 'z')  = "zzbat" StringUtils.leftPad("bat", 1, 'z')  = "bat" StringUtils.leftPad("bat", -1, 'z') = "bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @param padChar  the character to pad with
 * @return left padded String or original String if no padding is necessary,<code>null</code> if null String input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : leftPad
COMMENT : /** 
 * <p>Left pad a String with a specified String.</p> <p>Pad to a size of <code>size</code>.</p> <pre> StringUtils.leftPad(null, *, *)      = null StringUtils.leftPad("", 3, "z")      = "zzz" StringUtils.leftPad("bat", 3, "yz")  = "bat" StringUtils.leftPad("bat", 5, "yz")  = "yzbat" StringUtils.leftPad("bat", 8, "yz")  = "yzyzybat" StringUtils.leftPad("bat", 1, "yz")  = "bat" StringUtils.leftPad("bat", -1, "yz") = "bat" StringUtils.leftPad("bat", 5, null)  = "  bat" StringUtils.leftPad("bat", 5, "")    = "  bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @param padStr  the String to pad with, null or empty treated as single space
 * @return left padded String or original String if no padding is necessary,<code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : length
COMMENT : /** 
 * Gets a String's length or <code>0</code> if the String is <code>null</code>.
 * @param str a String or <code>null</code>
 * @return String length or <code>0</code> if the String is <code>null</code>.
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : center
COMMENT : /** 
 * <p>Centers a String in a larger String of size <code>size</code> using the space character (' ').<p> <p>If the size is less than the String length, the String is returned. A <code>null</code> String returns <code>null</code>. A negative size is treated as zero.</p> <p>Equivalent to <code>center(str, size, " ")</code>.</p> <pre> StringUtils.center(null, *)   = null StringUtils.center("", 4)     = "    " StringUtils.center("ab", -1)  = "ab" StringUtils.center("ab", 4)   = " ab " StringUtils.center("abcd", 2) = "abcd" StringUtils.center("a", 4)    = " a  " </pre>
 * @param str  the String to center, may be null
 * @param size  the int size of new String, negative treated as zero
 * @return centered String, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : center
COMMENT : /** 
 * <p>Centers a String in a larger String of size <code>size</code>. Uses a supplied character as the value to pad the String with.</p> <p>If the size is less than the String length, the String is returned. A <code>null</code> String returns <code>null</code>. A negative size is treated as zero.</p> <pre> StringUtils.center(null, *, *)     = null StringUtils.center("", 4, ' ')     = "    " StringUtils.center("ab", -1, ' ')  = "ab" StringUtils.center("ab", 4, ' ')   = " ab" StringUtils.center("abcd", 2, ' ') = "abcd" StringUtils.center("a", 4, ' ')    = " a  " StringUtils.center("a", 4, 'y')    = "yayy" </pre>
 * @param str  the String to center, may be null
 * @param size  the int size of new String, negative treated as zero
 * @param padChar  the character to pad the new String with
 * @return centered String, <code>null</code> if null String input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : center
COMMENT : /** 
 * <p>Centers a String in a larger String of size <code>size</code>. Uses a supplied String as the value to pad the String with.</p> <p>If the size is less than the String length, the String is returned. A <code>null</code> String returns <code>null</code>. A negative size is treated as zero.</p> <pre> StringUtils.center(null, *, *)     = null StringUtils.center("", 4, " ")     = "    " StringUtils.center("ab", -1, " ")  = "ab" StringUtils.center("ab", 4, " ")   = " ab" StringUtils.center("abcd", 2, " ") = "abcd" StringUtils.center("a", 4, " ")    = " a  " StringUtils.center("a", 4, "yz")   = "yayz" StringUtils.center("abc", 7, null) = "  abc  " StringUtils.center("abc", 7, "")   = "  abc  " </pre>
 * @param str  the String to center, may be null
 * @param size  the int size of new String, negative treated as zero
 * @param padStr  the String to pad the new String with, must not be null or empty
 * @return centered String, <code>null</code> if null String input
 * @throws IllegalArgumentException if padStr is <code>null</code> or empty
 */



PACKAGE : package org.apache.commons.lang;

NAME : upperCase
COMMENT : /** 
 * <p>Converts a String to upper case as per  {@link String#toUpperCase()}.</p> <p>A <code>null</code> input String returns <code>null</code>.</p> <pre> StringUtils.upperCase(null)  = null StringUtils.upperCase("")    = "" StringUtils.upperCase("aBc") = "ABC" </pre>
 * @param str  the String to upper case, may be null
 * @return the upper cased String, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : lowerCase
COMMENT : /** 
 * <p>Converts a String to lower case as per  {@link String#toLowerCase()}.</p> <p>A <code>null</code> input String returns <code>null</code>.</p> <pre> StringUtils.lowerCase(null)  = null StringUtils.lowerCase("")    = "" StringUtils.lowerCase("aBc") = "abc" </pre>
 * @param str  the String to lower case, may be null
 * @return the lower cased String, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : capitalize
COMMENT : /** 
 * <p>Capitalizes a String changing the first letter to title case as per  {@link Character#toTitleCase(char)}. No other letters are changed.</p> <p>For a word based algorithm, see  {@link WordUtils#capitalize(String)}. A <code>null</code> input String returns <code>null</code>.</p> <pre> StringUtils.capitalize(null)  = null StringUtils.capitalize("")    = "" StringUtils.capitalize("cat") = "Cat" StringUtils.capitalize("cAt") = "CAt" </pre>
 * @param str  the String to capitalize, may be null
 * @return the capitalized String, <code>null</code> if null String input
 * @see WordUtils#capitalize(String)
 * @see #uncapitalize(String)
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : capitalise
COMMENT : /** 
 * <p>Capitalizes a String changing the first letter to title case as per  {@link Character#toTitleCase(char)}. No other letters are changed.</p>
 * @param str  the String to capitalize, may be null
 * @return the capitalized String, <code>null</code> if null String input
 * @deprecated Use the standardly named {@link #capitalize(String)}. Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : uncapitalize
COMMENT : /** 
 * <p>Uncapitalizes a String changing the first letter to title case as per  {@link Character#toLowerCase(char)}. No other letters are changed.</p> <p>For a word based algorithm, see  {@link WordUtils#uncapitalize(String)}. A <code>null</code> input String returns <code>null</code>.</p> <pre> StringUtils.uncapitalize(null)  = null StringUtils.uncapitalize("")    = "" StringUtils.uncapitalize("Cat") = "cat" StringUtils.uncapitalize("CAT") = "cAT" </pre>
 * @param str  the String to uncapitalize, may be null
 * @return the uncapitalized String, <code>null</code> if null String input
 * @see WordUtils#uncapitalize(String)
 * @see #capitalize(String)
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : uncapitalise
COMMENT : /** 
 * <p>Uncapitalizes a String changing the first letter to title case as per  {@link Character#toLowerCase(char)}. No other letters are changed.</p>
 * @param str  the String to uncapitalize, may be null
 * @return the uncapitalized String, <code>null</code> if null String input
 * @deprecated Use the standardly named {@link #uncapitalize(String)}. Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : swapCase
COMMENT : /** 
 * <p>Swaps the case of a String changing upper and title case to lower case, and lower case to upper case.</p> <ul> <li>Upper case character converts to Lower case</li> <li>Title case character converts to Lower case</li> <li>Lower case character converts to Upper case</li> </ul> <p>For a word based algorithm, see  {@link WordUtils#swapCase(String)}. A <code>null</code> input String returns <code>null</code>.</p> <pre> StringUtils.swapCase(null)                 = null StringUtils.swapCase("")                   = "" StringUtils.swapCase("The dog has a BONE") = "tHE DOG HAS A bone" </pre> <p>NOTE: This method changed in Lang version 2.0. It no longer performs a word based algorithm. If you only use ASCII, you will notice no change. That functionality is available in WordUtils.</p>
 * @param str  the String to swap case, may be null
 * @return the changed String, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : capitaliseAllWords
COMMENT : /** 
 * <p>Capitalizes all the whitespace separated words in a String. Only the first letter of each word is changed.</p> <p>Whitespace is defined by  {@link Character#isWhitespace(char)}. A <code>null</code> input String returns <code>null</code>.</p>
 * @param str  the String to capitalize, may be null
 * @return capitalized String, <code>null</code> if null String input
 * @deprecated Use the relocated {@link WordUtils#capitalize(String)}. Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : countMatches
COMMENT : /** 
 * <p>Counts how many times the substring appears in the larger String.</p> <p>A <code>null</code> or empty ("") String input returns <code>0</code>.</p> <pre> StringUtils.countMatches(null, *)       = 0 StringUtils.countMatches("", *)         = 0 StringUtils.countMatches("abba", null)  = 0 StringUtils.countMatches("abba", "")    = 0 StringUtils.countMatches("abba", "a")   = 2 StringUtils.countMatches("abba", "ab")  = 1 StringUtils.countMatches("abba", "xxx") = 0 </pre>
 * @param str  the String to check, may be null
 * @param sub  the substring to count, may be null
 * @return the number of occurrences, 0 if either String is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAlpha
COMMENT : /** 
 * <p>Checks if the String contains only unicode letters.</p> <p><code>null</code> will return <code>false</code>. An empty String ("") will return <code>true</code>.</p> <pre> StringUtils.isAlpha(null)   = false StringUtils.isAlpha("")     = true StringUtils.isAlpha("  ")   = false StringUtils.isAlpha("abc")  = true StringUtils.isAlpha("ab2c") = false StringUtils.isAlpha("ab-c") = false </pre>
 * @param str  the String to check, may be null
 * @return <code>true</code> if only contains letters, and is non-null
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAlphaSpace
COMMENT : /** 
 * <p>Checks if the String contains only unicode letters and space (' ').</p> <p><code>null</code> will return <code>false</code> An empty String ("") will return <code>true</code>.</p> <pre> StringUtils.isAlphaSpace(null)   = false StringUtils.isAlphaSpace("")     = true StringUtils.isAlphaSpace("  ")   = true StringUtils.isAlphaSpace("abc")  = true StringUtils.isAlphaSpace("ab c") = true StringUtils.isAlphaSpace("ab2c") = false StringUtils.isAlphaSpace("ab-c") = false </pre>
 * @param str  the String to check, may be null
 * @return <code>true</code> if only contains letters and space,and is non-null
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAlphanumeric
COMMENT : /** 
 * <p>Checks if the String contains only unicode letters or digits.</p> <p><code>null</code> will return <code>false</code>. An empty String ("") will return <code>true</code>.</p> <pre> StringUtils.isAlphanumeric(null)   = false StringUtils.isAlphanumeric("")     = true StringUtils.isAlphanumeric("  ")   = false StringUtils.isAlphanumeric("abc")  = true StringUtils.isAlphanumeric("ab c") = false StringUtils.isAlphanumeric("ab2c") = true StringUtils.isAlphanumeric("ab-c") = false </pre>
 * @param str  the String to check, may be null
 * @return <code>true</code> if only contains letters or digits,and is non-null
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAlphanumericSpace
COMMENT : /** 
 * <p>Checks if the String contains only unicode letters, digits or space (<code>' '</code>).</p> <p><code>null</code> will return <code>false</code>. An empty String ("") will return <code>true</code>.</p> <pre> StringUtils.isAlphanumeric(null)   = false StringUtils.isAlphanumeric("")     = true StringUtils.isAlphanumeric("  ")   = true StringUtils.isAlphanumeric("abc")  = true StringUtils.isAlphanumeric("ab c") = true StringUtils.isAlphanumeric("ab2c") = true StringUtils.isAlphanumeric("ab-c") = false </pre>
 * @param str  the String to check, may be null
 * @return <code>true</code> if only contains letters, digits or space,and is non-null
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAsciiPrintable
COMMENT : /** 
 * <p>Checks if the string contains only ASCII printable characters.</p> <p><code>null</code> will return <code>false</code>. An empty String ("") will return <code>true</code>.</p> <pre> StringUtils.isAsciiPrintable(null)     = false StringUtils.isAsciiPrintable("")       = true StringUtils.isAsciiPrintable(" ")      = true StringUtils.isAsciiPrintable("Ceki")   = true StringUtils.isAsciiPrintable("ab2c")   = true StringUtils.isAsciiPrintable("!ab-c~") = true StringUtils.isAsciiPrintable("\u0020") = true StringUtils.isAsciiPrintable("\u0021") = true StringUtils.isAsciiPrintable("\u007e") = true StringUtils.isAsciiPrintable("\u007f") = false StringUtils.isAsciiPrintable("Ceki G\u00fclc\u00fc") = false </pre>
 * @param str the string to check, may be null
 * @return <code>true</code> if every character is in the range32 thru 126
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : isNumeric
COMMENT : /** 
 * <p>Checks if the String contains only unicode digits. A decimal point is not a unicode digit and returns false.</p> <p><code>null</code> will return <code>false</code>. An empty String ("") will return <code>true</code>.</p> <pre> StringUtils.isNumeric(null)   = false StringUtils.isNumeric("")     = true StringUtils.isNumeric("  ")   = false StringUtils.isNumeric("123")  = true StringUtils.isNumeric("12 3") = false StringUtils.isNumeric("ab2c") = false StringUtils.isNumeric("12-3") = false StringUtils.isNumeric("12.3") = false </pre>
 * @param str  the String to check, may be null
 * @return <code>true</code> if only contains digits, and is non-null
 */



PACKAGE : package org.apache.commons.lang;

NAME : isNumericSpace
COMMENT : /** 
 * <p>Checks if the String contains only unicode digits or space (<code>' '</code>). A decimal point is not a unicode digit and returns false.</p> <p><code>null</code> will return <code>false</code>. An empty String ("") will return <code>true</code>.</p> <pre> StringUtils.isNumeric(null)   = false StringUtils.isNumeric("")     = true StringUtils.isNumeric("  ")   = true StringUtils.isNumeric("123")  = true StringUtils.isNumeric("12 3") = true StringUtils.isNumeric("ab2c") = false StringUtils.isNumeric("12-3") = false StringUtils.isNumeric("12.3") = false </pre>
 * @param str  the String to check, may be null
 * @return <code>true</code> if only contains digits or space,and is non-null
 */



PACKAGE : package org.apache.commons.lang;

NAME : isWhitespace
COMMENT : /** 
 * <p>Checks if the String contains only whitespace.</p> <p><code>null</code> will return <code>false</code>. An empty String ("") will return <code>true</code>.</p> <pre> StringUtils.isWhitespace(null)   = false StringUtils.isWhitespace("")     = true StringUtils.isWhitespace("  ")   = true StringUtils.isWhitespace("abc")  = false StringUtils.isWhitespace("ab2c") = false StringUtils.isWhitespace("ab-c") = false </pre>
 * @param str  the String to check, may be null
 * @return <code>true</code> if only contains whitespace, and is non-null
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : defaultString
COMMENT : /** 
 * <p>Returns either the passed in String, or if the String is <code>null</code>, an empty String ("").</p> <pre> StringUtils.defaultString(null)  = "" StringUtils.defaultString("")    = "" StringUtils.defaultString("bat") = "bat" </pre>
 * @see ObjectUtils#toString(Object)
 * @see String#valueOf(Object)
 * @param str  the String to check, may be null
 * @return the passed in String, or the empty String if itwas <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : defaultString
COMMENT : /** 
 * <p>Returns either the passed in String, or if the String is <code>null</code>, the value of <code>defaultStr</code>.</p> <pre> StringUtils.defaultString(null, "NULL")  = "NULL" StringUtils.defaultString("", "NULL")    = "" StringUtils.defaultString("bat", "NULL") = "bat" </pre>
 * @see ObjectUtils#toString(Object,String)
 * @see String#valueOf(Object)
 * @param str  the String to check, may be null
 * @param defaultStr  the default String to returnif the input is <code>null</code>, may be null
 * @return the passed in String, or the default if it was <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : defaultIfEmpty
COMMENT : /** 
 * <p>Returns either the passed in String, or if the String is empty or <code>null</code>, the value of <code>defaultStr</code>.</p> <pre> StringUtils.defaultIfEmpty(null, "NULL")  = "NULL" StringUtils.defaultIfEmpty("", "NULL")    = "NULL" StringUtils.defaultIfEmpty("bat", "NULL") = "bat" </pre>
 * @see StringUtils#defaultString(String,String)
 * @param str  the String to check, may be null
 * @param defaultStr  the default String to returnif the input is empty ("") or <code>null</code>, may be null
 * @return the passed in String, or the default
 */



PACKAGE : package org.apache.commons.lang;

NAME : reverse
COMMENT : /** 
 * <p>Reverses a String as per  {@link StringBuffer#reverse()}.</p> <p>A <code>null</code> String returns <code>null</code>.</p> <pre> StringUtils.reverse(null)  = null StringUtils.reverse("")    = "" StringUtils.reverse("bat") = "tab" </pre>
 * @param str  the String to reverse, may be null
 * @return the reversed String, <code>null</code> if null String input
 */



PACKAGE : package org.apache.commons.lang;

NAME : reverseDelimited
COMMENT : /** 
 * <p>Reverses a String that is delimited by a specific character.</p> <p>The Strings between the delimiters are not reversed. Thus java.lang.String becomes String.lang.java (if the delimiter is <code>'.'</code>).</p> <pre> StringUtils.reverseDelimited(null, *)      = null StringUtils.reverseDelimited("", *)        = "" StringUtils.reverseDelimited("a.b.c", 'x') = "a.b.c" StringUtils.reverseDelimited("a.b.c", ".") = "c.b.a" </pre>
 * @param str  the String to reverse, may be null
 * @param separatorChar  the separator character to use
 * @return the reversed String, <code>null</code> if null String input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : reverseDelimitedString
COMMENT : /** 
 * <p>Reverses a String that is delimited by a specific character.</p> <p>The Strings between the delimiters are not reversed. Thus java.lang.String becomes String.lang.java (if the delimiter is <code>"."</code>).</p> <pre> StringUtils.reverseDelimitedString(null, *)       = null StringUtils.reverseDelimitedString("",*)          = "" StringUtils.reverseDelimitedString("a.b.c", null) = "a.b.c" StringUtils.reverseDelimitedString("a.b.c", ".")  = "c.b.a" </pre>
 * @param str  the String to reverse, may be null
 * @param separatorChars  the separator characters to use, null treated as whitespace
 * @return the reversed String, <code>null</code> if null String input
 * @deprecated Use {@link #reverseDelimited(String,char)} instead.This method is broken as the join doesn't know which char to use. Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : abbreviate
COMMENT : /** 
 * <p>Abbreviates a String using ellipses. This will turn "Now is the time for all good men" into "Now is the time for..."</p> <p>Specifically: <ul> <li>If <code>str</code> is less than <code>maxWidth</code> characters long, return it.</li> <li>Else abbreviate it to <code>(substring(str, 0, max-3) + "...")</code>.</li> <li>If <code>maxWidth</code> is less than <code>4</code>, throw an <code>IllegalArgumentException</code>.</li> <li>In no case will it return a String of length greater than <code>maxWidth</code>.</li> </ul> </p> <pre> StringUtils.abbreviate(null, *)      = null StringUtils.abbreviate("", 4)        = "" StringUtils.abbreviate("abcdefg", 6) = "abc..." StringUtils.abbreviate("abcdefg", 7) = "abcdefg" StringUtils.abbreviate("abcdefg", 8) = "abcdefg" StringUtils.abbreviate("abcdefg", 4) = "a..." StringUtils.abbreviate("abcdefg", 3) = IllegalArgumentException </pre>
 * @param str  the String to check, may be null
 * @param maxWidth  maximum length of result String, must be at least 4
 * @return abbreviated String, <code>null</code> if null String input
 * @throws IllegalArgumentException if the width is too small
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : abbreviate
COMMENT : /** 
 * <p>Abbreviates a String using ellipses. This will turn "Now is the time for all good men" into "...is the time for..."</p> <p>Works like <code>abbreviate(String, int)</code>, but allows you to specify a "left edge" offset.  Note that this left edge is not necessarily going to be the leftmost character in the result, or the first character following the ellipses, but it will appear somewhere in the result. <p>In no case will it return a String of length greater than <code>maxWidth</code>.</p> <pre> StringUtils.abbreviate(null, *, *)                = null StringUtils.abbreviate("", 0, 4)                  = "" StringUtils.abbreviate("abcdefghijklmno", -1, 10) = "abcdefg..." StringUtils.abbreviate("abcdefghijklmno", 0, 10)  = "abcdefg..." StringUtils.abbreviate("abcdefghijklmno", 1, 10)  = "abcdefg..." StringUtils.abbreviate("abcdefghijklmno", 4, 10)  = "abcdefg..." StringUtils.abbreviate("abcdefghijklmno", 5, 10)  = "...fghi..." StringUtils.abbreviate("abcdefghijklmno", 6, 10)  = "...ghij..." StringUtils.abbreviate("abcdefghijklmno", 8, 10)  = "...ijklmno" StringUtils.abbreviate("abcdefghijklmno", 10, 10) = "...ijklmno" StringUtils.abbreviate("abcdefghijklmno", 12, 10) = "...ijklmno" StringUtils.abbreviate("abcdefghij", 0, 3)        = IllegalArgumentException StringUtils.abbreviate("abcdefghij", 5, 6)        = IllegalArgumentException </pre>
 * @param str  the String to check, may be null
 * @param offset  left edge of source String
 * @param maxWidth  maximum length of result String, must be at least 4
 * @return abbreviated String, <code>null</code> if null String input
 * @throws IllegalArgumentException if the width is too small
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : difference
COMMENT : /** 
 * <p>Compares two Strings, and returns the portion where they differ. (More precisely, return the remainder of the second String, starting from where it's different from the first.)</p> <p>For example, <code>difference("i am a machine", "i am a robot") -> "robot"</code>.</p> <pre> StringUtils.difference(null, null) = null StringUtils.difference("", "") = "" StringUtils.difference("", "abc") = "abc" StringUtils.difference("abc", "") = "" StringUtils.difference("abc", "abc") = "" StringUtils.difference("ab", "abxyz") = "xyz" StringUtils.difference("abcde", "abxyz") = "xyz" StringUtils.difference("abcde", "xyz") = "xyz" </pre>
 * @param str1  the first String, may be null
 * @param str2  the second String, may be null
 * @return the portion of str2 where it differs from str1; returns theempty String if they are equal
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOfDifference
COMMENT : /** 
 * <p>Compares two Strings, and returns the index at which the Strings begin to differ.</p> <p>For example, <code>indexOfDifference("i am a machine", "i am a robot") -> 7</code></p> <pre> StringUtils.indexOfDifference(null, null) = -1 StringUtils.indexOfDifference("", "") = -1 StringUtils.indexOfDifference("", "abc") = 0 StringUtils.indexOfDifference("abc", "") = 0 StringUtils.indexOfDifference("abc", "abc") = -1 StringUtils.indexOfDifference("ab", "abxyz") = 2 StringUtils.indexOfDifference("abcde", "abxyz") = 2 StringUtils.indexOfDifference("abcde", "xyz") = 0 </pre>
 * @param str1  the first String, may be null
 * @param str2  the second String, may be null
 * @return the index where str2 and str1 begin to differ; -1 if they are equal
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOfDifference
COMMENT : /** 
 * <p>Compares all Strings in an array and returns the index at which the Strings begin to differ.</p> <p>For example, <code>indexOfDifference(new String[] {"i am a machine", "i am a robot"}) -> 7</code></p> <pre> StringUtils.indexOfDifference(null) = -1 StringUtils.indexOfDifference(new String[] {}) = -1 StringUtils.indexOfDifference(new String[] {"abc"}) = -1 StringUtils.indexOfDifference(new String[] {null, null}) = -1 StringUtils.indexOfDifference(new String[] {"", ""}) = -1 StringUtils.indexOfDifference(new String[] {"", null}) = 0 StringUtils.indexOfDifference(new String[] {"abc", null, null}) = 0 StringUtils.indexOfDifference(new String[] {null, null, "abc"}) = 0 StringUtils.indexOfDifference(new String[] {"", "abc"}) = 0 StringUtils.indexOfDifference(new String[] {"abc", ""}) = 0 StringUtils.indexOfDifference(new String[] {"abc", "abc"}) = -1 StringUtils.indexOfDifference(new String[] {"abc", "a"}) = 1 StringUtils.indexOfDifference(new String[] {"ab", "abxyz"}) = 2 StringUtils.indexOfDifference(new String[] {"abcde", "abxyz"}) = 2 StringUtils.indexOfDifference(new String[] {"abcde", "xyz"}) = 0 StringUtils.indexOfDifference(new String[] {"xyz", "abcde"}) = 0 StringUtils.indexOfDifference(new String[] {"i am a machine", "i am a robot"}) = 7 </pre>
 * @param strs  array of strings, entries may be null
 * @return the index where the strings begin to differ; -1 if they are all equal
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : getCommonPrefix
COMMENT : /** 
 * <p>Compares all Strings in an array and returns the initial sequence of  characters that is common to all of them.</p> <p>For example, <code>getCommonPrefix(new String[] {"i am a machine", "i am a robot"}) -> "i am a "</code></p> <pre> StringUtils.getCommonPrefix(null) = "" StringUtils.getCommonPrefix(new String[] {}) = "" StringUtils.getCommonPrefix(new String[] {"abc"}) = "abc" StringUtils.getCommonPrefix(new String[] {null, null}) = "" StringUtils.getCommonPrefix(new String[] {"", ""}) = "" StringUtils.getCommonPrefix(new String[] {"", null}) = "" StringUtils.getCommonPrefix(new String[] {"abc", null, null}) = "" StringUtils.getCommonPrefix(new String[] {null, null, "abc"}) = "" StringUtils.getCommonPrefix(new String[] {"", "abc"}) = "" StringUtils.getCommonPrefix(new String[] {"abc", ""}) = "" StringUtils.getCommonPrefix(new String[] {"abc", "abc"}) = "abc" StringUtils.getCommonPrefix(new String[] {"abc", "a"}) = "a" StringUtils.getCommonPrefix(new String[] {"ab", "abxyz"}) = "ab" StringUtils.getCommonPrefix(new String[] {"abcde", "abxyz"}) = "ab" StringUtils.getCommonPrefix(new String[] {"abcde", "xyz"}) = "" StringUtils.getCommonPrefix(new String[] {"xyz", "abcde"}) = "" StringUtils.getCommonPrefix(new String[] {"i am a machine", "i am a robot"}) = "i am a " </pre>
 * @param strs  array of String objects, entries may be null
 * @return the initial sequence of characters that are common to all Stringsin the array; empty String if the array is null, the elements are all null  or if there is no common prefix. 
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : getLevenshteinDistance
COMMENT : /** 
 * <p>Find the Levenshtein distance between two Strings.</p> <p>This is the number of changes needed to change one String into another, where each change is a single character modification (deletion, insertion or substitution).</p> <p>The previous implementation of the Levenshtein distance algorithm was from <a href="http://www.merriampark.com/ld.htm">http://www.merriampark.com/ld.htm</a></p> <p>Chas Emerick has written an implementation in Java, which avoids an OutOfMemoryError which can occur when my Java implementation is used with very large strings.<br> This implementation of the Levenshtein distance algorithm is from <a href="http://www.merriampark.com/ldjava.htm">http://www.merriampark.com/ldjava.htm</a></p> <pre> StringUtils.getLevenshteinDistance(null, *)             = IllegalArgumentException StringUtils.getLevenshteinDistance(*, null)             = IllegalArgumentException StringUtils.getLevenshteinDistance("","")               = 0 StringUtils.getLevenshteinDistance("","a")              = 1 StringUtils.getLevenshteinDistance("aaapppp", "")       = 7 StringUtils.getLevenshteinDistance("frog", "fog")       = 1 StringUtils.getLevenshteinDistance("fly", "ant")        = 3 StringUtils.getLevenshteinDistance("elephant", "hippo") = 7 StringUtils.getLevenshteinDistance("hippo", "elephant") = 7 StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") = 8 StringUtils.getLevenshteinDistance("hello", "hallo")    = 1 </pre>
 * @param s  the first String, must not be null
 * @param t  the second String, must not be null
 * @return result distance
 * @throws IllegalArgumentException if either String input <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : startsWith
COMMENT : /** 
 * <p>Check if a String starts with a specified prefix.</p> <p><code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal. The comparison is case sensitive.</p> <pre> StringUtils.startsWith(null, null)      = true StringUtils.startsWith(null, "abcdef")  = false StringUtils.startsWith("abc", null)     = false StringUtils.startsWith("abc", "abcdef") = true StringUtils.startsWith("abc", "ABCDEF") = false </pre>
 * @see java.lang.String#startsWith(String)
 * @param str  the String to check, may be null
 * @param prefix the prefix to find, may be null
 * @return <code>true</code> if the String starts with the prefix, case sensitive, orboth <code>null</code>
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : startsWithIgnoreCase
COMMENT : /** 
 * <p>Case insensitive check if a String starts with a specified prefix.</p> <p><code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal. The comparison is case insensitive.</p> <pre> StringUtils.startsWithIgnoreCase(null, null)      = true StringUtils.startsWithIgnoreCase(null, "abcdef")  = false StringUtils.startsWithIgnoreCase("abc", null)     = false StringUtils.startsWithIgnoreCase("abc", "abcdef") = true StringUtils.startsWithIgnoreCase("abc", "ABCDEF") = true </pre>
 * @see java.lang.String#startsWith(String)
 * @param str  the String to check, may be null
 * @param prefix the prefix to find, may be null
 * @return <code>true</code> if the String starts with the prefix, case insensitive, orboth <code>null</code>
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : startsWith
COMMENT : /** 
 * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>
 * @see java.lang.String#startsWith(String)
 * @param str  the String to check, may be null
 * @param prefix the prefix to find, may be null
 * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.
 * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : endsWith
COMMENT : /** 
 * <p>Check if a String ends with a specified suffix.</p> <p><code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal. The comparison is case sensitive.</p> <pre> StringUtils.endsWith(null, null)      = true StringUtils.endsWith(null, "abcdef")  = false StringUtils.endsWith("def", null)     = false StringUtils.endsWith("def", "abcdef") = true StringUtils.endsWith("def", "ABCDEF") = false </pre>
 * @see java.lang.String#endsWith(String)
 * @param str  the String to check, may be null
 * @param suffix the suffix to find, may be null
 * @return <code>true</code> if the String ends with the suffix, case sensitive, orboth <code>null</code>
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : endsWithIgnoreCase
COMMENT : /** 
 * <p>Case insensitive check if a String ends with a specified suffix.</p> <p><code>null</code>s are handled without exceptions. Two <code>null</code> references are considered to be equal. The comparison is case insensitive.</p> <pre> StringUtils.endsWithIgnoreCase(null, null)      = true StringUtils.endsWithIgnoreCase(null, "abcdef")  = false StringUtils.endsWithIgnoreCase("def", null)     = false StringUtils.endsWithIgnoreCase("def", "abcdef") = true StringUtils.endsWithIgnoreCase("def", "ABCDEF") = false </pre>
 * @see java.lang.String#endsWith(String)
 * @param str  the String to check, may be null
 * @param suffix the suffix to find, may be null
 * @return <code>true</code> if the String ends with the suffix, case insensitive, orboth <code>null</code>
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : endsWith
COMMENT : /** 
 * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>
 * @see java.lang.String#endsWith(String)
 * @param str  the String to check, may be null
 * @param suffix the suffix to find, may be null
 * @param ignoreCase inidicates whether the compare should ignore case(case insensitive) or not.
 * @return <code>true</code> if the String starts with the prefix orboth <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : AbstractNestableTestCase
COMMENT : /** 
 * Constructs an instance of <code>AbstractNestableTestCase</code>.
 * @param name the test name
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetCause
COMMENT : /** 
 * Tests the getCause() operation.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowableCount
COMMENT : /** 
 * Tests the getThrowableCount() operation.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetMessage
COMMENT : /** 
 * Tests the getMessage() operation.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetMessageI
COMMENT : /** 
 * Tests the getMessage(int) operation.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetMessages
COMMENT : /** 
 * Tests the getMessages() operation.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowableI
COMMENT : /** 
 * Tests the getThrowable(int) operation.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : doNestableExceptionGetThrowableI
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testGetThrowables
COMMENT : /** 
 * Tests the getThrowables() operation.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : doNestableExceptionGetThrowables
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testIndexOfThrowable
COMMENT : /** 
 * Tests the indexOfThrowable() operation.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : doNestableExceptionIndexOfThrowable
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testIndexOfThrowableI
COMMENT : /** 
 * Tests the indexOfThrowable(int) operation.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : doNestableExceptionIndexOfThrowableI
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testPrintPartialStackTrace
COMMENT : /** 
 * Tests the printPartialStackTrace() operation.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : testPrintStackTrace
COMMENT : /** 
 * Tests the printStackTrace() operation.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * Returns an instance of the <code>Nestable</code> implementation being tested.
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * Returns an instance of the <code>Nestable</code> implementation being tested.
 * @param n <code>Nestable</code> argument to be provided to the instanceconstructor
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * Returns an instance of the <code>Nestable</code> implementation being tested.
 * @param msg <code>String</code> argument to be provided to the instanceconstructor
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * Returns an instance of the <code>Nestable</code> implementation being tested.
 * @param msg <code>String</code> argument to be provided to the instanceconstructor
 * @param n <code>Nestable</code> argument to be provided to the instanceconstructor
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * Returns an instance of the <code>Nestable</code> implementation being tested.
 * @param msg <code>String</code> argument to be provided to the instanceconstructor
 * @param t <code>Throwable</code> argument to be provided to the instanceconstructor
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * Returns an instance of the <code>Nestable</code> implementation being tested.
 * @param t <code>Throwable</code> argument to be provided to the instanceconstructor
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * Returns an instance of a <code>Throwable</code> to be used in constructing instances of the <code>Nestable</code> implementation being tested.
 * @param msg <code>String</code> argument to be provided to the instanceconstructor
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * Returns an instance of one tester <code>Nestable</code> implementation.
 * @param n <code>Nestable</code> argument to be provided to the instanceconstructor
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * Returns an instance of one tester <code>Nestable</code> implementation.
 * @param t <code>Throwable</code> argument to be provided to the instanceconstructor
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * Returns an instance of one tester <code>Nestable</code> implementation.
 * @param msg <code>String</code> argument to be provided to the instanceconstructor
 * @param n <code>Nestable</code> argument to be provided to the instanceconstructor
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * Returns an instance of one tester <code>Nestable</code> implementation.
 * @param msg <code>String</code> argument to be provided to the instanceconstructor
 * @param t <code>Throwable</code> argument to be provided to the instanceconstructor
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester2
COMMENT : /** 
 * Returns an instance of a second tester <code>Nestable</code> implementation.
 * @param msg <code>String</code> argument to be provided to the instanceconstructor
 * @param n <code>Nestable</code> argument to be provided to the instanceconstructor
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester2
COMMENT : /** 
 * Returns an instance of a second tester <code>Nestable</code> implementation.
 * @param msg <code>String</code> argument to be provided to the instanceconstructor
 * @param t <code>Throwable</code> argument to be provided to the instanceconstructor
 * @return the instance
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1Class
COMMENT : /** 
 * Returns the class of the first tester <code>Nestable</code> implementation.
 * @return the class
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester2Class
COMMENT : /** 
 * Returns the class of the second tester <code>Nestable</code> implementation.
 * @return the class
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableClass
COMMENT : /** 
 * Returns the class of the <code>Throwable</code> used in constructing instances of the <code>Nestable</code> implementation being tested.
 * @return the class
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getBaseThrowableClass
COMMENT : /** 
 * Returns the base class being used, typically Error, Eception or RuntimeException.
 * @return the class
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : EqualsBuilderTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHierarchyEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHierarchyEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionEqualsEquivalenceRelationship
COMMENT : /** 
 * Equivalence relationship tests inspired by "Effective Java": <ul> <li>reflection</li> <li>symmetry</li> <li>transitive</li> <li>consistency</li> <li>non-null reference</li> </ul>
 * @param to a TestObject
 * @param toBis a TestObject, equal to to and toTer
 * @param toTer Left hand side, equal to to and toBis
 * @param to2 a different TestObject
 * @param oToChange a TestObject that will be changed
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testSuper
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testShort
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testChar
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testByte
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBigDecimal
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testAccessors
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testIntArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testShortArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testCharArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testByteArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testDoubleArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFloatArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBooleanArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiIntArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiShortArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiCharArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiByteArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiFloatArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiDoubleArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMultiBooleanArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testRaggedArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testMixedArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testIntArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testShortArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testCharArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testByteArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testDoubleArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFloatArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBooleanArrayHiddenByObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testUnrelatedClasses
COMMENT : /** 
 * Tests two instances of classes that can be equal and that are not "related". The two classes are not subclasses of each other and do not share a parent aside from Object. See http://issues.apache.org/bugzilla/show_bug.cgi?id=33069
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testNpeForNullElement
COMMENT : /** 
 * Test from http://issues.apache.org/bugzilla/show_bug.cgi?id=33067
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionEqualsExcludeFields
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : equals
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setA
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : getA
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestSubObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestSubObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : equals
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setB
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : getB
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestEmptySubObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestTSubObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestTTSubObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestTTLeafObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestTSubObject2
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : getT
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setT
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestACanEqualB
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : equals
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : getA
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestBCanEqualA
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : equals
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : getB
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : TestObjectWithMultipleFields
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : FloatRangeTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : createRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : createRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor1a
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor1b
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor2a
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor2b
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : DurationFormatUtils
COMMENT : /** 
 * <p>DurationFormatUtils instances should NOT be constructed in standard programming.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : formatDurationHMS
COMMENT : /** 
 * <p>Formats the time gap as a string.</p> <p>The format used is ISO8601-like: <i>H</i>:<i>m</i>:<i>s</i>.<i>S</i>.</p>
 * @param durationMillis  the duration to format
 * @return the time as a String
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : formatDurationISO
COMMENT : /** 
 * <p>Formats the time gap as a string.</p> <p>The format used is the ISO8601 period format.</p> <p>This method formats durations using the days and lower fields of the ISO format pattern, such as P7D6TH5M4.321S.</p>
 * @param durationMillis  the duration to format
 * @return the time as a String
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : formatDuration
COMMENT : /** 
 * <p>Formats the time gap as a string, using the specified format, and padding with zeros and  using the default timezone.</p> <p>This method formats durations using the days and lower fields of the format pattern. Months and larger are not used.</p>
 * @param durationMillis  the duration to format
 * @param format  the way in which to format the duration
 * @return the time as a String
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : formatDuration
COMMENT : /** 
 * <p>Formats the time gap as a string, using the specified format. Padding the left hand side of numbers with zeroes is optional and  the timezone may be specified.</p> <p>This method formats durations using the days and lower fields of the format pattern. Months and larger are not used.</p>
 * @param durationMillis  the duration to format
 * @param format  the way in which to format the duration
 * @param padWithZeros  whether to pad the left hand side of numbers with 0's
 * @return the time as a String
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : formatDurationWords
COMMENT : /** 
 * <p>Formats an elapsed time into a plurialization correct string.</p> <p>This method formats durations using the days and lower fields of the format pattern. Months and larger are not used.</p>
 * @param durationMillis  the elapsed time to report in milliseconds
 * @param suppressLeadingZeroElements  suppresses leading 0 elements
 * @param suppressTrailingZeroElements  suppresses trailing 0 elements
 * @return the formatted text in days/hours/minutes/seconds
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : formatPeriodISO
COMMENT : /** 
 * <p>Formats the time gap as a string.</p> <p>The format used is the ISO8601 period format.</p>
 * @param startMillis  the start of the duration to format
 * @param endMillis  the end of the duration to format
 * @return the time as a String
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : formatPeriod
COMMENT : /** 
 * <p>Formats the time gap as a string, using the specified format. Padding the left hand side of numbers with zeroes is optional.
 * @param startMillis  the start of the duration
 * @param endMillis  the end of the duration
 * @param format  the way in which to format the duration
 * @return the time as a String
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : formatPeriod
COMMENT : /** 
 * <p>Formats the time gap as a string, using the specified format. Padding the left hand side of numbers with zeroes is optional and  the timezone may be specified. </p> <p>When calculating the difference between months/days, it chooses to  calculate months first. So when working out the number of months and  days between January 15th and March 10th, it choose 1 month and  23 days gained by choosing January->February = 1 month and then  calculating days forwards, and not the 1 month and 26 days gained by  choosing March -> February = 1 month and then calculating days  backwards. </p> <p>For more control, the <a href="http://joda-time.sf.net/">Joda-Time</a> library is recommended.</p>
 * @param startMillis  the start of the duration
 * @param endMillis  the end of the duration
 * @param format  the way in which to format the duration
 * @param padWithZeros whether to pad the left hand side of numbers with 0's
 * @param timezone the millis are defined in
 * @return the time as a String
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : format
COMMENT : /** 
 * <p>The internal method to do the formatting.</p>
 * @param tokens  the tokens
 * @param years  the number of years
 * @param months  the number of months
 * @param days  the number of days
 * @param hours  the number of hours
 * @param minutes  the number of minutes
 * @param seconds  the number of seconds
 * @param milliseconds  the number of millis
 * @param padWithZeros  whether to pad
 * @return the formatted string
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : lexx
COMMENT : /** 
 * Parses a classic date format string into Tokens
 * @param format to parse
 * @return Token[] of tokens
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : containsTokenWithValue
COMMENT : /** 
 * Helper method to determine if a set of tokens contain a value
 * @param tokens set to look in
 * @param value to look for
 * @return boolean <code>true</code> if contained
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : Token
COMMENT : /** 
 * Wraps a token around a value. A value would be something like a 'Y'.
 * @param value to wrap
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : Token
COMMENT : /** 
 * Wraps a token around a repeated number of a value, for example it would  store 'yyyy' as a value for y and a count of 4.
 * @param value to wrap
 * @param count to wrap
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : increment
COMMENT : /** 
 * Adds another one of the value
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getCount
COMMENT : /** 
 * Gets the current number of values represented
 * @return int number of values represented
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getValue
COMMENT : /** 
 * Gets the particular value this token represents.
 * @return Object value
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : equals
COMMENT : /** 
 * Supports equality of this Token to another Token.
 * @param obj2 Object to consider equality of
 * @return boolean <code>true</code> if equal
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : hashCode
COMMENT : /** 
 * Returns a hashcode for the token equal to the  hashcode for the token's value. Thus 'TT' and 'TTTT'  will have the same hashcode. 
 * @return The hashcode for the token
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : toString
COMMENT : /** 
 * Represents this token as a String.
 * @return String representation of the token
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : RandomUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testNextInt
COMMENT : /** 
 * test distribution of nextInt() 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testNextInt2
COMMENT : /** 
 * test distribution of nextInt(Random) 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testJvmRandomNextInt
COMMENT : /** 
 * test distribution of JVMRandom.nextInt() 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : tstNextInt
COMMENT : /** 
 * Generate 1000 values for nextInt(bound) and compare the observed frequency counts to expected counts using a chi-square test.
 * @param rnd Random to use if not null
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testNextLong
COMMENT : /** 
 * test distribution of nextLong() 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testNextLong2
COMMENT : /** 
 * test distribution of nextLong(Random) BROKEN contract of nextLong(Random) is different from nextLong() 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : tstNextLong
COMMENT : /** 
 * Generate 1000 values for nextLong and check that p(value < long.MAXVALUE/2) ~ 0.5. Use chi-square test with df = 2-1 = 1  
 * @param rnd Random to use if not null
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testNextBoolean
COMMENT : /** 
 * test distribution of nextBoolean() 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testNextBoolean2
COMMENT : /** 
 * test distribution of nextBoolean(Random) 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : tstNextBoolean
COMMENT : /** 
 * Generate 1000 values for nextBoolean and check that p(value = false) ~ 0.5. Use chi-square test with df = 2-1 = 1  
 * @param rnd Random to use if not null
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testNextFloat
COMMENT : /** 
 * test distribution of nextFloat() 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testNextFloat2
COMMENT : /** 
 * test distribution of nextFloat(Random) 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : tstNextFloat
COMMENT : /** 
 * Generate 1000 values for nextFloat and check that p(value < 0.5) ~ 0.5. Use chi-square test with df = 2-1 = 1  
 * @param rnd Random to use if not null
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testNextDouble
COMMENT : /** 
 * test distribution of nextDouble() 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testNextDouble2
COMMENT : /** 
 * test distribution of nextDouble(Random) 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : tstNextDouble
COMMENT : /** 
 * Generate 1000 values for nextFloat and check that p(value < 0.5) ~ 0.5. Use chi-square test with df = 2-1 = 1  
 * @param rnd Random to use if not null
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testUnimplementedMethods
COMMENT : /** 
 * make sure that unimplemented methods fail 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testIllegalArguments
COMMENT : /** 
 * make sure that illegal arguments fail 
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : chiSquare
COMMENT : /** 
 * Computes Chi-Square statistic given observed and expected counts
 * @param observed array of observed frequency counts
 * @param expected array of expected frequency counts
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : CompositeFormat
COMMENT : /** 
 * Create a format that points its parseObject method to one implementation and its format method to another.
 * @param parser implementation
 * @param formatter implementation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : format
COMMENT : /** 
 * Uses the formatter Format instance.
 * @param obj the object to format
 * @param toAppendTo the {@link StringBuffer} to append to
 * @param pos the FieldPosition to use (or ignore).
 * @return <code>toAppendTo</code>
 * @see Format#format(Object,StringBuffer,FieldPosition)
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : parseObject
COMMENT : /** 
 * Uses the parser Format instance.
 * @param source the String source
 * @param pos the ParsePosition containing the position to parse from, willbe updated according to parsing success (index) or failure (error index)
 * @return the parsed Object
 * @see Format#parseObject(String,ParsePosition)
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getParser
COMMENT : /** 
 * Provides access to the parser Format implementation.
 * @return parser Format implementation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getFormatter
COMMENT : /** 
 * Provides access to the parser Format implementation.
 * @return formatter Format implementation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : reformat
COMMENT : /** 
 * Utility method to parse and then reformat a String.
 * @param input String to reformat
 * @return A reformatted String
 * @throws ParseException thrown by parseObject(String) call
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : testLang381
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : StringUtilsStartsEndsWithTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testStartsWith
COMMENT : /** 
 * Test StringUtils.startsWith()
 */



PACKAGE : package org.apache.commons.lang;

NAME : testStartsWithIgnoreCase
COMMENT : /** 
 * Test StringUtils.testStartsWithIgnoreCase()
 */



PACKAGE : package org.apache.commons.lang;

NAME : testEndsWith
COMMENT : /** 
 * Test StringUtils.endsWith()
 */



PACKAGE : package org.apache.commons.lang;

NAME : testEndsWithIgnoreCase
COMMENT : /** 
 * Test StringUtils.endsWithIgnoreCase()
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : NumberUtils
COMMENT : /** 
 * <p><code>NumberUtils</code> instances should NOT be constructed in standard programming. Instead, the class should be used as <code>NumberUtils.stringToInt("6");</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : stringToInt
COMMENT : /** 
 * <p>Convert a <code>String</code> to an <code>int</code>, returning <code>zero</code> if the conversion fails.</p> <p>If the string is <code>null</code>, <code>zero</code> is returned.</p> <pre> NumberUtils.stringToInt(null) = 0 NumberUtils.stringToInt("")   = 0 NumberUtils.stringToInt("1")  = 1 </pre>
 * @param str  the string to convert, may be null
 * @return the int represented by the string, or <code>zero</code> ifconversion fails
 * @deprecated Use {@link #toInt(String)}This method will be removed in Commons Lang 3.0
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toInt
COMMENT : /** 
 * <p>Convert a <code>String</code> to an <code>int</code>, returning <code>zero</code> if the conversion fails.</p> <p>If the string is <code>null</code>, <code>zero</code> is returned.</p> <pre> NumberUtils.toInt(null) = 0 NumberUtils.toInt("")   = 0 NumberUtils.toInt("1")  = 1 </pre>
 * @param str  the string to convert, may be null
 * @return the int represented by the string, or <code>zero</code> ifconversion fails
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : stringToInt
COMMENT : /** 
 * <p>Convert a <code>String</code> to an <code>int</code>, returning a default value if the conversion fails.</p> <p>If the string is <code>null</code>, the default value is returned.</p> <pre> NumberUtils.stringToInt(null, 1) = 1 NumberUtils.stringToInt("", 1)   = 1 NumberUtils.stringToInt("1", 0)  = 1 </pre>
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the int represented by the string, or the default if conversion fails
 * @deprecated Use {@link #toInt(String,int)}This method will be removed in Commons Lang 3.0
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toInt
COMMENT : /** 
 * <p>Convert a <code>String</code> to an <code>int</code>, returning a default value if the conversion fails.</p> <p>If the string is <code>null</code>, the default value is returned.</p> <pre> NumberUtils.toInt(null, 1) = 1 NumberUtils.toInt("", 1)   = 1 NumberUtils.toInt("1", 0)  = 1 </pre>
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the int represented by the string, or the default if conversion fails
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toLong
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>long</code>, returning <code>zero</code> if the conversion fails.</p> <p>If the string is <code>null</code>, <code>zero</code> is returned.</p> <pre> NumberUtils.toLong(null) = 0L NumberUtils.toLong("")   = 0L NumberUtils.toLong("1")  = 1L </pre>
 * @param str  the string to convert, may be null
 * @return the long represented by the string, or <code>0</code> ifconversion fails
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toLong
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>long</code>, returning a default value if the conversion fails.</p> <p>If the string is <code>null</code>, the default value is returned.</p> <pre> NumberUtils.toLong(null, 1L) = 1L NumberUtils.toLong("", 1L)   = 1L NumberUtils.toLong("1", 0L)  = 1L </pre>
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the long represented by the string, or the default if conversion fails
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toFloat
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>float</code>, returning <code>0.0f</code> if the conversion fails.</p> <p>If the string <code>str</code> is <code>null</code>, <code>0.0f</code> is returned.</p> <pre> NumberUtils.toFloat(null)   = 0.0f NumberUtils.toFloat("")     = 0.0f NumberUtils.toFloat("1.5")  = 1.5f </pre>
 * @param str the string to convert, may be <code>null</code>
 * @return the float represented by the string, or <code>0.0f</code>if conversion fails
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toFloat
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>float</code>, returning a default value if the conversion fails.</p> <p>If the string <code>str</code> is <code>null</code>, the default value is returned.</p> <pre> NumberUtils.toFloat(null, 1.1f)   = 1.0f NumberUtils.toFloat("", 1.1f)     = 1.1f NumberUtils.toFloat("1.5", 0.0f)  = 1.5f </pre>
 * @param str the string to convert, may be <code>null</code>
 * @param defaultValue the default value
 * @return the float represented by the string, or defaultValueif conversion fails
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toDouble
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>double</code>, returning <code>0.0d</code> if the conversion fails.</p> <p>If the string <code>str</code> is <code>null</code>, <code>0.0d</code> is returned.</p> <pre> NumberUtils.toDouble(null)   = 0.0d NumberUtils.toDouble("")     = 0.0d NumberUtils.toDouble("1.5")  = 1.5d </pre>
 * @param str the string to convert, may be <code>null</code>
 * @return the double represented by the string, or <code>0.0d</code>if conversion fails
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toDouble
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>double</code>, returning a default value if the conversion fails.</p> <p>If the string <code>str</code> is <code>null</code>, the default value is returned.</p> <pre> NumberUtils.toDouble(null, 1.1d)   = 1.1d NumberUtils.toDouble("", 1.1d)     = 1.1d NumberUtils.toDouble("1.5", 0.0d)  = 1.5d </pre>
 * @param str the string to convert, may be <code>null</code>
 * @param defaultValue the default value
 * @return the double represented by the string, or defaultValueif conversion fails
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : createNumber
COMMENT : /** 
 * <p>Turns a string value into a java.lang.Number.</p> <p>First, the value is examined for a type qualifier on the end (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts  trying to create successively larger types from the type specified until one is found that can represent the value.</p> <p>If a type specifier is not found, it will check for a decimal point and then try successively larger types from <code>Integer</code> to <code>BigInteger</code> and from <code>Float</code> to <code>BigDecimal</code>.</p> <p>If the string starts with <code>0x</code> or <code>-0x</code>, it will be interpreted as a hexadecimal integer.  Values with leading <code>0</code>'s will not be interpreted as octal.</p> <p>Returns <code>null</code> if the string is <code>null</code>.</p> <p>This method does not trim the input string, i.e., strings with leading or trailing spaces will generate NumberFormatExceptions.</p>
 * @param str  String containing a number, may be null
 * @return Number created from the string
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : isAllZeros
COMMENT : /** 
 * <p>Utility method for  {@link #createNumber(java.lang.String)}.</p> <p>Returns <code>true</code> if s is <code>null</code>.</p>
 * @param str  the String to check
 * @return if it is all zeros or <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : createFloat
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>Float</code>.</p> <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Float</code>
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : createDouble
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>Double</code>.</p> <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Double</code>
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : createInteger
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>Integer</code>, handling hex and octal notations.</p> <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Integer</code>
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : createLong
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>Long</code>.</p> <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Long</code>
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : createBigInteger
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>BigInteger</code>.</p> <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>BigInteger</code>
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : createBigDecimal
COMMENT : /** 
 * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p> <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>BigDecimal</code>
 * @throws NumberFormatException if the value cannot be converted
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Returns the minimum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Returns the minimum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Returns the minimum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Returns the minimum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Returns the minimum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Returns the minimum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(float[]) IEEE754rUtils for a version of this method that handles NaN differently
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Returns the maximum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Returns the maximum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Returns the maximum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Returns the maximum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Returns the maximum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Returns the maximum value in an array.</p>
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(float[]) IEEE754rUtils for a version of this method that handles NaN differently
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Gets the minimum of three <code>long</code> values.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Gets the minimum of three <code>int</code> values.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Gets the minimum of three <code>short</code> values.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Gets the minimum of three <code>byte</code> values.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Gets the minimum of three <code>double</code> values.</p> <p>If any value is <code>NaN</code>, <code>NaN</code> is returned. Infinity is handled.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 * @see IEEE754rUtils#min(double,double,double) for a version of this method that handles NaN differently
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : min
COMMENT : /** 
 * <p>Gets the minimum of three <code>float</code> values.</p> <p>If any value is <code>NaN</code>, <code>NaN</code> is returned. Infinity is handled.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 * @see IEEE754rUtils#min(float,float,float) for a version of this method that handles NaN differently
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Gets the maximum of three <code>long</code> values.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Gets the maximum of three <code>int</code> values.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Gets the maximum of three <code>short</code> values.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Gets the maximum of three <code>byte</code> values.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Gets the maximum of three <code>double</code> values.</p> <p>If any value is <code>NaN</code>, <code>NaN</code> is returned. Infinity is handled.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 * @see IEEE754rUtils#max(double,double,double) for a version of this method that handles NaN differently
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : max
COMMENT : /** 
 * <p>Gets the maximum of three <code>float</code> values.</p> <p>If any value is <code>NaN</code>, <code>NaN</code> is returned. Infinity is handled.</p>
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 * @see IEEE754rUtils#max(float,float,float) for a version of this method that handles NaN differently
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : compare
COMMENT : /** 
 * <p>Compares two <code>doubles</code> for order.</p> <p>This method is more comprehensive than the standard Java greater than, less than and equals operators.</p> <ul> <li>It returns <code>-1</code> if the first value is less than the second.</li> <li>It returns <code>+1</code> if the first value is greater than the second.</li> <li>It returns <code>0</code> if the values are equal.</li> </ul> <p> The ordering is as follows, largest to smallest: <ul> <li>NaN <li>Positive infinity <li>Maximum double <li>Normal positive numbers <li>+0.0 <li>-0.0 <li>Normal negative numbers <li>Minimum double (<code>-Double.MAX_VALUE</code>) <li>Negative infinity </ul> </p> <p>Comparing <code>NaN</code> with <code>NaN</code> will return <code>0</code>.</p>
 * @param lhs  the first <code>double</code>
 * @param rhs  the second <code>double</code>
 * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,<code>0</code> if equal to rhs
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : compare
COMMENT : /** 
 * <p>Compares two floats for order.</p> <p>This method is more comprehensive than the standard Java greater than, less than and equals operators.</p> <ul> <li>It returns <code>-1</code> if the first value is less than the second. <li>It returns <code>+1</code> if the first value is greater than the second. <li>It returns <code>0</code> if the values are equal. </ul> <p> The ordering is as follows, largest to smallest: <ul> <li>NaN <li>Positive infinity <li>Maximum float <li>Normal positive numbers <li>+0.0 <li>-0.0 <li>Normal negative numbers <li>Minimum float (<code>-Float.MAX_VALUE</code>) <li>Negative infinity </ul> <p>Comparing <code>NaN</code> with <code>NaN</code> will return <code>0</code>.</p>
 * @param lhs  the first <code>float</code>
 * @param rhs  the second <code>float</code>
 * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,<code>0</code> if equal to rhs
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : isDigits
COMMENT : /** 
 * <p>Checks whether the <code>String</code> contains only digit characters.</p> <p><code>Null</code> and empty String will return <code>false</code>.</p>
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if str contains only unicode numeric
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : isNumber
COMMENT : /** 
 * <p>Checks whether the String a valid Java number.</p> <p>Valid numbers include hexadecimal marked with the <code>0x</code> qualifier, scientific notation and numbers marked with a type qualifier (e.g. 123L).</p> <p><code>Null</code> and empty String will return <code>false</code>.</p>
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : main
COMMENT : /** 
 * Main method.
 * @param args  command line arguments, ignored
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : suite
COMMENT : /** 
 * Return a new test suite containing this test case.
 * @return a new test suite containing this test case
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testNoneLookup
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testSystemProperiesLookup
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testMapLookup
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testMapLookup_nullMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableLong
COMMENT : /** 
 * Constructs a new MutableLong with the default value of zero.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableLong
COMMENT : /** 
 * Constructs a new MutableLong with the specified value.
 * @param value a value.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableLong
COMMENT : /** 
 * Constructs a new MutableLong with the specified value.
 * @param value a value.
 * @throws NullPointerException if the object is null
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : getValue
COMMENT : /** 
 * Gets the value as a Long instance.
 * @return the value as a Long
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value.
 * @param value the value to set
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value from any Number instance.
 * @param value the value to set
 * @throws NullPointerException if the object is null
 * @throws ClassCastException if the type is not a  {@link Number}
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : increment
COMMENT : /** 
 * Increments the value.
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : decrement
COMMENT : /** 
 * Decrements the value.
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : add
COMMENT : /** 
 * Adds a value.
 * @param operand the value to add
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : add
COMMENT : /** 
 * Adds a value.
 * @param operand the value to add
 * @throws NullPointerException if the object is null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : subtract
COMMENT : /** 
 * Subtracts a value.
 * @param operand the value to add
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : subtract
COMMENT : /** 
 * Subtracts a value.
 * @param operand the value to add
 * @throws NullPointerException if the object is null
 * @since Commons Lang 2.2
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : intValue
COMMENT : /** 
 * Returns the value of this MutableLong as a int.
 * @return the numeric value represented by this object after conversion to type int.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : longValue
COMMENT : /** 
 * Returns the value of this MutableLong as a long.
 * @return the numeric value represented by this object after conversion to type long.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : floatValue
COMMENT : /** 
 * Returns the value of this MutableLong as a float.
 * @return the numeric value represented by this object after conversion to type float.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : doubleValue
COMMENT : /** 
 * Returns the value of this MutableLong as a double.
 * @return the numeric value represented by this object after conversion to type double.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toLong
COMMENT : /** 
 * Gets this mutable as an instance of Long.
 * @return a Long instance containing the value from this mutable
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : equals
COMMENT : /** 
 * Compares this object against the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>MutableLong</code> object that contains the same <code>long</code> value as this object.
 * @param obj the object to compare with.
 * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : hashCode
COMMENT : /** 
 * Returns a suitable hashcode for this mutable.
 * @return a suitable hashcode
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : compareTo
COMMENT : /** 
 * Compares this mutable to another in ascending order.
 * @param obj the mutable to compare to
 * @return negative if this is less, zero if equal, positive if greater
 * @throws ClassCastException if the argument is not a MutableLong
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toString
COMMENT : /** 
 * Returns the String value of this mutable.
 * @return the mutable value as a string
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : NestLinked
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : ColorEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : Broken3OperationEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumClass
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : PlusOperation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : MinusOperation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : DefaultToStringStyleTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBlank
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testAppendSuper
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testPerson
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : StopWatchTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testStopWatchSimple
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testStopWatchSimpleGet
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testStopWatchSplit
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testStopWatchSuspend
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testLang315
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testBadStates
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testGetStartTime
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Replaces all the occurrences of variables in the given source object with their matching values from the map.
 * @param source  the source text containing the variables to substitute, null returns null
 * @param valueMap  the map with the values, may be null
 * @return the result of the replace operation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Replaces all the occurrences of variables in the given source object with their matching values from the map. This method allows to specifiy a custom variable prefix and suffix
 * @param source  the source text containing the variables to substitute, null returns null
 * @param valueMap  the map with the values, may be null
 * @param prefix  the prefix of variables, not null
 * @param suffix  the suffix of variables, not null
 * @return the result of the replace operation
 * @throws IllegalArgumentException if the prefix or suffix is null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceSystemProperties
COMMENT : /** 
 * Replaces all the occurrences of variables in the given source object with their matching values from the system properties.
 * @param source  the source text containing the variables to substitute, null returns null
 * @return the result of the replace operation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrSubstitutor
COMMENT : /** 
 * Creates a new instance with defaults for variable prefix and suffix and the escaping character.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrSubstitutor
COMMENT : /** 
 * Creates a new instance and initializes it. Uses defaults for variable prefix and suffix and the escaping character.
 * @param valueMap  the map with the variables' values, may be null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrSubstitutor
COMMENT : /** 
 * Creates a new instance and initializes it. Uses a default escaping character.
 * @param valueMap  the map with the variables' values, may be null
 * @param prefix  the prefix for variables, not null
 * @param suffix  the suffix for variables, not null
 * @throws IllegalArgumentException if the prefix or suffix is null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrSubstitutor
COMMENT : /** 
 * Creates a new instance and initializes it.
 * @param valueMap  the map with the variables' values, may be null
 * @param prefix  the prefix for variables, not null
 * @param suffix  the suffix for variables, not null
 * @param escape  the escape character
 * @throws IllegalArgumentException if the prefix or suffix is null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrSubstitutor
COMMENT : /** 
 * Creates a new instance and initializes it.
 * @param variableResolver  the variable resolver, may be null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrSubstitutor
COMMENT : /** 
 * Creates a new instance and initializes it.
 * @param variableResolver  the variable resolver, may be null
 * @param prefix  the prefix for variables, not null
 * @param suffix  the suffix for variables, not null
 * @param escape  the escape character
 * @throws IllegalArgumentException if the prefix or suffix is null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrSubstitutor
COMMENT : /** 
 * Creates a new instance and initializes it.
 * @param variableResolver  the variable resolver, may be null
 * @param prefixMatcher  the prefix for variables, not null
 * @param suffixMatcher  the suffix for variables, not null
 * @param escape  the escape character
 * @throws IllegalArgumentException if the prefix or suffix is null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Replaces all the occurrences of variables with their matching values from the resolver using the given source string as a template.
 * @param source  the string to replace in, null returns null
 * @return the result of the replace operation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Replaces all the occurrences of variables with their matching values from the resolver using the given source string as a template. <p> Only the specified portion of the string will be processed. The rest of the string is not processed, and is not returned.
 * @param source  the string to replace in, null returns null
 * @param offset  the start offset within the array, must be valid
 * @param length  the length within the array to be processed, must be valid
 * @return the result of the replace operation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Replaces all the occurrences of variables with their matching values from the resolver using the given source array as a template. The array is not altered by this method.
 * @param source  the character array to replace in, not altered, null returns null
 * @return the result of the replace operation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Replaces all the occurrences of variables with their matching values from the resolver using the given source array as a template. The array is not altered by this method. <p> Only the specified portion of the array will be processed. The rest of the array is not processed, and is not returned.
 * @param source  the character array to replace in, not altered, null returns null
 * @param offset  the start offset within the array, must be valid
 * @param length  the length within the array to be processed, must be valid
 * @return the result of the replace operation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Replaces all the occurrences of variables with their matching values from the resolver using the given source buffer as a template. The buffer is not altered by this method.
 * @param source  the buffer to use as a template, not changed, null returns null
 * @return the result of the replace operation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Replaces all the occurrences of variables with their matching values from the resolver using the given source buffer as a template. The buffer is not altered by this method. <p> Only the specified portion of the buffer will be processed. The rest of the buffer is not processed, and is not returned.
 * @param source  the buffer to use as a template, not changed, null returns null
 * @param offset  the start offset within the array, must be valid
 * @param length  the length within the array to be processed, must be valid
 * @return the result of the replace operation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Replaces all the occurrences of variables with their matching values from the resolver using the given source builder as a template. The builder is not altered by this method.
 * @param source  the builder to use as a template, not changed, null returns null
 * @return the result of the replace operation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Replaces all the occurrences of variables with their matching values from the resolver using the given source builder as a template. The builder is not altered by this method. <p> Only the specified portion of the builder will be processed. The rest of the builder is not processed, and is not returned.
 * @param source  the builder to use as a template, not changed, null returns null
 * @param offset  the start offset within the array, must be valid
 * @param length  the length within the array to be processed, must be valid
 * @return the result of the replace operation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Replaces all the occurrences of variables in the given source object with their matching values from the resolver. The input source object is converted to a string using <code>toString</code> and is not altered.
 * @param source  the source to replace in, null returns null
 * @return the result of the replace operation
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceIn
COMMENT : /** 
 * Replaces all the occurrences of variables within the given source buffer with their matching values from the resolver. The buffer is updated with the result.
 * @param source  the buffer to replace in, updated, null returns zero
 * @return true if altered
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceIn
COMMENT : /** 
 * Replaces all the occurrences of variables within the given source buffer with their matching values from the resolver. The buffer is updated with the result. <p> Only the specified portion of the buffer will be processed. The rest of the buffer is not processed, but it is not deleted.
 * @param source  the buffer to replace in, updated, null returns zero
 * @param offset  the start offset within the array, must be valid
 * @param length  the length within the buffer to be processed, must be valid
 * @return true if altered
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceIn
COMMENT : /** 
 * Replaces all the occurrences of variables within the given source builder with their matching values from the resolver.
 * @param source  the builder to replace in, updated, null returns zero
 * @return true if altered
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceIn
COMMENT : /** 
 * Replaces all the occurrences of variables within the given source builder with their matching values from the resolver. <p> Only the specified portion of the builder will be processed. The rest of the builder is not processed, but it is not deleted.
 * @param source  the builder to replace in, null returns zero
 * @param offset  the start offset within the array, must be valid
 * @param length  the length within the builder to be processed, must be valid
 * @return true if altered
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : substitute
COMMENT : /** 
 * Internal method that substitutes the variables. <p> Most users of this class do not need to call this method. This method will be called automatically by another (public) method. <p> Writers of subclasses can override this method if they need access to the substitution process at the start or end.
 * @param buf  the string builder to substitute into, not null
 * @param offset  the start offset within the builder, must be valid
 * @param length  the length within the builder to be processed, must be valid
 * @return true if altered
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : substitute
COMMENT : /** 
 * Recursive handler for multiple levels of interpolation. This is the main interpolation method, which resolves the values of all variable references contained in the passed in text.
 * @param buf  the string builder to substitute into, not null
 * @param offset  the start offset within the builder, must be valid
 * @param length  the length within the builder to be processed, must be valid
 * @param priorVariables  the stack keeping track of the replaced variables, may be null
 * @return the length change that occurs, unless priorVariables is null when the intrepresents a boolean flag as to whether any change occurred.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : checkCyclicSubstitution
COMMENT : /** 
 * Checks if the specified variable is already in the stack (list) of variables.
 * @param varName  the variable name to check
 * @param priorVariables  the list of prior variables
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : resolveVariable
COMMENT : /** 
 * Internal method that resolves the value of a variable. <p> Most users of this class do not need to call this method. This method is called automatically by the substitution process. <p> Writers of subclasses can override this method if they need to alter how each substitution occurs. The method is passed the variable's name and must return the corresponding value. This implementation uses the {@link #getVariableResolver()} with the variable's name as the key.
 * @param variableName  the name of the variable, not null
 * @param buf  the buffer where the substitution is occurring, not null
 * @param startPos  the start position of the variable including the prefix, valid
 * @param endPos  the end position of the variable including the suffix, valid
 * @return the variable's value or <b>null</b> if the variable is unknown
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getEscapeChar
COMMENT : /** 
 * Returns the escape character.
 * @return the character used for escaping variable references
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setEscapeChar
COMMENT : /** 
 * Sets the escape character. If this character is placed before a variable reference in the source text, this variable will be ignored.
 * @param escapeCharacter  the escape character (0 for disabling escaping)
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getVariablePrefixMatcher
COMMENT : /** 
 * Gets the variable prefix matcher currently in use. <p> The variable prefix is the characer or characters that identify the start of a variable. This prefix is expressed in terms of a matcher allowing advanced prefix matches.
 * @return the prefix matcher in use
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setVariablePrefixMatcher
COMMENT : /** 
 * Sets the variable prefix matcher currently in use. <p> The variable prefix is the characer or characters that identify the start of a variable. This prefix is expressed in terms of a matcher allowing advanced prefix matches.
 * @param prefixMatcher  the prefix matcher to use, null ignored
 * @return this, to enable chaining
 * @throws IllegalArgumentException if the prefix matcher is null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setVariablePrefix
COMMENT : /** 
 * Sets the variable prefix to use. <p> The variable prefix is the characer or characters that identify the start of a variable. This method allows a single character prefix to be easily set.
 * @param prefix  the prefix character to use
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setVariablePrefix
COMMENT : /** 
 * Sets the variable prefix to use. <p> The variable prefix is the characer or characters that identify the start of a variable. This method allows a string prefix to be easily set.
 * @param prefix  the prefix for variables, not null
 * @return this, to enable chaining
 * @throws IllegalArgumentException if the prefix is null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getVariableSuffixMatcher
COMMENT : /** 
 * Gets the variable suffix matcher currently in use. <p> The variable suffix is the characer or characters that identify the end of a variable. This suffix is expressed in terms of a matcher allowing advanced suffix matches.
 * @return the suffix matcher in use
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setVariableSuffixMatcher
COMMENT : /** 
 * Sets the variable suffix matcher currently in use. <p> The variable suffix is the characer or characters that identify the end of a variable. This suffix is expressed in terms of a matcher allowing advanced suffix matches.
 * @param suffixMatcher  the suffix matcher to use, null ignored
 * @return this, to enable chaining
 * @throws IllegalArgumentException if the suffix matcher is null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setVariableSuffix
COMMENT : /** 
 * Sets the variable suffix to use. <p> The variable suffix is the characer or characters that identify the end of a variable. This method allows a single character suffix to be easily set.
 * @param suffix  the suffix character to use
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setVariableSuffix
COMMENT : /** 
 * Sets the variable suffix to use. <p> The variable suffix is the characer or characters that identify the end of a variable. This method allows a string suffix to be easily set.
 * @param suffix  the suffix for variables, not null
 * @return this, to enable chaining
 * @throws IllegalArgumentException if the suffix is null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getVariableResolver
COMMENT : /** 
 * Gets the VariableResolver that is used to lookup variables.
 * @return the VariableResolver
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setVariableResolver
COMMENT : /** 
 * Sets the VariableResolver that is used to lookup variables.
 * @param variableResolver  the VariableResolver
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : DoubleRangeTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : createRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : createRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor1a
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor1b
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor2a
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor2b
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : AllLangTestSuite
COMMENT : /** 
 * Construct a new instance.
 */



PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : /** 
 * Command-line interface.
 */



PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : /** 
 * Get the suite of tests
 */



PACKAGE : package org.apache.commons.lang;

NAME : isSupported
COMMENT : /** 
 * <p> Returns whether the named charset is supported. </p> <p> This is similar to <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html#isSupported(java.lang.String)"> java.nio.charset.Charset.isSupported(String)</a> </p>
 * @param name the name of the requested charset; may be either a canonical name or an alias
 * @return <code>true</code> if, and only if, support for the named charset is available in the current Javavirtual machine
 * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character
     *      encoding names</a>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getDefaultStyle
COMMENT : /** 
 * <p>Gets the default <code>ToStringStyle</code> to use.</p> <p>This could allow the <code>ToStringStyle</code> to be controlled for an entire application with one call.</p> <p>This might be used to have a verbose <code>ToStringStyle</code> during development and a compact <code>ToStringStyle</code> in production.</p>
 * @return the default <code>ToStringStyle</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionToString
COMMENT : /** 
 * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>
 * @param object  the Object to be output
 * @return the String result
 * @see ReflectionToStringBuilder#toString(Object)
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionToString
COMMENT : /** 
 * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>
 * @param object  the Object to be output
 * @param style  the style of the <code>toString</code> to create, may be <code>null</code>
 * @return the String result
 * @see ReflectionToStringBuilder#toString(Object,ToStringStyle)
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionToString
COMMENT : /** 
 * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>
 * @param object  the Object to be output
 * @param style  the style of the <code>toString</code> to create, may be <code>null</code>
 * @param outputTransients  whether to include transient fields
 * @return the String result
 * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean)
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionToString
COMMENT : /** 
 * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>
 * @param object  the Object to be output
 * @param style  the style of the <code>toString</code> to create, may be <code>null</code>
 * @param outputTransients  whether to include transient fields
 * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be <code>null</code>
 * @return the String result
 * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean,boolean,Class)
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setDefaultStyle
COMMENT : /** 
 * <p>Sets the default <code>ToStringStyle</code> to use.</p>
 * @param style  the default <code>ToStringStyle</code>
 * @throws IllegalArgumentException if the style is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : ToStringBuilder
COMMENT : /** 
 * <p>Constructor for <code>ToStringBuilder</code>.</p> <p>This constructor outputs using the default style set with <code>setDefaultStyle</code>.</p>
 * @param object  the Object to build a <code>toString</code> for
 * @throws IllegalArgumentException  if the Object passed in is<code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : ToStringBuilder
COMMENT : /** 
 * <p>Constructor for <code>ToStringBuilder</code> specifying the output style.</p> <p>If the style is <code>null</code>, the default style is used.</p>
 * @param object  the Object to build a <code>toString</code> for
 * @param style  the style of the <code>toString</code> to create,may be <code>null</code>
 * @throws IllegalArgumentException  if the Object passed in is<code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : ToStringBuilder
COMMENT : /** 
 * <p>Constructor for <code>ToStringBuilder</code>.</p> <p>If the style is <code>null</code>, the default style is used.</p> <p>If the buffer is <code>null</code>, a new one is created.</p>
 * @param object  the Object to build a <code>toString</code> for
 * @param style  the style of the <code>toString</code> to create,may be <code>null</code>
 * @param buffer  the <code>StringBuffer</code> to populate, may be<code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>boolean</code> value.</p>
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>boolean</code> array.</p>
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>byte</code> value.</p>
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>byte</code> array.</p>
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>char</code> value.</p>
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>char</code> array.</p>
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>double</code> value.</p>
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>double</code> array.</p>
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>float</code> value.</p>
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>float</code> array.</p>
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>int</code> value.</p>
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>int</code> array.</p>
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>long</code> value.</p>
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>long</code> array.</p>
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>Object</code> value.</p>
 * @param obj  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>Object</code> array.</p>
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>short</code> value.</p>
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>short</code> array.</p>
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>boolean</code> value.</p>
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>boolean</code> array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>hashCode</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>boolean</code> array.</p> <p>A boolean parameter controls the level of detail to show. Setting <code>true</code> will output the array in full. Setting <code>false</code> will output a summary, typically the size of the array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>byte</code> value.</p>
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>byte</code> array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>byte</code> array.</p> <p>A boolean parameter controls the level of detail to show. Setting <code>true</code> will output the array in full. Setting <code>false</code> will output a summary, typically the size of the array.
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>char</code> value.</p>
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>char</code> array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>char</code> array.</p> <p>A boolean parameter controls the level of detail to show. Setting <code>true</code> will output the array in full. Setting <code>false</code> will output a summary, typically the size of the array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>double</code> value.</p>
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>double</code> array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>double</code> array.</p> <p>A boolean parameter controls the level of detail to show. Setting <code>true</code> will output the array in full. Setting <code>false</code> will output a summary, typically the size of the array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>float</code> value.</p>
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>float</code> array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>float</code> array.</p> <p>A boolean parameter controls the level of detail to show. Setting <code>true</code> will output the array in full. Setting <code>false</code> will output a summary, typically the size of the array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>int</code> value.</p>
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>int</code> array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>int</code> array.</p> <p>A boolean parameter controls the level of detail to show. Setting <code>true</code> will output the array in full. Setting <code>false</code> will output a summary, typically the size of the array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>long</code> value.</p>
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>long</code> array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>long</code> array.</p> <p>A boolean parameter controls the level of detail to show. Setting <code>true</code> will output the array in full. Setting <code>false</code> will output a summary, typically the size of the array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>Object</code> value.</p>
 * @param fieldName  the field name
 * @param obj  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>Object</code> value.</p>
 * @param fieldName  the field name
 * @param obj  the value to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail,<code>false</code> for summary info
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>Object</code> array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>Object</code> array.</p> <p>A boolean parameter controls the level of detail to show. Setting <code>true</code> will output the array in full. Setting <code>false</code> will output a summary, typically the size of the array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>short</code> value.</p>
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>short</code> array.</p>
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>short</code> array.</p> <p>A boolean parameter controls the level of detail to show. Setting <code>true</code> will output the array in full. Setting <code>false</code> will output a summary, typically the size of the array.
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendAsObjectToString
COMMENT : /** 
 * <p>Appends with the same format as the default <code>Object toString() </code> method. Appends the class name followed by  {@link System#identityHashCode(java.lang.Object)}.</p>
 * @param object  the <code>Object</code> whose class name and id to output
 * @return this
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSuper
COMMENT : /** 
 * <p>Append the <code>toString</code> from the superclass.</p> <p>This method assumes that the superclass uses the same <code>ToStringStyle</code> as this one.</p> <p>If <code>superToString</code> is <code>null</code>, no change is made.</p>
 * @param superToString  the result of <code>super.toString()</code>
 * @return this
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendToString
COMMENT : /** 
 * <p>Append the <code>toString</code> from another object.</p> <p>This method is useful where a class delegates most of the implementation of its properties to another class. You can then call <code>toString()</code> on the other class and pass the result into this method.</p> <pre> private AnotherObject delegate; private String fieldInThisClass; public String toString() { return new ToStringBuilder(this). appendToString(delegate.toString()). append(fieldInThisClass). toString(); }</pre> <p>This method assumes that the other object uses the same <code>ToStringStyle</code> as this one.</p> <p>If the <code>toString</code> is <code>null</code>, no change is made.</p>
 * @param toString  the result of <code>toString()</code> on another object
 * @return this
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getObject
COMMENT : /** 
 * <p>Returns the <code>Object</code> being output.</p>
 * @return The object being output.
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getStringBuffer
COMMENT : /** 
 * <p>Gets the <code>StringBuffer</code> being populated.</p>
 * @return the <code>StringBuffer</code> being populated
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getStyle
COMMENT : /** 
 * <p>Gets the <code>ToStringStyle</code> being used.</p>
 * @return the <code>ToStringStyle</code> being used
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : /** 
 * <p>Returns the built <code>toString</code>.</p> <p>This method appends the end of data indicator, and can only be called once. Use  {@link #getStringBuffer} to get the current string state.</p><p>If the object is <code>null</code>, return the style's <code>nullText</code></p>
 * @return the String <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : StringUtilsIsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAlpha
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAlphanumeric
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsWhitespace
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAlphaspace
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAlphanumericSpace
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsAsciiPrintable_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsNumeric
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsNumericSpace
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : TextTestSuite
COMMENT : /** 
 * Construct a new instance.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : main
COMMENT : /** 
 * Command-line interface.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : suite
COMMENT : /** 
 * Get the suite of tests
 */



PACKAGE : package org.apache.commons.lang;

NAME : parseCVS
COMMENT : /** 
 * <p>Parses a date string formatted in CVS format.</p>
 * @param dateStr  the date to parse
 * @return the parsed date
 * @throws IllegalArgumentException if the date cannot be parsed
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : FloatRange
COMMENT : /** 
 * <p>Constructs a new <code>FloatRange</code> using the specified number as both the minimum and maximum in this range.</p>
 * @param number  the number to use for this range
 * @throws IllegalArgumentException if the number is <code>NaN</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : FloatRange
COMMENT : /** 
 * <p>Constructs a new <code>FloatRange</code> using the specified number as both the minimum and maximum in this range.</p>
 * @param number  the number to use for this range, must notbe <code>null</code>
 * @throws IllegalArgumentException if the number is <code>null</code>
 * @throws IllegalArgumentException if the number is <code>NaN</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : FloatRange
COMMENT : /** 
 * <p>Constructs a new <code>FloatRange</code> with the specified minimum and maximum numbers (both inclusive).</p> <p>The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.</p>
 * @param number1  first number that defines the edge of the range, inclusive
 * @param number2  second number that defines the edge of the range, inclusive
 * @throws IllegalArgumentException if either number is <code>NaN</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : FloatRange
COMMENT : /** 
 * <p>Constructs a new <code>FloatRange</code> with the specified minimum and maximum numbers (both inclusive).</p> <p>The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.</p>
 * @param number1  first number that defines the edge of the range, inclusive
 * @param number2  second number that defines the edge of the range, inclusive
 * @throws IllegalArgumentException if either number is <code>null</code>
 * @throws IllegalArgumentException if either number is <code>NaN</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumNumber
COMMENT : /** 
 * <p>Returns the minimum number in this range.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumLong
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>long</code>.</p> <p>This conversion can lose information for large values or decimals.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumInteger
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>int</code>.</p> <p>This conversion can lose information for large values or decimals.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumDouble
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>double</code>.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumFloat
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>float</code>.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumNumber
COMMENT : /** 
 * <p>Returns the maximum number in this range.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumLong
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>long</code>.</p> <p>This conversion can lose information for large values or decimals.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumInteger
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>int</code>.</p> <p>This conversion can lose information for large values or decimals.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumDouble
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>double</code>.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumFloat
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>float</code>.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsNumber
COMMENT : /** 
 * <p>Tests whether the specified <code>number</code> occurs within this range using <code>float</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param number  the number to test, may be <code>null</code>
 * @return <code>true</code> if the specified number occurs within this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsFloat
COMMENT : /** 
 * <p>Tests whether the specified <code>float</code> occurs within this range using <code>float</code> comparison.</p> <p>This implementation overrides the superclass for performance as it is the most common case.</p>
 * @param value  the float to test
 * @return <code>true</code> if the specified number occurs within thisrange by <code>float</code> comparison
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsRange
COMMENT : /** 
 * <p>Tests whether the specified range occurs entirely within this range using <code>float</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param range  the range to test, may be <code>null</code>
 * @return <code>true</code> if the specified range occurs entirely within this range
 * @throws IllegalArgumentException if the range is not of this type
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : overlapsRange
COMMENT : /** 
 * <p>Tests whether the specified range overlaps with this range using <code>float</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param range  the range to test, may be <code>null</code>
 * @return <code>true</code> if the specified range overlaps with this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : equals
COMMENT : /** 
 * <p>Compares this range to another object to test if they are equal.</p>. <p>To be equal, the class, minimum and maximum must be equal.</p>
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : hashCode
COMMENT : /** 
 * <p>Gets a hashCode for the range.</p>
 * @return a hash code value for this object
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toString
COMMENT : /** 
 * <p>Gets the range as a <code>String</code>.</p> <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>
 * @return the <code>String</code> representation of this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : DoubleRange
COMMENT : /** 
 * <p>Constructs a new <code>DoubleRange</code> using the specified number as both the minimum and maximum in this range.</p>
 * @param number  the number to use for this range
 * @throws IllegalArgumentException if the number is <code>NaN</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : DoubleRange
COMMENT : /** 
 * <p>Constructs a new <code>DoubleRange</code> using the specified number as both the minimum and maximum in this range.</p>
 * @param number  the number to use for this range, must notbe <code>null</code>
 * @throws IllegalArgumentException if the number is <code>null</code>
 * @throws IllegalArgumentException if the number is <code>NaN</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : DoubleRange
COMMENT : /** 
 * <p>Constructs a new <code>DoubleRange</code> with the specified minimum and maximum numbers (both inclusive).</p> <p>The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.</p>
 * @param number1  first number that defines the edge of the range, inclusive
 * @param number2  second number that defines the edge of the range, inclusive
 * @throws IllegalArgumentException if either number is <code>NaN</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : DoubleRange
COMMENT : /** 
 * <p>Constructs a new <code>DoubleRange</code> with the specified minimum and maximum numbers (both inclusive).</p> <p>The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.</p>
 * @param number1  first number that defines the edge of the range, inclusive
 * @param number2  second number that defines the edge of the range, inclusive
 * @throws IllegalArgumentException if either number is <code>null</code>
 * @throws IllegalArgumentException if either number is <code>NaN</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumNumber
COMMENT : /** 
 * <p>Returns the minimum number in this range.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumLong
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>long</code>.</p> <p>This conversion can lose information for large values or decimals.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumInteger
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>int</code>.</p> <p>This conversion can lose information for large values or decimals.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumDouble
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>double</code>.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumFloat
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>float</code>.</p> <p>This conversion can lose information for large values.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumNumber
COMMENT : /** 
 * <p>Returns the maximum number in this range.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumLong
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>long</code>.</p> <p>This conversion can lose information for large values or decimals.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumInteger
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>int</code>.</p> <p>This conversion can lose information for large values or decimals.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumDouble
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>double</code>.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumFloat
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>float</code>.</p> <p>This conversion can lose information for large values.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsNumber
COMMENT : /** 
 * <p>Tests whether the specified <code>number</code> occurs within this range using <code>double</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param number  the number to test, may be <code>null</code>
 * @return <code>true</code> if the specified number occurs within this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsDouble
COMMENT : /** 
 * <p>Tests whether the specified <code>double</code> occurs within this range using <code>double</code> comparison.</p> <p>This implementation overrides the superclass for performance as it is the most common case.</p>
 * @param value  the double to test
 * @return <code>true</code> if the specified number occurs within thisrange by <code>double</code> comparison
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsRange
COMMENT : /** 
 * <p>Tests whether the specified range occurs entirely within this range using <code>double</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param range  the range to test, may be <code>null</code>
 * @return <code>true</code> if the specified range occurs entirely within this range
 * @throws IllegalArgumentException if the range is not of this type
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : overlapsRange
COMMENT : /** 
 * <p>Tests whether the specified range overlaps with this range using <code>double</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param range  the range to test, may be <code>null</code>
 * @return <code>true</code> if the specified range overlaps with this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : equals
COMMENT : /** 
 * <p>Compares this range to another object to test if they are equal.</p>. <p>To be equal, the class, minimum and maximum must be equal.</p>
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : hashCode
COMMENT : /** 
 * <p>Gets a hashCode for the range.</p>
 * @return a hash code value for this object
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toString
COMMENT : /** 
 * <p>Gets the range as a <code>String</code>.</p> <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>
 * @return the <code>String</code> representation of this range
 */



PACKAGE : package org.apache.commons.lang;

NAME : StringUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCaseFunctions
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSwapCase_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJoin_Objectarray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJoin_ArrayChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJoin_ArrayString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJoin_IteratorChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJoin_IteratorString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJoin_CollectionChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJoin_CollectionString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeprecatedConcatenate_Objectarray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSplit_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSplit_StringChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSplit_StringString_StringStringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : innerTestSplit
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSplitByWholeString_StringStringBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSplitByWholeString_StringStringBooleanInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSplitByWholeSeparatorPreserveAllTokens_StringStringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSplitPreserveAllTokens_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSplitPreserveAllTokens_StringChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSplitPreserveAllTokens_StringString_StringStringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : innerTestSplitPreserveAllTokens
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSplitByCharacterType
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSplitByCharacterTypeCamelCase
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeprecatedDeleteSpace_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeleteWhitespace_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReplace_StringStringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReplace_StringStringStringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReplaceOnce_StringStringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReplace_StringStringArrayStringArray
COMMENT : /** 
 * Test method for 'org.apache.commons.lang.StringUtils.replaceEach(String, String[], String[])'
 */



PACKAGE : package org.apache.commons.lang;

NAME : testReplace_StringStringArrayStringArrayBoolean
COMMENT : /** 
 * Test method for 'org.apache.commons.lang.StringUtils.replaceEachRepeatedly(String, String[], String[])'
 */



PACKAGE : package org.apache.commons.lang;

NAME : testReplaceChars_StringCharChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReplaceChars_StringStringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeprecatedOverlayString_StringStringIntInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testOverlay_StringStringIntInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRepeat_StringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeprecatedChompFunctions
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testChop
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testChomp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testChopNewLine
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRightPad_StringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRightPad_StringIntChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRightPad_StringIntString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLeftPad_StringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLeftPad_StringIntChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLeftPad_StringIntString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLength
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCenter_StringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCenter_StringIntChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCenter_StringIntString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReverse_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testReverseDelimited_StringChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeprecatedReverseDelimitedString_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDefault_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDefault_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDefaultIfEmpty_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeprecatedEscapeFunctions_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAbbreviate_StringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAbbreviate_StringIntInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertAbbreviateWithOffset
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDifference_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDifferenceAt_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetLevenshteinDistance_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEMPTY
COMMENT : /** 
 * A sanity check for  {@link StringUtils#EMPTY}.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testRemoveStart
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveStartIgnoreCase
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveEnd
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemoveEndIgnoreCase
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemove_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRemove_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDifferenceAt_StringArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetCommonPrefix_StringArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : getCause
COMMENT : /** 
 * Returns the reference to the exception or error that caused the exception implementing the <code>Nestable</code> to be thrown.
 * @return throwable that caused the original exception
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * Returns the error message of this and any nested <code>Throwable</code>.
 * @return the error message
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * Returns the error message of the <code>Throwable</code> in the chain of <code>Throwable</code>s at the specified index, numbered from 0.
 * @param index the index of the <code>Throwable</code> in the chain of<code>Throwable</code>s
 * @return the error message, or null if the <code>Throwable</code> at thespecified index in the chain does not contain a message
 * @throws IndexOutOfBoundsException if the <code>index</code> argument isnegative or not less than the count of <code>Throwable</code>s in the chain
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessages
COMMENT : /** 
 * Returns the error message of this and any nested <code>Throwable</code>s in an array of Strings, one element for each message. Any <code>Throwable</code> not containing a message is represented in the array by a null. This has the effect of cause the length of the returned array to be equal to the result of the  {@link #getThrowableCount()}operation.
 * @return the error messages
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * Returns the <code>Throwable</code> in the chain of <code>Throwable</code>s at the specified index, numbered from 0.
 * @param index the index, numbered from 0, of the <code>Throwable</code> inthe chain of <code>Throwable</code>s
 * @return the <code>Throwable</code>
 * @throws IndexOutOfBoundsException if the <code>index</code> argument isnegative or not less than the count of <code>Throwable</code>s in the chain
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableCount
COMMENT : /** 
 * Returns the number of nested <code>Throwable</code>s represented by this <code>Nestable</code>, including this <code>Nestable</code>.
 * @return the throwable count
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowables
COMMENT : /** 
 * Returns this <code>Nestable</code> and any nested <code>Throwable</code>s in an array of <code>Throwable</code>s, one element for each <code>Throwable</code>.
 * @return the <code>Throwable</code>s
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * Returns the index, numbered from 0, of the first occurrence of the specified type, or a subclass, in the chain of <code>Throwable</code>s. The method returns -1 if the specified type is not found in the chain. <p> NOTE: From v2.1, we have clarified the <code>Nestable</code> interface such that this method matches subclasses. If you want to NOT match subclasses, please use {@link ExceptionUtils#indexOfThrowable(Throwable,Class)}(which is avaiable in all versions of lang).
 * @param type  the type to find, subclasses match, null returns -1
 * @return index of the first occurrence of the type in the chain, or -1 ifthe type is not found
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * Returns the index, numbered from 0, of the first <code>Throwable</code> that matches the specified type, or a subclass, in the chain of <code>Throwable</code>s with an index greater than or equal to the specified index. The method returns -1 if the specified type is not found in the chain. <p> NOTE: From v2.1, we have clarified the <code>Nestable</code> interface such that this method matches subclasses. If you want to NOT match subclasses, please use {@link ExceptionUtils#indexOfThrowable(Throwable,Class,int)}(which is avaiable in all versions of lang).
 * @param type  the type to find, subclasses match, null returns -1
 * @param fromIndex the index, numbered from 0, of the starting position inthe chain to be searched
 * @return index of the first occurrence of the type in the chain, or -1 ifthe type is not found
 * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argumentis negative or not less than the count of <code>Throwable</code>s in the chain
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * Prints the stack trace of this exception to the specified print writer.  Includes information from the exception, if any, which caused this exception.
 * @param out <code>PrintWriter</code> to use for output.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * Prints the stack trace of this exception to the specified print stream.  Includes information from the exception, if any, which caused this exception.
 * @param out <code>PrintStream</code> to use for output.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printPartialStackTrace
COMMENT : /** 
 * Prints the stack trace for this exception only--root cause not included--using the provided writer.  Used by {@link org.apache.commons.lang.exception.NestableDelegate} to writeindividual stack traces to a buffer.  The implementation of this method should call <code>super.printStackTrace(out);</code> in most cases.
 * @param out The writer to use.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : NumberMetaFormat
COMMENT : /** 
 * Create a new NumberMetaFormat.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : NumberMetaFormat
COMMENT : /** 
 * Create a new NumberMetaFormat.
 * @param locale Locale
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : format
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : parseObject
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * Get the locale in use by this <code>NumberMetaFormat</code>.
 * @return Locale
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : initialize
COMMENT : /** 
 * Initialize this NumberMetaFormat.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : createIntegerInstance
COMMENT : /** 
 * Create the "integer" NumberFormat instance for the specified Locale.
 * @param locale the Locale to use
 * @return integer NumberFormat
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : Enum
COMMENT : /** 
 * <p>Constructor to add a new named item to the enumeration.</p>
 * @param name  the name of the enum object,must not be empty or <code>null</code>
 * @throws IllegalArgumentException if the name is <code>null</code>or an empty string
 * @throws IllegalArgumentException if the getEnumClass() method returnsa null or invalid Class
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : init
COMMENT : /** 
 * Initializes the enumeration.
 * @param name  the enum name
 * @throws IllegalArgumentException if the name is null or empty or duplicate
 * @throws IllegalArgumentException if the enumClass is null or invalid
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : readResolve
COMMENT : /** 
 * <p>Handle the deserialization of the class to ensure that multiple copies are not wastefully created, or illegal enum types created.</p>
 * @return the resolved object
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : /** 
 * <p>Gets an <code>Enum</code> object by class and name.</p>
 * @param enumClass  the class of the Enum to get, must notbe <code>null</code>
 * @param name  the name of the <code>Enum</code> to get,may be <code>null</code>
 * @return the enum object, or <code>null</code> if the enum does not exist
 * @throws IllegalArgumentException if the enum classis <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : /** 
 * <p>Gets the <code>Map</code> of <code>Enum</code> objects by name using the <code>Enum</code> class.</p> <p>If the requested class has no enum objects an empty <code>Map</code> is returned.</p>
 * @param enumClass  the class of the <code>Enum</code> to get,must not be <code>null</code>
 * @return the enum object Map
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 * @throws IllegalArgumentException if the enum class is not a subclass of Enum
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : /** 
 * <p>Gets the <code>List</code> of <code>Enum</code> objects using the <code>Enum</code> class.</p> <p>The list is in the order that the objects were created (source code order). If the requested class has no enum objects an empty <code>List</code> is returned.</p>
 * @param enumClass  the class of the <code>Enum</code> to get,must not be <code>null</code>
 * @return the enum object Map
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 * @throws IllegalArgumentException if the enum class is not a subclass of Enum
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : /** 
 * <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects in an <code>Enum</code> class.</p> <p>The <code>Iterator</code> is in the order that the objects were created (source code order). If the requested class has no enum objects an empty <code>Iterator</code> is returned.</p>
 * @param enumClass  the class of the <code>Enum</code> to get,must not be <code>null</code>
 * @return an iterator of the Enum objects
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 * @throws IllegalArgumentException if the enum class is not a subclass of Enum
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getEntry
COMMENT : /** 
 * <p>Gets an <code>Entry</code> from the map of Enums.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @return the enum entry
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : createEntry
COMMENT : /** 
 * <p>Creates an <code>Entry</code> for storing the Enums.</p> <p>This accounts for subclassed Enums.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @return the enum entry
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getName
COMMENT : /** 
 * <p>Retrieve the name of this Enum item, set in the constructor.</p>
 * @return the <code>String</code> name of this Enum item
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumClass
COMMENT : /** 
 * <p>Retrieves the Class of this Enum item, set in the constructor.</p> <p>This is normally the same as <code>getClass()</code>, but for advanced Enums may be different. If overridden, it must return a constant value.</p>
 * @return the <code>Class</code> of the enum
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : equals
COMMENT : /** 
 * <p>Tests for equality.</p> <p>Two Enum objects are considered equal if they have the same class names and the same names. Identity is tested for first, so this method usually runs fast.</p> <p>If the parameter is in a different class loader than this instance, reflection is used to compare the names.</p>
 * @param other  the other object to compare for equality
 * @return <code>true</code> if the Enums are equal
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : hashCode
COMMENT : /** 
 * <p>Returns a suitable hashCode for the enumeration.</p>
 * @return a hashcode based on the name
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : compareTo
COMMENT : /** 
 * <p>Tests for order.</p> <p>The default ordering is alphabetic by name, but this can be overridden by subclasses.</p> <p>If the parameter is in a different class loader than this instance, reflection is used to compare the names.</p>
 * @see java.lang.Comparable#compareTo(Object)
 * @param other  the other object to compare to
 * @return -ve if this is less than the other object, +ve if greaterthan, <code>0</code> of equal
 * @throws ClassCastException if other is not an Enum
 * @throws NullPointerException if other is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getNameInOtherClassLoader
COMMENT : /** 
 * <p>Use reflection to return an objects class name.</p>
 * @param other The object to determine the class name for
 * @return The class name
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : toString
COMMENT : /** 
 * <p>Human readable description of this Enum item.</p>
 * @return String in the form <code>type[name]</code>, for example:<code>Color[Red]</code>. Note that the package name is stripped from the type name.
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : Entry
COMMENT : /** 
 * <p>Restrictive constructor.</p>
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : ValuedEnumTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testName
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testValue
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testCompareTo
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testCompareTo_classloader_equal
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testCompareTo_classloader_different
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testCompareTo_nonEnumType
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testCompareTo_otherEnumType
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testCompareTo_otherType
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testCompareTo_null
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testEquals_classloader_equal
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testEquals_classloader_different
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testIterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testGet
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testGetValue
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testSerialization
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : TotallyUnrelatedClass
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getValue
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : createMessageFormat
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : CharRange
COMMENT : /** 
 * <p>Constructs a <code>CharRange</code> over a single character.</p>
 * @param ch  only character in this range
 */



PACKAGE : package org.apache.commons.lang;

NAME : CharRange
COMMENT : /** 
 * <p>Constructs a <code>CharRange</code> over a single character, optionally negating the range.</p> <p>A negated range includes everything except the specified char.</p>
 * @param ch  only character in this range
 * @param negated  true to express everything except the range
 */



PACKAGE : package org.apache.commons.lang;

NAME : CharRange
COMMENT : /** 
 * <p>Constructs a <code>CharRange</code> over a set of characters.</p>
 * @param start  first character, inclusive, in this range
 * @param end  last character, inclusive, in this range
 */



PACKAGE : package org.apache.commons.lang;

NAME : CharRange
COMMENT : /** 
 * <p>Constructs a <code>CharRange</code> over a set of characters, optionally negating the range.</p> <p>A negated range includes everything except that defined by the start and end characters.</p> <p>If start and end are in the wrong order, they are reversed. Thus <code>a-e</code> is the same as <code>e-a</code>.</p>
 * @param start  first character, inclusive, in this range
 * @param end  last character, inclusive, in this range
 * @param negated  true to express everything except the range
 */



PACKAGE : package org.apache.commons.lang;

NAME : getStart
COMMENT : /** 
 * <p>Gets the start character for this character range.</p>
 * @return the start char (inclusive)
 */



PACKAGE : package org.apache.commons.lang;

NAME : getEnd
COMMENT : /** 
 * <p>Gets the end character for this character range.</p>
 * @return the end char (inclusive)
 */



PACKAGE : package org.apache.commons.lang;

NAME : isNegated
COMMENT : /** 
 * <p>Is this <code>CharRange</code> negated.</p> <p>A negated range includes everything except that defined by the start and end characters.</p>
 * @return <code>true</code> is negated
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Is the character specified contained in this range.</p>
 * @param ch  the character to check
 * @return <code>true</code> if this range contains the input character
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Are all the characters of the passed in range contained in this range.</p>
 * @param range  the range to check against
 * @return <code>true</code> if this range entirely contains the input range
 * @throws IllegalArgumentException if <code>null</code> input
 */



PACKAGE : package org.apache.commons.lang;

NAME : equals
COMMENT : /** 
 * <p>Compares two CharRange objects, returning true if they represent exactly the same range of characters defined in the same way.</p>
 * @param obj  the object to compare to
 * @return true if equal
 */



PACKAGE : package org.apache.commons.lang;

NAME : hashCode
COMMENT : /** 
 * <p>Gets a hashCode compatible with the equals method.</p>
 * @return a suitable hashCode
 */



PACKAGE : package org.apache.commons.lang;

NAME : toString
COMMENT : /** 
 * <p>Gets a string representation of the character range.</p>
 * @return string representation of this range
 */



PACKAGE : null
NAME : Enum
COMMENT : /** 
 * <p>Constructor to add a new named item to the enumeration.</p>
 * @param name  the name of the enum object,must not be empty or <code>null</code>
 * @throws IllegalArgumentException if the name is <code>null</code>or an empty string
 * @throws IllegalArgumentException if the getEnumClass() method returnsa null or invalid Class
 */



PACKAGE : null
NAME : init
COMMENT : /** 
 * Initializes the enumeration.
 * @param name  the enum name
 * @throws IllegalArgumentException if the name is null or empty or duplicate
 * @throws IllegalArgumentException if the enumClass is null or invalid
 */



PACKAGE : null
NAME : readResolve
COMMENT : /** 
 * <p>Handle the deserialization of the class to ensure that multiple copies are not wastefully created, or illegal enum types created.</p>
 * @return the resolved object
 */



PACKAGE : null
NAME : getEnum
COMMENT : /** 
 * <p>Gets an <code>Enum</code> object by class and name.</p>
 * @param enumClass  the class of the Enum to get, must notbe <code>null</code>
 * @param name  the name of the <code>Enum</code> to get,may be <code>null</code>
 * @return the enum object, or <code>null</code> if the enum does not exist
 * @throws IllegalArgumentException if the enum classis <code>null</code>
 */



PACKAGE : null
NAME : getEnumMap
COMMENT : /** 
 * <p>Gets the <code>Map</code> of <code>Enum</code> objects by name using the <code>Enum</code> class.</p> <p>If the requested class has no enum objects an empty <code>Map</code> is returned.</p>
 * @param enumClass  the class of the <code>Enum</code> to get,must not be <code>null</code>
 * @return the enum object Map
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 * @throws IllegalArgumentException if the enum class is not a subclass of Enum
 */



PACKAGE : null
NAME : getEnumList
COMMENT : /** 
 * <p>Gets the <code>List</code> of <code>Enum</code> objects using the <code>Enum</code> class.</p> <p>The list is in the order that the objects were created (source code order). If the requested class has no enum objects an empty <code>List</code> is returned.</p>
 * @param enumClass  the class of the <code>Enum</code> to get,must not be <code>null</code>
 * @return the enum object Map
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 * @throws IllegalArgumentException if the enum class is not a subclass of Enum
 */



PACKAGE : null
NAME : iterator
COMMENT : /** 
 * <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects in an <code>Enum</code> class.</p> <p>The <code>Iterator</code> is in the order that the objects were created (source code order). If the requested class has no enum objects an empty <code>Iterator</code> is returned.</p>
 * @param enumClass  the class of the <code>Enum</code> to get,must not be <code>null</code>
 * @return an iterator of the Enum objects
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 * @throws IllegalArgumentException if the enum class is not a subclass of Enum
 */



PACKAGE : null
NAME : getEntry
COMMENT : /** 
 * <p>Gets an <code>Entry</code> from the map of Enums.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @return the enum entry
 */



PACKAGE : null
NAME : createEntry
COMMENT : /** 
 * <p>Creates an <code>Entry</code> for storing the Enums.</p> <p>This accounts for subclassed Enums.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @return the enum entry
 */



PACKAGE : null
NAME : getName
COMMENT : /** 
 * <p>Retrieve the name of this Enum item, set in the constructor.</p>
 * @return the <code>String</code> name of this Enum item
 */



PACKAGE : null
NAME : getEnumClass
COMMENT : /** 
 * <p>Retrieves the Class of this Enum item, set in the constructor.</p> <p>This is normally the same as <code>getClass()</code>, but for advanced Enums may be different. If overridden, it must return a constant value.</p>
 * @return the <code>Class</code> of the enum
 * @since 2.0
 */



PACKAGE : null
NAME : equals
COMMENT : /** 
 * <p>Tests for equality.</p> <p>Two Enum objects are considered equal if they have the same class names and the same names. Identity is tested for first, so this method usually runs fast.</p> <p>If the parameter is in a different class loader than this instance, reflection is used to compare the names.</p>
 * @param other  the other object to compare for equality
 * @return <code>true</code> if the Enums are equal
 */



PACKAGE : null
NAME : hashCode
COMMENT : /** 
 * <p>Returns a suitable hashCode for the enumeration.</p>
 * @return a hashcode based on the name
 */



PACKAGE : null
NAME : compareTo
COMMENT : /** 
 * <p>Tests for order.</p> <p>The default ordering is alphabetic by name, but this can be overridden by subclasses.</p> <p>If the parameter is in a different class loader than this instance, reflection is used to compare the names.</p>
 * @see java.lang.Comparable#compareTo(Object)
 * @param other  the other object to compare to
 * @return -ve if this is less than the other object, +ve if greaterthan, <code>0</code> of equal
 * @throws ClassCastException if other is not an Enum
 * @throws NullPointerException if other is <code>null</code>
 */



PACKAGE : null
NAME : getNameInOtherClassLoader
COMMENT : /** 
 * <p>Use reflection to return an objects class name.</p>
 * @param other The object to determine the class name for
 * @return The class name
 */



PACKAGE : null
NAME : toString
COMMENT : /** 
 * <p>Human readable description of this Enum item.</p>
 * @return String in the form <code>type[name]</code>, for example:<code>Color[Red]</code>. Note that the package name is stripped from the type name.
 */



PACKAGE : null
NAME : Entry
COMMENT : /** 
 * <p>Restrictive constructor.</p>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : CompareToBuilder
COMMENT : /** 
 * <p>Constructor for CompareToBuilder.</p> <p>Starts off assuming that the objects are equal. Multiple calls are  then made to the various append methods, followed by a call to  {@link #toComparison} to get the result.</p>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionCompare
COMMENT : /** 
 * <p>Compares two <code>Object</code>s via reflection.</p> <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code> is used to bypass normal access control checks. This will fail under a  security manager unless the appropriate permissions are set.</p> <ul> <li>Static fields will not be compared</li> <li>Transient members will be not be compared, as they are likely derived fields</li> <li>Superclass fields will be compared</li> </ul> <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>, they are considered equal.</p>
 * @param lhs  left-hand object
 * @param rhs  right-hand object
 * @return a negative integer, zero, or a positive integer as <code>lhs</code>is less than, equal to, or greater than <code>rhs</code>
 * @throws NullPointerException  if either (but not both) parameters are<code>null</code>
 * @throws ClassCastException  if <code>rhs</code> is not assignment-compatiblewith <code>lhs</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionCompare
COMMENT : /** 
 * <p>Compares two <code>Object</code>s via reflection.</p> <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code> is used to bypass normal access control checks. This will fail under a  security manager unless the appropriate permissions are set.</p> <ul> <li>Static fields will not be compared</li> <li>If <code>compareTransients</code> is <code>true</code>, compares transient members.  Otherwise ignores them, as they are likely derived fields.</li> <li>Superclass fields will be compared</li> </ul> <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>, they are considered equal.</p>
 * @param lhs  left-hand object
 * @param rhs  right-hand object
 * @param compareTransients  whether to compare transient fields
 * @return a negative integer, zero, or a positive integer as <code>lhs</code>is less than, equal to, or greater than <code>rhs</code>
 * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>(but not both) is <code>null</code>
 * @throws ClassCastException  if <code>rhs</code> is not assignment-compatiblewith <code>lhs</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionCompare
COMMENT : /** 
 * <p>Compares two <code>Object</code>s via reflection.</p> <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code> is used to bypass normal access control checks. This will fail under a  security manager unless the appropriate permissions are set.</p> <ul> <li>Static fields will not be compared</li> <li>If <code>compareTransients</code> is <code>true</code>, compares transient members.  Otherwise ignores them, as they are likely derived fields.</li> <li>Superclass fields will be compared</li> </ul> <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>, they are considered equal.</p>
 * @param lhs  left-hand object
 * @param rhs  right-hand object
 * @param excludeFields  Collection of String fields to exclude
 * @return a negative integer, zero, or a positive integer as <code>lhs</code>is less than, equal to, or greater than <code>rhs</code>
 * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>(but not both) is <code>null</code>
 * @throws ClassCastException  if <code>rhs</code> is not assignment-compatiblewith <code>lhs</code>
 * @since 2.2
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionCompare
COMMENT : /** 
 * <p>Compares two <code>Object</code>s via reflection.</p> <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code> is used to bypass normal access control checks. This will fail under a  security manager unless the appropriate permissions are set.</p> <ul> <li>Static fields will not be compared</li> <li>If <code>compareTransients</code> is <code>true</code>, compares transient members.  Otherwise ignores them, as they are likely derived fields.</li> <li>Superclass fields will be compared</li> </ul> <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>, they are considered equal.</p>
 * @param lhs  left-hand object
 * @param rhs  right-hand object
 * @param excludeFields  array of fields to exclude
 * @return a negative integer, zero, or a positive integer as <code>lhs</code>is less than, equal to, or greater than <code>rhs</code>
 * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>(but not both) is <code>null</code>
 * @throws ClassCastException  if <code>rhs</code> is not assignment-compatiblewith <code>lhs</code>
 * @since 2.2
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionCompare
COMMENT : /** 
 * <p>Compares two <code>Object</code>s via reflection.</p> <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code> is used to bypass normal access control checks. This will fail under a  security manager unless the appropriate permissions are set.</p> <ul> <li>Static fields will not be compared</li> <li>If the <code>compareTransients</code> is <code>true</code>, compares transient members.  Otherwise ignores them, as they are likely derived fields.</li> <li>Compares superclass fields up to and including <code>reflectUpToClass</code>. If <code>reflectUpToClass</code> is <code>null</code>, compares all superclass fields.</li> </ul> <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>, they are considered equal.</p>
 * @param lhs  left-hand object
 * @param rhs  right-hand object
 * @param compareTransients  whether to compare transient fields
 * @param reflectUpToClass  last superclass for which fields are compared
 * @return a negative integer, zero, or a positive integer as <code>lhs</code>is less than, equal to, or greater than <code>rhs</code>
 * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>(but not both) is <code>null</code>
 * @throws ClassCastException  if <code>rhs</code> is not assignment-compatiblewith <code>lhs</code>
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionCompare
COMMENT : /** 
 * <p>Compares two <code>Object</code>s via reflection.</p> <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code> is used to bypass normal access control checks. This will fail under a  security manager unless the appropriate permissions are set.</p> <ul> <li>Static fields will not be compared</li> <li>If the <code>compareTransients</code> is <code>true</code>, compares transient members.  Otherwise ignores them, as they are likely derived fields.</li> <li>Compares superclass fields up to and including <code>reflectUpToClass</code>. If <code>reflectUpToClass</code> is <code>null</code>, compares all superclass fields.</li> </ul> <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>, they are considered equal.</p>
 * @param lhs  left-hand object
 * @param rhs  right-hand object
 * @param compareTransients  whether to compare transient fields
 * @param reflectUpToClass  last superclass for which fields are compared
 * @param excludeFields  fields to exclude
 * @return a negative integer, zero, or a positive integer as <code>lhs</code>is less than, equal to, or greater than <code>rhs</code>
 * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>(but not both) is <code>null</code>
 * @throws ClassCastException  if <code>rhs</code> is not assignment-compatiblewith <code>lhs</code>
 * @since 2.2
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionAppend
COMMENT : /** 
 * <p>Appends to <code>builder</code> the comparison of <code>lhs</code> to <code>rhs</code> using the fields defined in <code>clazz</code>.</p>
 * @param lhs  left-hand object
 * @param rhs  right-hand object
 * @param clazz  <code>Class</code> that defines fields to be compared
 * @param builder  <code>CompareToBuilder</code> to append to
 * @param useTransients  whether to compare transient fields
 * @param excludeFields  fields to exclude
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSuper
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the <code>compareTo(Object)</code> result of the superclass.</p>
 * @param superCompareTo  result of calling <code>super.compareTo(Object)</code>
 * @return this - used to chain append calls
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the comparison of two <code>Object</code>s.</p> <ol> <li>Check if <code>lhs == rhs</code></li> <li>Check if either <code>lhs</code> or <code>rhs</code> is <code>null</code>, a <code>null</code> object is less than a non-<code>null</code> object</li> <li>Check the object contents</li> </ol> <p><code>lhs</code> must either be an array or implement  {@link Comparable}.</p>
 * @param lhs  left-hand object
 * @param rhs  right-hand object
 * @return this - used to chain append calls
 * @throws ClassCastException  if <code>rhs</code> is not assignment-compatiblewith <code>lhs</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the comparison of two <code>Object</code>s.</p> <ol> <li>Check if <code>lhs == rhs</code></li> <li>Check if either <code>lhs</code> or <code>rhs</code> is <code>null</code>, a <code>null</code> object is less than a non-<code>null</code> object</li> <li>Check the object contents</li> </ol> <p>If <code>lhs</code> is an array, array comparison methods will be used. Otherwise <code>comparator</code> will be used to compare the objects. If <code>comparator</code> is <code>null</code>, <code>lhs</code> must implement  {@link Comparable} instead.</p>
 * @param lhs  left-hand object
 * @param rhs  right-hand object
 * @param comparator  <code>Comparator</code> used to compare the objects,<code>null</code> means treat lhs as <code>Comparable</code>
 * @return this - used to chain append calls
 * @throws ClassCastException  if <code>rhs</code> is not assignment-compatiblewith <code>lhs</code>
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * Appends to the <code>builder</code> the comparison of two <code>long</code>s.
 * @param lhs  left-hand value
 * @param rhs  right-hand value
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * Appends to the <code>builder</code> the comparison of two <code>int</code>s.
 * @param lhs  left-hand value
 * @param rhs  right-hand value
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * Appends to the <code>builder</code> the comparison of two <code>short</code>s.
 * @param lhs  left-hand value
 * @param rhs  right-hand value
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * Appends to the <code>builder</code> the comparison of two <code>char</code>s.
 * @param lhs  left-hand value
 * @param rhs  right-hand value
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * Appends to the <code>builder</code> the comparison of two <code>byte</code>s.
 * @param lhs  left-hand value
 * @param rhs  right-hand value
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the comparison of two <code>double</code>s.</p> <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p> <p>It is compatible with the hash code generated by <code>HashCodeBuilder</code>.</p>
 * @param lhs  left-hand value
 * @param rhs  right-hand value
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the comparison of two <code>float</code>s.</p> <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p> <p>It is compatible with the hash code generated by <code>HashCodeBuilder</code>.</p>
 * @param lhs  left-hand value
 * @param rhs  right-hand value
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * Appends to the <code>builder</code> the comparison of two <code>booleans</code>s.
 * @param lhs  left-hand value
 * @param rhs  right-hand value
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the deep comparison of two <code>Object</code> arrays.</p> <ol> <li>Check if arrays are the same using <code>==</code></li> <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li> <li>Check array length, a short length array is less than a long length array</li> <li>Check array contents element by element using  {@link #append(Object,Object,Comparator)}</li> </ol> <p>This method will also will be called for the top level of multi-dimensional, ragged, and multi-typed arrays.</p>
 * @param lhs  left-hand array
 * @param rhs  right-hand array
 * @return this - used to chain append calls
 * @throws ClassCastException  if <code>rhs</code> is not assignment-compatiblewith <code>lhs</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the deep comparison of two <code>Object</code> arrays.</p> <ol> <li>Check if arrays are the same using <code>==</code></li> <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li> <li>Check array length, a short length array is less than a long length array</li> <li>Check array contents element by element using  {@link #append(Object,Object,Comparator)}</li> </ol> <p>This method will also will be called for the top level of multi-dimensional, ragged, and multi-typed arrays.</p>
 * @param lhs  left-hand array
 * @param rhs  right-hand array
 * @param comparator  <code>Comparator</code> to use to compare the array elements,<code>null</code> means to treat <code>lhs</code> elements as <code>Comparable</code>.
 * @return this - used to chain append calls
 * @throws ClassCastException  if <code>rhs</code> is not assignment-compatiblewith <code>lhs</code>
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the deep comparison of two <code>long</code> arrays.</p> <ol> <li>Check if arrays are the same using <code>==</code></li> <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li> <li>Check array length, a shorter length array is less than a longer length array</li> <li>Check array contents element by element using  {@link #append(long,long)}</li> </ol>
 * @param lhs  left-hand array
 * @param rhs  right-hand array
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the deep comparison of two <code>int</code> arrays.</p> <ol> <li>Check if arrays are the same using <code>==</code></li> <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li> <li>Check array length, a shorter length array is less than a longer length array</li> <li>Check array contents element by element using  {@link #append(int,int)}</li> </ol>
 * @param lhs  left-hand array
 * @param rhs  right-hand array
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the deep comparison of two <code>short</code> arrays.</p> <ol> <li>Check if arrays are the same using <code>==</code></li> <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li> <li>Check array length, a shorter length array is less than a longer length array</li> <li>Check array contents element by element using  {@link #append(short,short)}</li> </ol>
 * @param lhs  left-hand array
 * @param rhs  right-hand array
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the deep comparison of two <code>char</code> arrays.</p> <ol> <li>Check if arrays are the same using <code>==</code></li> <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li> <li>Check array length, a shorter length array is less than a longer length array</li> <li>Check array contents element by element using  {@link #append(char,char)}</li> </ol>
 * @param lhs  left-hand array
 * @param rhs  right-hand array
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the deep comparison of two <code>byte</code> arrays.</p> <ol> <li>Check if arrays are the same using <code>==</code></li> <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li> <li>Check array length, a shorter length array is less than a longer length array</li> <li>Check array contents element by element using  {@link #append(byte,byte)}</li> </ol>
 * @param lhs  left-hand array
 * @param rhs  right-hand array
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the deep comparison of two <code>double</code> arrays.</p> <ol> <li>Check if arrays are the same using <code>==</code></li> <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li> <li>Check array length, a shorter length array is less than a longer length array</li> <li>Check array contents element by element using  {@link #append(double,double)}</li> </ol>
 * @param lhs  left-hand array
 * @param rhs  right-hand array
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the deep comparison of two <code>float</code> arrays.</p> <ol> <li>Check if arrays are the same using <code>==</code></li> <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li> <li>Check array length, a shorter length array is less than a longer length array</li> <li>Check array contents element by element using  {@link #append(float,float)}</li> </ol>
 * @param lhs  left-hand array
 * @param rhs  right-hand array
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Appends to the <code>builder</code> the deep comparison of two <code>boolean</code> arrays.</p> <ol> <li>Check if arrays are the same using <code>==</code></li> <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li> <li>Check array length, a shorter length array is less than a longer length array</li> <li>Check array contents element by element using  {@link #append(boolean,boolean)}</li> </ol>
 * @param lhs  left-hand array
 * @param rhs  right-hand array
 * @return this - used to chain append calls
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toComparison
COMMENT : /** 
 * Returns a negative integer, a positive integer, or zero as the <code>builder</code> has judged the "left-hand" side as less than, greater than, or equal to the "right-hand" side.
 * @return final comparison result
 */



PACKAGE : package org.apache.commons.lang;

NAME : UnhandledException
COMMENT : /** 
 * Constructs the exception using a cause.
 * @param cause  the underlying cause
 */



PACKAGE : package org.apache.commons.lang;

NAME : UnhandledException
COMMENT : /** 
 * Constructs the exception using a message and cause.
 * @param message  the message to use
 * @param cause  the underlying cause
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : getValue
COMMENT : /** 
 * Gets the value of this mutable.
 * @return the stored value
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value of this mutable.
 * @param value the value to store
 * @throws NullPointerException if the object is null and null is invalid
 * @throws ClassCastException if the type is invalid
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : IntRangeTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : createRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : createRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor1a
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor1b
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor2a
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor2b
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsIntegerBig
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testToArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableBoolean
COMMENT : /** 
 * Constructs a new MutableBoolean with the default value of false.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableBoolean
COMMENT : /** 
 * Constructs a new MutableBoolean with the specified value.
 * @param value a value.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableBoolean
COMMENT : /** 
 * Constructs a new MutableBoolean with the specified value.
 * @param value a value.
 * @throws NullPointerException if the object is null
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : booleanValue
COMMENT : /** 
 * Returns the value of this MutableBoolean as a boolean.
 * @return the boolean value represented by this object.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : compareTo
COMMENT : /** 
 * Compares this mutable to another in ascending order.
 * @param obj the mutable to compare to
 * @return zero if this object represents the same boolean value as the argument; a positive value if this objectrepresents true and the argument represents false; and a negative value if this object represents false and the argument represents true
 * @throws ClassCastException if the argument is not a MutableInt
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : equals
COMMENT : /** 
 * Compares this object to the specified object. The result is <code>true</code> if and only if the argument is not <code>null</code> and is an <code>MutableBoolean</code> object that contains the same <code>boolean</code> value as this object.
 * @param obj the object to compare with.
 * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : getValue
COMMENT : /** 
 * Gets the value as a Boolean instance.
 * @return the value as a Boolean
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : hashCode
COMMENT : /** 
 * Returns a suitable hashcode for this mutable.
 * @return the integer <code>1231</code> if this object represents <code>true</code>; returns the integer<code>1237</code> if this object represents <code>false</code>.
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value.
 * @param value the value to set
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : setValue
COMMENT : /** 
 * Sets the value from any Boolean instance.
 * @param value the value to set
 * @throws NullPointerException if the object is null
 * @throws ClassCastException if the type is not a  {@link Boolean}
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : toString
COMMENT : /** 
 * Returns the String value of this mutable.
 * @return the mutable value as a string
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : MultiFormat
COMMENT : /** 
 * Create a new MultiFormat.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : MultiFormat
COMMENT : /** 
 * Create a new MultiFormat.
 * @param delegates Formats
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : format
COMMENT : /** 
 * Format <code>obj</code>; append to <code>toAppendTo</code>.
 * @param obj Object to format
 * @param toAppendTo StringBuffer to append to
 * @param pos FieldPosition
 * @return <code>toAppendTo</code>
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : parseObject
COMMENT : /** 
 * Parse an object by trying each delegate.
 * @param source string
 * @param pos current parse position
 * @return value returned from first delegate that does not encounter anerror.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setDelegates
COMMENT : /** 
 * Set the delegates.
 * @param delegates the Format[] delegates to set.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getDelegates
COMMENT : /** 
 * Get the delegates.
 * @return Format[].
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getValidDelegates
COMMENT : /** 
 * Validate and return our delegates.
 * @return delegate Formats, not null
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : add
COMMENT : /** 
 * Add a delegate format.
 * @param delegate Format
 * @return the builder
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : toMultiFormat
COMMENT : /** 
 * Render the  {@link MultiFormat} instance from this Builder.
 * @return MultiFormat
 */



PACKAGE : package org.apache.commons.lang;

NAME : NullArgumentException
COMMENT : /** 
 * <p>Instantiates with the given argument name.</p>
 * @param argName  the name of the argument that was <code>null</code>.
 */



PACKAGE : null
NAME : EnumUtilsTest
COMMENT : null


PACKAGE : null
NAME : setUp
COMMENT : null


PACKAGE : null
NAME : suite
COMMENT : null


PACKAGE : null
NAME : testConstructor
COMMENT : null


PACKAGE : null
NAME : testIterator
COMMENT : null


PACKAGE : null
NAME : testIteratorEx
COMMENT : null


PACKAGE : null
NAME : testList
COMMENT : null


PACKAGE : null
NAME : testListEx
COMMENT : null


PACKAGE : null
NAME : testMap
COMMENT : null


PACKAGE : null
NAME : testMapEx
COMMENT : null


PACKAGE : null
NAME : testGet
COMMENT : null


PACKAGE : null
NAME : testGetEx
COMMENT : null


PACKAGE : null
NAME : testGetValue
COMMENT : null


PACKAGE : null
NAME : testGetValueEx
COMMENT : null


PACKAGE : null
NAME : EnumUtils
COMMENT : /** 
 * Public constructor. This class should not normally be instantiated.
 * @since 2.0
 */



PACKAGE : null
NAME : getEnum
COMMENT : /** 
 * <p>Gets an <code>Enum</code> object by class and name.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @param name  the name of the Enum to get, may be <code>null</code>
 * @return the enum object
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 */



PACKAGE : null
NAME : getEnum
COMMENT : /** 
 * <p>Gets a <code>ValuedEnum</code> object by class and value.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @param value  the value of the <code>Enum</code> to get
 * @return the enum object, or null if the enum does not exist
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 */



PACKAGE : null
NAME : getEnumMap
COMMENT : /** 
 * <p>Gets the <code>Map</code> of <code>Enum</code> objects by name using the <code>Enum</code> class.</p> <p>If the requested class has no enum objects an empty <code>Map</code> is returned. The <code>Map</code> is unmodifiable.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @return the enum object Map
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 * @throws IllegalArgumentException if the enum class is not a subclassof <code>Enum</code>
 */



PACKAGE : null
NAME : getEnumList
COMMENT : /** 
 * <p>Gets the <code>List</code> of <code>Enum</code> objects using the <code>Enum</code> class.</p> <p>The list is in the order that the objects were created (source code order).</p> <p>If the requested class has no enum objects an empty <code>List</code> is returned. The <code>List</code> is unmodifiable.</p>
 * @param enumClass  the class of the Enum to get
 * @return the enum object Map
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 * @throws IllegalArgumentException if the enum class is not a subclassof <code>Enum</code>
 */



PACKAGE : null
NAME : iterator
COMMENT : /** 
 * <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects in an <code>Enum</code> class.</p> <p>The iterator is in the order that the objects were created (source code order).</p> <p>If the requested class has no enum objects an empty <code>Iterator</code> is returned. The <code>Iterator</code> is unmodifiable.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @return an <code>Iterator</code> of the <code>Enum</code> objects
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 * @throws IllegalArgumentException if the enum class is not a subclass of <code>Enum</code>
 */



PACKAGE : null
NAME : Extended2Enum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : null
NAME : NestBroken
COMMENT : null


PACKAGE : null
NAME : ColorEnum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : getFormat
COMMENT : /** 
 * Get a default metaformat for the specified Locale.
 * @param locale the Locale for the resulting Format instance.
 * @return Format
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getDefaultFormat
COMMENT : /** 
 * Get the default format supported by a given metaformat.
 * @param metaformat Format to handle parsing.
 * @return the default format, if any.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : OrderedNameKeyedMetaFormat
COMMENT : /** 
 * Construct a new OrderedNameKeyedMetaFormat.
 * @param names String[]
 * @param formats Format[]
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : createMap
COMMENT : /** 
 * Create a map from the specified key/value parameters.
 * @param names keys
 * @param formats values
 * @return Map
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : iterateKeys
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableDoubleTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testConstructors
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testGetSet
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testNanInfinite
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testCompareTo
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testPrimitiveValues
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testIncrement
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testDecrement
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testAddValuePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testAddValueObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testSubtractValuePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testSubtractValueObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : DateUtils
COMMENT : /** 
 * <p><code>DateUtils</code> instances should NOT be constructed in standard programming. Instead, the class should be used as <code>DateUtils.parse(str);</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : isSameDay
COMMENT : /** 
 * <p>Checks if two date objects are on the same day ignoring time.</p> <p>28 Mar 2002 13:45 and 28 Mar 2002 06:01 would return true. 28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false. </p>
 * @param date1  the first date, not altered, not null
 * @param date2  the second date, not altered, not null
 * @return true if they represent the same day
 * @throws IllegalArgumentException if either date is <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : isSameDay
COMMENT : /** 
 * <p>Checks if two calendar objects are on the same day ignoring time.</p> <p>28 Mar 2002 13:45 and 28 Mar 2002 06:01 would return true. 28 Mar 2002 13:45 and 12 Mar 2002 13:45 would return false. </p>
 * @param cal1  the first calendar, not altered, not null
 * @param cal2  the second calendar, not altered, not null
 * @return true if they represent the same day
 * @throws IllegalArgumentException if either calendar is <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : isSameInstant
COMMENT : /** 
 * <p>Checks if two date objects represent the same instant in time.</p> <p>This method compares the long millisecond time of the two objects.</p>
 * @param date1  the first date, not altered, not null
 * @param date2  the second date, not altered, not null
 * @return true if they represent the same millisecond instant
 * @throws IllegalArgumentException if either date is <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : isSameInstant
COMMENT : /** 
 * <p>Checks if two calendar objects represent the same instant in time.</p> <p>This method compares the long millisecond time of the two objects.</p>
 * @param cal1  the first calendar, not altered, not null
 * @param cal2  the second calendar, not altered, not null
 * @return true if they represent the same millisecond instant
 * @throws IllegalArgumentException if either date is <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : isSameLocalTime
COMMENT : /** 
 * <p>Checks if two calendar objects represent the same local time.</p> <p>This method compares the values of the fields of the two objects. In addition, both calendars must be the same of the same type.</p>
 * @param cal1  the first calendar, not altered, not null
 * @param cal2  the second calendar, not altered, not null
 * @return true if they represent the same millisecond instant
 * @throws IllegalArgumentException if either date is <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : parseDate
COMMENT : /** 
 * <p>Parses a string representing a date by trying a variety of different parsers.</p> <p>The parse will try each parse pattern in turn. A parse is only deemed sucessful if it parses the whole of the input string. If no parse patterns match, a ParseException is thrown.</p>
 * @param str  the date to parse, not null
 * @param parsePatterns  the date format patterns to use, see SimpleDateFormat, not null
 * @return the parsed date
 * @throws IllegalArgumentException if the date string or pattern array is null
 * @throws ParseException if none of the date patterns were suitable
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : addYears
COMMENT : /** 
 * Adds a number of years to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount  the amount to add, may be negative
 * @return the new date object with the amount added
 * @throws IllegalArgumentException if the date is null
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : addMonths
COMMENT : /** 
 * Adds a number of months to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount  the amount to add, may be negative
 * @return the new date object with the amount added
 * @throws IllegalArgumentException if the date is null
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : addWeeks
COMMENT : /** 
 * Adds a number of weeks to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount  the amount to add, may be negative
 * @return the new date object with the amount added
 * @throws IllegalArgumentException if the date is null
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : addDays
COMMENT : /** 
 * Adds a number of days to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount  the amount to add, may be negative
 * @return the new date object with the amount added
 * @throws IllegalArgumentException if the date is null
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : addHours
COMMENT : /** 
 * Adds a number of hours to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount  the amount to add, may be negative
 * @return the new date object with the amount added
 * @throws IllegalArgumentException if the date is null
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : addMinutes
COMMENT : /** 
 * Adds a number of minutes to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount  the amount to add, may be negative
 * @return the new date object with the amount added
 * @throws IllegalArgumentException if the date is null
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : addSeconds
COMMENT : /** 
 * Adds a number of seconds to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount  the amount to add, may be negative
 * @return the new date object with the amount added
 * @throws IllegalArgumentException if the date is null
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : addMilliseconds
COMMENT : /** 
 * Adds a number of milliseconds to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount  the amount to add, may be negative
 * @return the new date object with the amount added
 * @throws IllegalArgumentException if the date is null
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : add
COMMENT : /** 
 * Adds to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param calendarField  the calendar field to add to
 * @param amount  the amount to add, may be negative
 * @return the new date object with the amount added
 * @throws IllegalArgumentException if the date is null
 * @deprecated Will become privately scoped in 3.0
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : setYears
COMMENT : /** 
 * Sets the years field to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount the amount to set
 * @return a new Date object set with the specified value
 * @throws IllegalArgumentException if the date is null
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : setMonths
COMMENT : /** 
 * Sets the months field to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount the amount to set
 * @return a new Date object set with the specified value
 * @throws IllegalArgumentException if the date is null
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : setDays
COMMENT : /** 
 * Sets the day of month field to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount the amount to set
 * @return a new Date object set with the specified value
 * @throws IllegalArgumentException if the date is null
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : setHours
COMMENT : /** 
 * Sets the hours field to a date returning a new object.  Hours range  from  0-23. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount the amount to set
 * @return a new Date object set with the specified value
 * @throws IllegalArgumentException if the date is null
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : setMinutes
COMMENT : /** 
 * Sets the minute field to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount the amount to set
 * @return a new Date object set with the specified value
 * @throws IllegalArgumentException if the date is null
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : setSeconds
COMMENT : /** 
 * Sets the seconds field to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount the amount to set
 * @return a new Date object set with the specified value
 * @throws IllegalArgumentException if the date is null
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : setMilliseconds
COMMENT : /** 
 * Sets the miliseconds field to a date returning a new object. The original date object is unchanged.
 * @param date  the date, not null
 * @param amount the amount to set
 * @return a new Date object set with the specified value
 * @throws IllegalArgumentException if the date is null
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : set
COMMENT : /** 
 * Sets the specified field to a date returning a new object.   This does not use a lenient calendar. The original date object is unchanged.
 * @param date  the date, not null
 * @param calendarField  the calendar field to set the amount to
 * @param amount the amount to set
 * @return a new Date object set with the specified value
 * @throws IllegalArgumentException if the date is null
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : round
COMMENT : /** 
 * <p>Round this date, leaving the field specified as the most significant field.</p> <p>For example, if you had the datetime of 28 Mar 2002 13:45:01.231, if this was passed with HOUR, it would return 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it would return 1 April 2002 0:00:00.000.</p> <p>For a date in a timezone that handles the change to daylight saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows. Suppose daylight saving time begins at 02:00 on March 30. Rounding a  date that crosses this time would produce the following values: <ul> <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li> <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li> <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li> <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li> </ul> </p>
 * @param date  the date to work with
 * @param field  the field from <code>Calendar</code>or <code>SEMI_MONTH</code>
 * @return the rounded date
 * @throws IllegalArgumentException if the date is <code>null</code>
 * @throws ArithmeticException if the year is over 280 million
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : round
COMMENT : /** 
 * <p>Round this date, leaving the field specified as the most significant field.</p> <p>For example, if you had the datetime of 28 Mar 2002 13:45:01.231, if this was passed with HOUR, it would return 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it would return 1 April 2002 0:00:00.000.</p> <p>For a date in a timezone that handles the change to daylight saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows. Suppose daylight saving time begins at 02:00 on March 30. Rounding a  date that crosses this time would produce the following values: <ul> <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li> <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li> <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li> <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li> </ul> </p>
 * @param date  the date to work with
 * @param field  the field from <code>Calendar</code>or <code>SEMI_MONTH</code>
 * @return the rounded date (a different object)
 * @throws IllegalArgumentException if the date is <code>null</code>
 * @throws ArithmeticException if the year is over 280 million
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : round
COMMENT : /** 
 * <p>Round this date, leaving the field specified as the most significant field.</p> <p>For example, if you had the datetime of 28 Mar 2002 13:45:01.231, if this was passed with HOUR, it would return 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it would return 1 April 2002 0:00:00.000.</p> <p>For a date in a timezone that handles the change to daylight saving time, rounding to Calendar.HOUR_OF_DAY will behave as follows. Suppose daylight saving time begins at 02:00 on March 30. Rounding a  date that crosses this time would produce the following values: <ul> <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li> <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li> <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li> <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li> </ul> </p>
 * @param date  the date to work with, either Date or Calendar
 * @param field  the field from <code>Calendar</code>or <code>SEMI_MONTH</code>
 * @return the rounded date
 * @throws IllegalArgumentException if the date is <code>null</code>
 * @throws ClassCastException if the object type is not a <code>Date</code>or <code>Calendar</code>
 * @throws ArithmeticException if the year is over 280 million
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : truncate
COMMENT : /** 
 * <p>Truncate this date, leaving the field specified as the most significant field.</p> <p>For example, if you had the datetime of 28 Mar 2002 13:45:01.231, if you passed with HOUR, it would return 28 Mar 2002 13:00:00.000.  If this was passed with MONTH, it would return 1 Mar 2002 0:00:00.000.</p>
 * @param date  the date to work with
 * @param field  the field from <code>Calendar</code>or <code>SEMI_MONTH</code>
 * @return the rounded date
 * @throws IllegalArgumentException if the date is <code>null</code>
 * @throws ArithmeticException if the year is over 280 million
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : truncate
COMMENT : /** 
 * <p>Truncate this date, leaving the field specified as the most significant field.</p> <p>For example, if you had the datetime of 28 Mar 2002 13:45:01.231, if you passed with HOUR, it would return 28 Mar 2002 13:00:00.000.  If this was passed with MONTH, it would return 1 Mar 2002 0:00:00.000.</p>
 * @param date  the date to work with
 * @param field  the field from <code>Calendar</code>or <code>SEMI_MONTH</code>
 * @return the rounded date (a different object)
 * @throws IllegalArgumentException if the date is <code>null</code>
 * @throws ArithmeticException if the year is over 280 million
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : truncate
COMMENT : /** 
 * <p>Truncate this date, leaving the field specified as the most significant field.</p> <p>For example, if you had the datetime of 28 Mar 2002 13:45:01.231, if you passed with HOUR, it would return 28 Mar 2002 13:00:00.000.  If this was passed with MONTH, it would return 1 Mar 2002 0:00:00.000.</p>
 * @param date  the date to work with, either <code>Date</code>or <code>Calendar</code>
 * @param field  the field from <code>Calendar</code>or <code>SEMI_MONTH</code>
 * @return the rounded date
 * @throws IllegalArgumentException if the dateis <code>null</code>
 * @throws ClassCastException if the object type is not a<code>Date</code> or <code>Calendar</code>
 * @throws ArithmeticException if the year is over 280 million
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : modify
COMMENT : /** 
 * <p>Internal calculation method.</p>
 * @param val  the calendar
 * @param field  the field constant
 * @param round  true to round, false to truncate
 * @throws ArithmeticException if the year is over 280 million
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : iterator
COMMENT : /** 
 * <p>This constructs an <code>Iterator</code> over each day in a date range defined by a focus date and range style.</p> <p>For instance, passing Thursday, July 4, 2002 and a <code>RANGE_MONTH_SUNDAY</code> will return an <code>Iterator</code> that starts with Sunday, June 30, 2002 and ends with Saturday, August 3, 2002, returning a Calendar instance for each intermediate day.</p> <p>This method provides an iterator that returns Calendar objects. The days are progressed using  {@link Calendar#add(int,int)}.</p>
 * @param focus  the date to work with, not null
 * @param rangeStyle  the style constant to use. Must be one of{@link DateUtils#RANGE_MONTH_SUNDAY},  {@link DateUtils#RANGE_MONTH_MONDAY}, {@link DateUtils#RANGE_WEEK_SUNDAY}, {@link DateUtils#RANGE_WEEK_MONDAY}, {@link DateUtils#RANGE_WEEK_RELATIVE}, {@link DateUtils#RANGE_WEEK_CENTER}
 * @return the date iterator, which always returns Calendar instances
 * @throws IllegalArgumentException if the date is <code>null</code>
 * @throws IllegalArgumentException if the rangeStyle is invalid
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : iterator
COMMENT : /** 
 * <p>This constructs an <code>Iterator</code> over each day in a date range defined by a focus date and range style.</p> <p>For instance, passing Thursday, July 4, 2002 and a <code>RANGE_MONTH_SUNDAY</code> will return an <code>Iterator</code> that starts with Sunday, June 30, 2002 and ends with Saturday, August 3, 2002, returning a Calendar instance for each intermediate day.</p> <p>This method provides an iterator that returns Calendar objects. The days are progressed using  {@link Calendar#add(int,int)}.</p>
 * @param focus  the date to work with
 * @param rangeStyle  the style constant to use. Must be one of{@link DateUtils#RANGE_MONTH_SUNDAY},  {@link DateUtils#RANGE_MONTH_MONDAY}, {@link DateUtils#RANGE_WEEK_SUNDAY}, {@link DateUtils#RANGE_WEEK_MONDAY}, {@link DateUtils#RANGE_WEEK_RELATIVE}, {@link DateUtils#RANGE_WEEK_CENTER}
 * @return the date iterator
 * @throws IllegalArgumentException if the date is <code>null</code>
 * @throws IllegalArgumentException if the rangeStyle is invalid
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : iterator
COMMENT : /** 
 * <p>This constructs an <code>Iterator</code> over each day in a date range defined by a focus date and range style.</p> <p>For instance, passing Thursday, July 4, 2002 and a <code>RANGE_MONTH_SUNDAY</code> will return an <code>Iterator</code> that starts with Sunday, June 30, 2002 and ends with Saturday, August 3, 2002, returning a Calendar instance for each intermediate day.</p>
 * @param focus  the date to work with, either<code>Date</code> or <code>Calendar</code>
 * @param rangeStyle  the style constant to use. Must be one of the rangestyles listed for the  {@link #iterator(Calendar,int)} method.
 * @return the date iterator
 * @throws IllegalArgumentException if the dateis <code>null</code>
 * @throws ClassCastException if the object type isnot a <code>Date</code> or <code>Calendar</code>
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getFragmentInMilliseconds
COMMENT : /** 
 * <p>Returns the number of milliseconds within the  fragment. All datefields greater than the fragment will be ignored.</p> <p>Asking the milliseconds of any date will only return the number of milliseconds of the current second (resulting in a number between 0 and 999). This  method will retrieve the number of milliseconds for any fragment.  For example, if you want to calculate the number of milliseconds past today,  your fragment is Calendar.DATE or Calendar.DAY_OF_YEAR. The result will be all milliseconds of the past hour(s), minutes(s) and second(s).</p> <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both  Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,  Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND A fragment less than or equal to a SECOND field will return 0.</p>  <p> <ul> <li>January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538</li> <li>January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538</li> <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538 (10*1000 + 538)</li> <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in milliseconds)</li> </ul> </p>
 * @param date the date to work with, not null
 * @param fragment the Calendar field part of date to calculate 
 * @return number of milliseconds within the fragment of date
 * @throws IllegalArgumentException if the date is <code>null</code> orfragment is not supported
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getFragmentInSeconds
COMMENT : /** 
 * <p>Returns the number of seconds within the  fragment. All datefields greater than the fragment will be ignored.</p>  <p>Asking the seconds of any date will only return the number of seconds of the current minute (resulting in a number between 0 and 59). This  method will retrieve the number of seconds for any fragment.  For example, if you want to calculate the number of seconds past today,  your fragment is Calendar.DATE or Calendar.DAY_OF_YEAR. The result will be all seconds of the past hour(s) and minutes(s).</p>  <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both  Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,  Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND A fragment less than or equal to a SECOND field will return 0.</p>  <p> <ul> <li>January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10 (equivalent to deprecated date.getSeconds())</li> <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10 (equivalent to deprecated date.getSeconds())</li> <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110 (7*3600 + 15*60 + 10)</li> <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in seconds)</li> </ul> </p>
 * @param date the date to work with, not null
 * @param fragment the Calendar field part of date to calculate 
 * @return number of seconds within the fragment of date
 * @throws IllegalArgumentException if the date is <code>null</code> orfragment is not supported
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getFragmentInMinutes
COMMENT : /** 
 * <p>Returns the number of minutes within the  fragment. All datefields greater than the fragment will be ignored.</p>  <p>Asking the minutes of any date will only return the number of minutes of the current hour (resulting in a number between 0 and 59). This  method will retrieve the number of minutes for any fragment.  For example, if you want to calculate the number of minutes past this month,  your fragment is Calendar.MONTH. The result will be all minutes of the  past day(s) and hour(s).</p>  <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both  Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,  Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND A fragment less than or equal to a MINUTE field will return 0.</p>  <p> <ul> <li>January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15 (equivalent to deprecated date.getMinutes())</li> <li>January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15 (equivalent to deprecated date.getMinutes())</li> <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15</li> <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7*60 + 15)</li> <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in minutes)</li> </ul> </p>
 * @param date the date to work with, not null
 * @param fragment the Calendar field part of date to calculate 
 * @return number of minutes within the fragment of date
 * @throws IllegalArgumentException if the date is <code>null</code> or fragment is not supported
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getFragmentInHours
COMMENT : /** 
 * <p>Returns the number of hours within the  fragment. All datefields greater than the fragment will be ignored.</p>  <p>Asking the hours of any date will only return the number of hours of the current day (resulting in a number between 0 and 23). This  method will retrieve the number of hours for any fragment.  For example, if you want to calculate the number of hours past this month,  your fragment is Calendar.MONTH. The result will be all hours of the  past day(s).</p>  <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both  Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,  Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND A fragment less than or equal to a HOUR field will return 0.</p>  <p> <ul> <li>January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7 (equivalent to deprecated date.getHours())</li> <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7 (equivalent to deprecated date.getHours())</li> <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 7</li> <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 127 (5*24 + 7)</li> <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in hours)</li> </ul> </p>
 * @param date the date to work with, not null
 * @param fragment the Calendar field part of date to calculate 
 * @return number of hours within the fragment of date
 * @throws IllegalArgumentException if the date is <code>null</code> or fragment is not supported
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getFragmentInDays
COMMENT : /** 
 * <p>Returns the number of days within the  fragment. All datefields greater than the fragment will be ignored.</p>  <p>Asking the days of any date will only return the number of days of the current month (resulting in a number between 1 and 31). This  method will retrieve the number of days for any fragment.  For example, if you want to calculate the number of days past this year,  your fragment is Calendar.YEAR. The result will be all days of the  past month(s).</p>  <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both  Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,  Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND A fragment less than or equal to a DAY field will return 0.</p>  <p> <ul> <li>January 28, 2008 with Calendar.MONTH as fragment will return 28 (equivalent to deprecated date.getDay())</li> <li>February 28, 2008 with Calendar.MONTH as fragment will return 28 (equivalent to deprecated date.getDay())</li> <li>January 28, 2008 with Calendar.YEAR as fragment will return 28</li> <li>February 28, 2008 with Calendar.YEAR as fragment will return 59</li> <li>January 28, 2008 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in days)</li> </ul> </p>
 * @param date the date to work with, not null
 * @param fragment the Calendar field part of date to calculate 
 * @return number of days  within the fragment of date
 * @throws IllegalArgumentException if the date is <code>null</code> or fragment is not supported
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getFragmentInMilliseconds
COMMENT : /** 
 * <p>Returns the number of milliseconds within the  fragment. All datefields greater than the fragment will be ignored.</p>  <p>Asking the milliseconds of any date will only return the number of milliseconds of the current second (resulting in a number between 0 and 999). This  method will retrieve the number of milliseconds for any fragment.  For example, if you want to calculate the number of seconds past today,  your fragment is Calendar.DATE or Calendar.DAY_OF_YEAR. The result will be all seconds of the past hour(s), minutes(s) and second(s).</p>  <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both  Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,  Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND A fragment less than or equal to a MILLISECOND field will return 0.</p>  <p> <ul> <li>January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538 (equivalent to calendar.get(Calendar.MILLISECOND))</li> <li>January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538 (equivalent to calendar.get(Calendar.MILLISECOND))</li> <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538 (10*1000 + 538)</li> <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in milliseconds)</li> </ul> </p>
 * @param calendar the calendar to work with, not null
 * @param fragment the Calendar field part of calendar to calculate 
 * @return number of milliseconds within the fragment of date
 * @throws IllegalArgumentException if the date is <code>null</code> or fragment is not supported
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getFragmentInSeconds
COMMENT : /** 
 * <p>Returns the number of seconds within the  fragment. All datefields greater than the fragment will be ignored.</p>  <p>Asking the seconds of any date will only return the number of seconds of the current minute (resulting in a number between 0 and 59). This  method will retrieve the number of seconds for any fragment.  For example, if you want to calculate the number of seconds past today,  your fragment is Calendar.DATE or Calendar.DAY_OF_YEAR. The result will be all seconds of the past hour(s) and minutes(s).</p>  <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both  Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,  Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND A fragment less than or equal to a SECOND field will return 0.</p>  <p> <ul> <li>January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10 (equivalent to calendar.get(Calendar.SECOND))</li> <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10 (equivalent to calendar.get(Calendar.SECOND))</li> <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110 (7*3600 + 15*60 + 10)</li> <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in seconds)</li> </ul> </p>
 * @param calendar the calendar to work with, not null
 * @param fragment the Calendar field part of calendar to calculate 
 * @return number of seconds within the fragment of date
 * @throws IllegalArgumentException if the date is <code>null</code> or fragment is not supported
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getFragmentInMinutes
COMMENT : /** 
 * <p>Returns the number of minutes within the  fragment. All datefields greater than the fragment will be ignored.</p>  <p>Asking the minutes of any date will only return the number of minutes of the current hour (resulting in a number between 0 and 59). This  method will retrieve the number of minutes for any fragment.  For example, if you want to calculate the number of minutes past this month,  your fragment is Calendar.MONTH. The result will be all minutes of the  past day(s) and hour(s).</p>  <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both  Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,  Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND A fragment less than or equal to a MINUTE field will return 0.</p>  <p> <ul> <li>January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15 (equivalent to calendar.get(Calendar.MINUTES))</li> <li>January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15 (equivalent to calendar.get(Calendar.MINUTES))</li> <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15</li> <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7*60 + 15)</li> <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in minutes)</li> </ul> </p>
 * @param calendar the calendar to work with, not null
 * @param fragment the Calendar field part of calendar to calculate 
 * @return number of minutes within the fragment of date
 * @throws IllegalArgumentException if the date is <code>null</code> or fragment is not supported
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getFragmentInHours
COMMENT : /** 
 * <p>Returns the number of hours within the  fragment. All datefields greater than the fragment will be ignored.</p>  <p>Asking the hours of any date will only return the number of hours of the current day (resulting in a number between 0 and 23). This  method will retrieve the number of hours for any fragment.  For example, if you want to calculate the number of hours past this month,  your fragment is Calendar.MONTH. The result will be all hours of the  past day(s).</p>  <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both  Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,  Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND A fragment less than or equal to a HOUR field will return 0.</p>  <p> <ul> <li>January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7 (equivalent to calendar.get(Calendar.HOUR_OF_DAY))</li> <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7 (equivalent to calendar.get(Calendar.HOUR_OF_DAY))</li> <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 7</li> <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 127 (5*24 + 7)</li> <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in hours)</li> </ul> </p>
 * @param calendar the calendar to work with, not null
 * @param fragment the Calendar field part of calendar to calculate 
 * @return number of hours within the fragment of date
 * @throws IllegalArgumentException if the date is <code>null</code> or fragment is not supported
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getFragmentInDays
COMMENT : /** 
 * <p>Returns the number of days within the  fragment. All datefields greater than the fragment will be ignored.</p>  <p>Asking the days of any date will only return the number of days of the current month (resulting in a number between 1 and 31). This  method will retrieve the number of days for any fragment.  For example, if you want to calculate the number of days past this year,  your fragment is Calendar.YEAR. The result will be all days of the  past month(s).</p>  <p>Valid fragments are: Calendar.YEAR, Calendar.MONTH, both  Calendar.DAY_OF_YEAR and Calendar.DATE, Calendar.HOUR_OF_DAY,  Calendar.MINUTE, Calendar.SECOND and Calendar.MILLISECOND A fragment less than or equal to a DAY field will return 0.</p>  <p> <ul> <li>January 28, 2008 with Calendar.MONTH as fragment will return 28 (equivalent to calendar.get(Calendar.DAY_OF_MONTH))</li> <li>February 28, 2008 with Calendar.MONTH as fragment will return 28 (equivalent to calendar.get(Calendar.DAY_OF_MONTH))</li> <li>January 28, 2008 with Calendar.YEAR as fragment will return 28 (equivalent to calendar.get(Calendar.DAY_OF_YEAR))</li> <li>February 28, 2008 with Calendar.YEAR as fragment will return 59 (equivalent to calendar.get(Calendar.DAY_OF_YEAR))</li> <li>January 28, 2008 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in days)</li> </ul> </p>
 * @param calendar the calendar to work with, not null
 * @param fragment the Calendar field part of calendar to calculate 
 * @return number of days within the fragment of date
 * @throws IllegalArgumentException if the date is <code>null</code> or fragment is not supported
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getFragment
COMMENT : /** 
 * Date-version for fragment-calculation in any unit
 * @param date the date to work with, not null
 * @param fragment the Calendar field part of date to calculate 
 * @param unit Calendar field defining the unit
 * @return number of units within the fragment of the date
 * @throws IllegalArgumentException if the date is <code>null</code> or fragment is not supported
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getFragment
COMMENT : /** 
 * Calendar-version for fragment-calculation in any unit
 * @param calendar the calendar to work with, not null
 * @param fragment the Calendar field part of calendar to calculate 
 * @param unit Calendar field defining the unit
 * @return number of units within the fragment of the calendar
 * @throws IllegalArgumentException if the date is <code>null</code> or fragment is not supported
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getMillisPerUnit
COMMENT : /** 
 * Returns the number of millis of a datefield, if this is a constant value
 * @param unit A Calendar field which is a valid unit for a fragment
 * @return number of millis
 * @throws IllegalArgumentException if date can't be represented in millisenconds
 * @since 2.4 
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : DateIterator
COMMENT : /** 
 * Constructs a DateIterator that ranges from one date to another. 
 * @param startFinal start date (inclusive)
 * @param endFinal end date (not inclusive)
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : hasNext
COMMENT : /** 
 * Has the iterator not reached the end date yet?
 * @return <code>true</code> if the iterator has yet to reach the end date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : next
COMMENT : /** 
 * Return the next calendar in the iteration
 * @return Object calendar for the next date
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : remove
COMMENT : /** 
 * Always throws UnsupportedOperationException.
 * @throws UnsupportedOperationException
 * @see java.util.Iterator#remove()
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : EnumTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testName
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testCompareTo
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testIterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testGet
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testSerialization
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testBroken1
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testBroken2
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testBroken3
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testBroken1Operation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testBroken2Operation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testBroken3Operation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testBroken4Operation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testBroken5Operation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testOperationGet
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testOperationSerialization
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testOperationToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testOperationList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testOperationMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testOperationCalculation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testExtended1Get
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testExtended2Get
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testExtended3Get
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testExtendedSerialization
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testExtendedToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testExtended1List
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testExtended2List
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testExtended3List
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testExtended1Map
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testExtended2Map
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testExtended3Map
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testNested
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testNestedBroken
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testNestedLinked
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testNestedReferenced
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testColorEnumEqualsWithDifferentClassLoaders
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testWithDifferentClassLoaders
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getColorEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testEqualsToWrongInstance
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testEqualsToWrongInstance
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : IntRange
COMMENT : /** 
 * <p>Constructs a new <code>IntRange</code> using the specified number as both the minimum and maximum in this range.</p>
 * @param number  the number to use for this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : IntRange
COMMENT : /** 
 * <p>Constructs a new <code>IntRange</code> using the specified number as both the minimum and maximum in this range.</p>
 * @param number  the number to use for this range, must not be <code>null</code>
 * @throws IllegalArgumentException if the number is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : IntRange
COMMENT : /** 
 * <p>Constructs a new <code>IntRange</code> with the specified minimum and maximum numbers (both inclusive).</p> <p>The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.</p>
 * @param number1  first number that defines the edge of the range, inclusive
 * @param number2  second number that defines the edge of the range, inclusive
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : IntRange
COMMENT : /** 
 * <p>Constructs a new <code>IntRange</code> with the specified minimum and maximum numbers (both inclusive).</p> <p>The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.</p>
 * @param number1  first number that defines the edge of the range, inclusive
 * @param number2  second number that defines the edge of the range, inclusive
 * @throws IllegalArgumentException if either number is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumNumber
COMMENT : /** 
 * <p>Returns the minimum number in this range.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumLong
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>long</code>.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumInteger
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>int</code>.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumDouble
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>double</code>.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumFloat
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>float</code>.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumNumber
COMMENT : /** 
 * <p>Returns the maximum number in this range.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumLong
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>long</code>.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumInteger
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>int</code>.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumDouble
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>double</code>.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumFloat
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>float</code>.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsNumber
COMMENT : /** 
 * <p>Tests whether the specified <code>number</code> occurs within this range using <code>int</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param number  the number to test, may be <code>null</code>
 * @return <code>true</code> if the specified number occurs within this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsInteger
COMMENT : /** 
 * <p>Tests whether the specified <code>int</code> occurs within this range using <code>int</code> comparison.</p> <p>This implementation overrides the superclass for performance as it is the most common case.</p>
 * @param value  the int to test
 * @return <code>true</code> if the specified number occurs within thisrange by <code>int</code> comparison
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsRange
COMMENT : /** 
 * <p>Tests whether the specified range occurs entirely within this range using <code>int</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param range  the range to test, may be <code>null</code>
 * @return <code>true</code> if the specified range occurs entirely within this range
 * @throws IllegalArgumentException if the range is not of this type
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : overlapsRange
COMMENT : /** 
 * <p>Tests whether the specified range overlaps with this range using <code>int</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param range  the range to test, may be <code>null</code>
 * @return <code>true</code> if the specified range overlaps with this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : equals
COMMENT : /** 
 * <p>Compares this range to another object to test if they are equal.</p>. <p>To be equal, the class, minimum and maximum must be equal.</p>
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : hashCode
COMMENT : /** 
 * <p>Gets a hashCode for the range.</p>
 * @return a hash code value for this object
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toString
COMMENT : /** 
 * <p>Gets the range as a <code>String</code>.</p> <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>
 * @return the <code>String</code> representation of this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toArray
COMMENT : /** 
 * <p>Returns an array containing all the integer values in the range.</p>
 * @return the <code>int[]</code> representation of this range
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : main
COMMENT : /** 
 * Main method.
 * @param args  command line arguments, ignored
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : suite
COMMENT : /** 
 * Return a new test suite containing this test case.
 * @return a new test suite containing this test case
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrBuilderAppendInsertTest
COMMENT : /** 
 * Create a new test case with the specified name.
 * @param name  the name
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendNewLine
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendWithNullText
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppend_Object
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppend_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppend_String_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppend_StringBuffer
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppend_StringBuffer_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppend_StrBuilder
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppend_StrBuilder_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppend_CharArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppend_CharArray_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppend_Boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppend_PrimitiveNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendln_Object
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendln_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendln_String_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendln_StringBuffer
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendln_StringBuffer_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendln_StrBuilder
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendln_StrBuilder_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendln_CharArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendln_CharArray_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendln_Boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendln_PrimitiveNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendPadding
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendFixedWidthPadLeft
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendFixedWidthPadLeft_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendFixedWidthPadRight
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testLang299
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendFixedWidthPadRight_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendAll_Array
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendAll_Collection
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendAll_Iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendWithSeparators_Array
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendWithSeparators_Collection
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendWithSeparators_Iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendWithSeparatorsWithNullText
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendSeparator_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendSeparator_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendSeparator_String_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testAppendSeparator_char_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testInsert
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testInsertWithNullText
COMMENT : null


PACKAGE : null
NAME : Broken1Enum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : StrBuilder
COMMENT : /** 
 * Constructor that creates an empty builder initial capacity 32 characters.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrBuilder
COMMENT : /** 
 * Constructor that creates an empty builder the specified initial capacity.
 * @param initialCapacity  the initial capacity, zero or less will be converted to 32
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrBuilder
COMMENT : /** 
 * Constructor that creates a builder from the string, allocating 32 extra characters for growth.
 * @param str  the string to copy, null treated as blank string
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getNewLineText
COMMENT : /** 
 * Gets the text to be appended when a new line is added.
 * @return the new line text, null means use system default
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setNewLineText
COMMENT : /** 
 * Sets the text to be appended when a new line is added.
 * @param newLine  the new line text, null means use system default
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getNullText
COMMENT : /** 
 * Gets the text to be appended when null is added.
 * @return the null text, null means no append
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setNullText
COMMENT : /** 
 * Sets the text to be appended when null is added.
 * @param nullText  the null text, null means no append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : length
COMMENT : /** 
 * Gets the length of the string builder.
 * @return the length
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setLength
COMMENT : /** 
 * Updates the length of the builder by either dropping the last characters or adding filler of unicode zero.
 * @param length  the length to set to, must be zero or positive
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the length is negative
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : capacity
COMMENT : /** 
 * Gets the current size of the internal character array buffer.
 * @return the capacity
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : ensureCapacity
COMMENT : /** 
 * Checks the capacity and ensures that it is at least the size specified.
 * @param capacity  the capacity to ensure
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : minimizeCapacity
COMMENT : /** 
 * Minimizes the capacity to the actual length of the string.
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : size
COMMENT : /** 
 * Gets the length of the string builder. <p> This method is the same as  {@link #length()} and is provided to match theAPI of Collections.
 * @return the length
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : isEmpty
COMMENT : /** 
 * Checks is the string builder is empty (convenience Collections API style method). <p> This method is the same as checking  {@link #length()} and is provided to match theAPI of Collections.
 * @return <code>true</code> if the size is <code>0</code>.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : clear
COMMENT : /** 
 * Clears the string builder (convenience Collections API style method). <p> This method does not reduce the size of the internal character buffer. To do that, call <code>clear()</code> followed by  {@link #minimizeCapacity()}. <p> This method is the same as  {@link #setLength(int)} called with zeroand is provided to match the API of Collections.
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : charAt
COMMENT : /** 
 * Gets the character at the specified index.
 * @see #setCharAt(int,char)
 * @see #deleteCharAt(int)
 * @param index  the index to retrieve, must be valid
 * @return the character at the index
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setCharAt
COMMENT : /** 
 * Sets the character at the specified index.
 * @see #charAt(int)
 * @see #deleteCharAt(int)
 * @param index  the index to set
 * @param ch  the new character
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : deleteCharAt
COMMENT : /** 
 * Deletes the character at the specified index.
 * @see #charAt(int)
 * @see #setCharAt(int,char)
 * @param index  the index to delete
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : toCharArray
COMMENT : /** 
 * Copies the builder's character array into a new character array.
 * @return a new array that represents the contents of the builder
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : toCharArray
COMMENT : /** 
 * Copies part of the builder's character array into a new character array.
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except thatif too large it is treated as end of string
 * @return a new array that holds part of the contents of the builder
 * @throws IndexOutOfBoundsException if startIndex is invalid,or if endIndex is invalid (but endIndex greater than size is valid)
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getChars
COMMENT : /** 
 * Copies the character array into the specified array.
 * @param destination  the destination array, null will cause an array to be created
 * @return the input array, unless that was null or too small
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getChars
COMMENT : /** 
 * Copies the character array into the specified array.
 * @param startIndex  first index to copy, inclusive, must be valid
 * @param endIndex  last index, exclusive, must be valid
 * @param destination  the destination array, must not be null or too small
 * @param destinationIndex  the index to start copying in destination
 * @throws NullPointerException if the array is null
 * @throws IndexOutOfBoundsException if any index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendNewLine
COMMENT : /** 
 * Appends the new line string to this string builder. <p> The new line string can be altered using  {@link #setNewLineText(String)}. This might be used to force the output to always use Unix line endings even when on Windows.
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendNull
COMMENT : /** 
 * Appends the text representing <code>null</code> to this string builder.
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends an object to this string builder. Appending null will call  {@link #appendNull()}.
 * @param obj  the object to append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends a string to this string builder. Appending null will call  {@link #appendNull()}.
 * @param str  the string to append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends part of a string to this string builder. Appending null will call  {@link #appendNull()}.
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends a string buffer to this string builder. Appending null will call  {@link #appendNull()}.
 * @param str  the string buffer to append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends part of a string buffer to this string builder. Appending null will call  {@link #appendNull()}.
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends another string builder to this string builder. Appending null will call  {@link #appendNull()}.
 * @param str  the string builder to append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends part of a string builder to this string builder. Appending null will call  {@link #appendNull()}.
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends a char array to the string builder. Appending null will call  {@link #appendNull()}.
 * @param chars  the char array to append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends a char array to the string builder. Appending null will call  {@link #appendNull()}.
 * @param chars  the char array to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends a boolean value to the string builder.
 * @param value  the value to append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends a char value to the string builder.
 * @param ch  the value to append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends an int value to the string builder using <code>String.valueOf</code>.
 * @param value  the value to append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends a long value to the string builder using <code>String.valueOf</code>.
 * @param value  the value to append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends a float value to the string builder using <code>String.valueOf</code>.
 * @param value  the value to append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : append
COMMENT : /** 
 * Appends a double value to the string builder using <code>String.valueOf</code>.
 * @param value  the value to append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends an object followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.
 * @param obj  the object to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends a string followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.
 * @param str  the string to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends part of a string followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends a string buffer followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.
 * @param str  the string buffer to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends part of a string buffer followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends another string builder followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.
 * @param str  the string builder to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends part of a string builder followed by a new line to this string builder. Appending null will call  {@link #appendNull()}.
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends a char array followed by a new line to the string builder. Appending null will call  {@link #appendNull()}.
 * @param chars  the char array to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends a char array followed by a new line to the string builder. Appending null will call  {@link #appendNull()}.
 * @param chars  the char array to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends a boolean value followed by a new line to the string builder.
 * @param value  the value to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends a char value followed by a new line to the string builder.
 * @param ch  the value to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends an int value followed by a new line to the string builder using <code>String.valueOf</code>.
 * @param value  the value to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends a long value followed by a new line to the string builder using <code>String.valueOf</code>.
 * @param value  the value to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends a float value followed by a new line to the string builder using <code>String.valueOf</code>.
 * @param value  the value to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendln
COMMENT : /** 
 * Appends a double value followed by a new line to the string builder using <code>String.valueOf</code>.
 * @param value  the value to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendAll
COMMENT : /** 
 * Appends each item in an array to the builder without any separators. Appending a null array will have no effect. Each object is appended using  {@link #append(Object)}.
 * @param array  the array to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendAll
COMMENT : /** 
 * Appends each item in a collection to the builder without any separators. Appending a null collection will have no effect. Each object is appended using  {@link #append(Object)}.
 * @param coll  the collection to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendAll
COMMENT : /** 
 * Appends each item in an iterator to the builder without any separators. Appending a null iterator will have no effect. Each object is appended using  {@link #append(Object)}.
 * @param it  the iterator to append
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendWithSeparators
COMMENT : /** 
 * Appends an array placing separators between each value, but not before the first or after the last. Appending a null array will have no effect. Each object is appended using  {@link #append(Object)}.
 * @param array  the array to append
 * @param separator  the separator to use, null means no separator
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendWithSeparators
COMMENT : /** 
 * Appends a collection placing separators between each value, but not before the first or after the last. Appending a null collection will have no effect. Each object is appended using  {@link #append(Object)}.
 * @param coll  the collection to append
 * @param separator  the separator to use, null means no separator
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendWithSeparators
COMMENT : /** 
 * Appends an iterator placing separators between each value, but not before the first or after the last. Appending a null iterator will have no effect. Each object is appended using  {@link #append(Object)}.
 * @param it  the iterator to append
 * @param separator  the separator to use, null means no separator
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendSeparator
COMMENT : /** 
 * Appends a separator if the builder is currently non-empty. Appending a null separator will have no effect. The separator is appended using  {@link #append(String)}. <p> This method is useful for adding a separator each time around the loop except the first. <pre> for (Iterator it = list.iterator(); it.hasNext(); ) { appendSeparator(","); append(it.next()); } </pre> Note that for this simple example, you should use {@link #appendWithSeparators(Collection,String)}.
 * @param separator  the separator to use, null means no separator
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendSeparator
COMMENT : /** 
 * Appends a separator if the builder is currently non-empty. The separator is appended using  {@link #append(char)}. <p> This method is useful for adding a separator each time around the loop except the first. <pre> for (Iterator it = list.iterator(); it.hasNext(); ) { appendSeparator(','); append(it.next()); } </pre> Note that for this simple example, you should use {@link #appendWithSeparators(Collection,String)}.
 * @param separator  the separator to use
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendSeparator
COMMENT : /** 
 * Appends a separator to the builder if the loop index is greater than zero. Appending a null separator will have no effect. The separator is appended using  {@link #append(String)}. <p> This method is useful for adding a separator each time around the loop except the first. <pre> for (int i = 0; i < list.size(); i++) { appendSeparator(",", i); append(list.get(i)); } </pre> Note that for this simple example, you should use {@link #appendWithSeparators(Collection,String)}.
 * @param separator  the separator to use, null means no separator
 * @param loopIndex  the loop index
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendSeparator
COMMENT : /** 
 * Appends a separator to the builder if the loop index is greater than zero. The separator is appended using  {@link #append(char)}. <p> This method is useful for adding a separator each time around the loop except the first. <pre> for (int i = 0; i < list.size(); i++) { appendSeparator(",", i); append(list.get(i)); } </pre> Note that for this simple example, you should use {@link #appendWithSeparators(Collection,String)}.
 * @param separator  the separator to use
 * @param loopIndex  the loop index
 * @return this, to enable chaining
 * @since 2.3
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendPadding
COMMENT : /** 
 * Appends the pad character to the builder the specified number of times.
 * @param length  the length to append, negative means no append
 * @param padChar  the character to append
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendFixedWidthPadLeft
COMMENT : /** 
 * Appends an object to the builder padding on the left to a fixed width. The <code>toString</code> of the object is used. If the object is larger than the length, the left hand side is lost. If the object is null, the null text value is used.
 * @param obj  the object to append, null uses null text
 * @param width  the fixed field width, zero or negative has no effect
 * @param padChar  the pad character to use
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendFixedWidthPadLeft
COMMENT : /** 
 * Appends an object to the builder padding on the left to a fixed width. The <code>String.valueOf</code> of the <code>int</code> value is used. If the formatted value is larger than the length, the left hand side is lost.
 * @param value  the value to append
 * @param width  the fixed field width, zero or negative has no effect
 * @param padChar  the pad character to use
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendFixedWidthPadRight
COMMENT : /** 
 * Appends an object to the builder padding on the right to a fixed length. The <code>toString</code> of the object is used. If the object is larger than the length, the right hand side is lost. If the object is null, null text value is used.
 * @param obj  the object to append, null uses null text
 * @param width  the fixed field width, zero or negative has no effect
 * @param padChar  the pad character to use
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : appendFixedWidthPadRight
COMMENT : /** 
 * Appends an object to the builder padding on the right to a fixed length. The <code>String.valueOf</code> of the <code>int</code> value is used. If the object is larger than the length, the right hand side is lost.
 * @param value  the value to append
 * @param width  the fixed field width, zero or negative has no effect
 * @param padChar  the pad character to use
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : insert
COMMENT : /** 
 * Inserts the string representation of an object into this builder. Inserting null will use the stored null text value.
 * @param index  the index to add at, must be valid
 * @param obj  the object to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : insert
COMMENT : /** 
 * Inserts the string into this builder. Inserting null will use the stored null text value.
 * @param index  the index to add at, must be valid
 * @param str  the string to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : insert
COMMENT : /** 
 * Inserts the character array into this builder. Inserting null will use the stored null text value.
 * @param index  the index to add at, must be valid
 * @param chars  the char array to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : insert
COMMENT : /** 
 * Inserts part of the character array into this builder. Inserting null will use the stored null text value.
 * @param index  the index to add at, must be valid
 * @param chars  the char array to insert
 * @param offset  the offset into the character array to start at, must be valid
 * @param length  the length of the character array part to copy, must be positive
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if any index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : insert
COMMENT : /** 
 * Inserts the value into this builder.
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : insert
COMMENT : /** 
 * Inserts the value into this builder.
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : insert
COMMENT : /** 
 * Inserts the value into this builder.
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : insert
COMMENT : /** 
 * Inserts the value into this builder.
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : insert
COMMENT : /** 
 * Inserts the value into this builder.
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : insert
COMMENT : /** 
 * Inserts the value into this builder.
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : deleteImpl
COMMENT : /** 
 * Internal method to delete a range without validation.
 * @param startIndex  the start index, must be valid
 * @param endIndex  the end index (exclusive), must be valid
 * @param len  the length, must be valid
 * @throws IndexOutOfBoundsException if any index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : delete
COMMENT : /** 
 * Deletes the characters between the two specified indices.
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid exceptthat if too large it is treated as end of string
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : deleteAll
COMMENT : /** 
 * Deletes the character wherever it occurs in the builder.
 * @param ch  the character to delete
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : deleteFirst
COMMENT : /** 
 * Deletes the character wherever it occurs in the builder.
 * @param ch  the character to delete
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : deleteAll
COMMENT : /** 
 * Deletes the string wherever it occurs in the builder.
 * @param str  the string to delete, null causes no action
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : deleteFirst
COMMENT : /** 
 * Deletes the string wherever it occurs in the builder.
 * @param str  the string to delete, null causes no action
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : deleteAll
COMMENT : /** 
 * Deletes all parts of the builder that the matcher matches. <p> Matchers can be used to perform advanced deletion behaviour. For example you could write a matcher to delete all occurances where the character 'a' is followed by a number.
 * @param matcher  the matcher to use to find the deletion, null causes no action
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : deleteFirst
COMMENT : /** 
 * Deletes the first match within the builder using the specified matcher. <p> Matchers can be used to perform advanced deletion behaviour. For example you could write a matcher to delete where the character 'a' is followed by a number.
 * @param matcher  the matcher to use to find the deletion, null causes no action
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceImpl
COMMENT : /** 
 * Internal method to delete a range without validation.
 * @param startIndex  the start index, must be valid
 * @param endIndex  the end index (exclusive), must be valid
 * @param removeLen  the length to remove (endIndex - startIndex), must be valid
 * @param insertStr  the string to replace with, null means delete range
 * @param insertLen  the length of the insert string, must be valid
 * @throws IndexOutOfBoundsException if any index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Replaces a portion of the string builder with another string. The length of the inserted string does not have to match the removed length.
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid exceptthat if too large it is treated as end of string
 * @param replaceStr  the string to replace with, null means delete range
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceAll
COMMENT : /** 
 * Replaces the search character with the replace character throughout the builder.
 * @param search  the search character
 * @param replace  the replace character
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceFirst
COMMENT : /** 
 * Replaces the first instance of the search character with the replace character in the builder.
 * @param search  the search character
 * @param replace  the replace character
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceAll
COMMENT : /** 
 * Replaces the search string with the replace string throughout the builder.
 * @param searchStr  the search string, null causes no action to occur
 * @param replaceStr  the replace string, null is equivalent to an empty string
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceFirst
COMMENT : /** 
 * Replaces the first instance of the search string with the replace string.
 * @param searchStr  the search string, null causes no action to occur
 * @param replaceStr  the replace string, null is equivalent to an empty string
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceAll
COMMENT : /** 
 * Replaces all matches within the builder with the replace string. <p> Matchers can be used to perform advanced replace behaviour. For example you could write a matcher to replace all occurances where the character 'a' is followed by a number.
 * @param matcher  the matcher to use to find the deletion, null causes no action
 * @param replaceStr  the replace string, null is equivalent to an empty string
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceFirst
COMMENT : /** 
 * Replaces the first match within the builder with the replace string. <p> Matchers can be used to perform advanced replace behaviour. For example you could write a matcher to replace where the character 'a' is followed by a number.
 * @param matcher  the matcher to use to find the deletion, null causes no action
 * @param replaceStr  the replace string, null is equivalent to an empty string
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replace
COMMENT : /** 
 * Advanced search and replaces within the builder using a matcher. <p> Matchers can be used to perform advanced behaviour. For example you could write a matcher to delete all occurances where the character 'a' is followed by a number.
 * @param matcher  the matcher to use to find the deletion, null causes no action
 * @param replaceStr  the string to replace the match with, null is a delete
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid exceptthat if too large it is treated as end of string
 * @param replaceCount  the number of times to replace, -1 for replace all
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if start index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : replaceImpl
COMMENT : /** 
 * Replaces within the builder using a matcher. <p> Matchers can be used to perform advanced behaviour. For example you could write a matcher to delete all occurances where the character 'a' is followed by a number.
 * @param matcher  the matcher to use to find the deletion, null causes no action
 * @param replaceStr  the string to replace the match with, null is a delete
 * @param from  the start index, must be valid
 * @param to  the end index (exclusive), must be valid
 * @param replaceCount  the number of times to replace, -1 for replace all
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if any index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : reverse
COMMENT : /** 
 * Reverses the string builder placing each character in the opposite index.
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : trim
COMMENT : /** 
 * Trims the builder by removing characters less than or equal to a space from the beginning and end.
 * @return this, to enable chaining
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : startsWith
COMMENT : /** 
 * Checks whether this builder starts with the specified string. <p> Note that this method handles null input quietly, unlike String.
 * @param str  the string to search for, null returns false
 * @return true if the builder starts with the string
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : endsWith
COMMENT : /** 
 * Checks whether this builder ends with the specified string. <p> Note that this method handles null input quietly, unlike String.
 * @param str  the string to search for, null returns false
 * @return true if the builder ends with the string
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : substring
COMMENT : /** 
 * Extracts a portion of this string builder as a string.
 * @param start  the start index, inclusive, must be valid
 * @return the new string
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : substring
COMMENT : /** 
 * Extracts a portion of this string builder as a string. <p> Note: This method treats an endIndex greater than the length of the builder as equal to the length of the builder, and continues without error, unlike StringBuffer or String.
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid exceptthat if too large it is treated as end of string
 * @return the new string
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : leftString
COMMENT : /** 
 * Extracts the leftmost characters from the string builder without throwing an exception. <p> This method extracts the left <code>length</code> characters from the builder. If this many characters are not available, the whole builder is returned. Thus the returned string may be shorter than the length requested.
 * @param length  the number of characters to extract, negative returns empty string
 * @return the new string
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : rightString
COMMENT : /** 
 * Extracts the rightmost characters from the string builder without throwing an exception. <p> This method extracts the right <code>length</code> characters from the builder. If this many characters are not available, the whole builder is returned. Thus the returned string may be shorter than the length requested.
 * @param length  the number of characters to extract, negative returns empty string
 * @return the new string
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : midString
COMMENT : /** 
 * Extracts some characters from the middle of the string builder without throwing an exception. <p> This method extracts <code>length</code> characters from the builder at the specified index. If the index is negative it is treated as zero. If the index is greater than the builder size, it is treated as the builder size. If the length is negative, the empty string is returned. If insufficient characters are available in the builder, as much as possible is returned. Thus the returned string may be shorter than the length requested.
 * @param index  the index to start at, negative means zero
 * @param length  the number of characters to extract, negative returns empty string
 * @return the new string
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : contains
COMMENT : /** 
 * Checks if the string builder contains the specified char.
 * @param ch  the character to find
 * @return true if the builder contains the character
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : contains
COMMENT : /** 
 * Checks if the string builder contains the specified string.
 * @param str  the string to find
 * @return true if the builder contains the string
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : contains
COMMENT : /** 
 * Checks if the string builder contains a string matched using the specified matcher. <p> Matchers can be used to perform advanced searching behaviour. For example you could write a matcher to search for the character 'a' followed by a number.
 * @param matcher  the matcher to use, null returns -1
 * @return true if the matcher finds a match in the builder
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : indexOf
COMMENT : /** 
 * Searches the string builder to find the first reference to the specified char.
 * @param ch  the character to find
 * @return the first index of the character, or -1 if not found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : indexOf
COMMENT : /** 
 * Searches the string builder to find the first reference to the specified char.
 * @param ch  the character to find
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the character, or -1 if not found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : indexOf
COMMENT : /** 
 * Searches the string builder to find the first reference to the specified string. <p> Note that a null input string will return -1, whereas the JDK throws an exception.
 * @param str  the string to find, null returns -1
 * @return the first index of the string, or -1 if not found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : indexOf
COMMENT : /** 
 * Searches the string builder to find the first reference to the specified string starting searching from the given index. <p> Note that a null input string will return -1, whereas the JDK throws an exception.
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the string, or -1 if not found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : indexOf
COMMENT : /** 
 * Searches the string builder using the matcher to find the first match. <p> Matchers can be used to perform advanced searching behaviour. For example you could write a matcher to find the character 'a' followed by a number.
 * @param matcher  the matcher to use, null returns -1
 * @return the first index matched, or -1 if not found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : indexOf
COMMENT : /** 
 * Searches the string builder using the matcher to find the first match searching from the given index. <p> Matchers can be used to perform advanced searching behaviour. For example you could write a matcher to find the character 'a' followed by a number.
 * @param matcher  the matcher to use, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index matched, or -1 if not found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : lastIndexOf
COMMENT : /** 
 * Searches the string builder to find the last reference to the specified char.
 * @param ch  the character to find
 * @return the last index of the character, or -1 if not found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : lastIndexOf
COMMENT : /** 
 * Searches the string builder to find the last reference to the specified char.
 * @param ch  the character to find
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index of the character, or -1 if not found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : lastIndexOf
COMMENT : /** 
 * Searches the string builder to find the last reference to the specified string. <p> Note that a null input string will return -1, whereas the JDK throws an exception.
 * @param str  the string to find, null returns -1
 * @return the last index of the string, or -1 if not found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : lastIndexOf
COMMENT : /** 
 * Searches the string builder to find the last reference to the specified string starting searching from the given index. <p> Note that a null input string will return -1, whereas the JDK throws an exception.
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index of the string, or -1 if not found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : lastIndexOf
COMMENT : /** 
 * Searches the string builder using the matcher to find the last match. <p> Matchers can be used to perform advanced searching behaviour. For example you could write a matcher to find the character 'a' followed by a number.
 * @param matcher  the matcher to use, null returns -1
 * @return the last index matched, or -1 if not found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : lastIndexOf
COMMENT : /** 
 * Searches the string builder using the matcher to find the last match searching from the given index. <p> Matchers can be used to perform advanced searching behaviour. For example you could write a matcher to find the character 'a' followed by a number.
 * @param matcher  the matcher to use, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index matched, or -1 if not found
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : asTokenizer
COMMENT : /** 
 * Creates a tokenizer that can tokenize the contents of this builder. <p> This method allows the contents of this builder to be tokenized. The tokenizer will be setup by default to tokenize on space, tab, newline and formfeed (as per StringTokenizer). These values can be changed on the tokenizer class, before retrieving the tokens. <p> The returned tokenizer is linked to this builder. You may intermix calls to the buider and tokenizer within certain limits, however there is no synchronization. Once the tokenizer has been used once, it must be  {@link StrTokenizer#reset() reset} to pickup the latestchanges in the builder. For example: <pre> StrBuilder b = new StrBuilder(); b.append("a b "); StrTokenizer t = b.asTokenizer(); String[] tokens1 = t.getTokenArray();  // returns a,b b.append("c d "); String[] tokens2 = t.getTokenArray();  // returns a,b (c and d ignored) t.reset();              // reset causes builder changes to be picked up String[] tokens3 = t.getTokenArray();  // returns a,b,c,d </pre> In addition to simply intermixing appends and tokenization, you can also call the set methods on the tokenizer to alter how it tokenizes. Just remember to call reset when you want to pickup builder changes. <p> Calling  {@link StrTokenizer#reset(String)} or {@link StrTokenizer#reset(char[])}with a non-null value will break the link with the builder.
 * @return a tokenizer that is linked to this builder
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : asReader
COMMENT : /** 
 * Gets the contents of this builder as a Reader. <p> This method allows the contents of the builder to be read using any standard method that expects a Reader. <p> To use, simply create a <code>StrBuilder</code>, populate it with data, call <code>asReader</code>, and then read away. <p> The internal character array is shared between the builder and the reader. This allows you to append to the builder after creating the reader, and the changes will be picked up. Note however, that no synchronization occurs, so you must perform all operations with the builder and the reader in one thread. <p> The returned reader supports marking, and ignores the flush method.
 * @return a reader that reads from this builder
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : asWriter
COMMENT : /** 
 * Gets this builder as a Writer that can be written to. <p> This method allows you to populate the contents of the builder using any standard method that takes a Writer. <p> To use, simply create a <code>StrBuilder</code>, call <code>asWriter</code>, and populate away. The data is available at any time using the methods of the <code>StrBuilder</code>. <p> The internal character array is shared between the builder and the writer. This allows you to intermix calls that append to the builder and write using the writer and the changes will be occur correctly. Note however, that no synchronization occurs, so you must perform all operations with the builder and the writer in one thread. <p> The returned writer ignores the close and flush methods.
 * @return a writer that populates this builder
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : equalsIgnoreCase
COMMENT : /** 
 * Checks the contents of this builder against another to see if they contain the same character content ignoring case.
 * @param other  the object to check, null returns false
 * @return true if the builders contain the same characters in the same order
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : equals
COMMENT : /** 
 * Checks the contents of this builder against another to see if they contain the same character content.
 * @param other  the object to check, null returns false
 * @return true if the builders contain the same characters in the same order
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : equals
COMMENT : /** 
 * Checks the contents of this builder against another to see if they contain the same character content.
 * @param obj  the object to check, null returns false
 * @return true if the builders contain the same characters in the same order
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : hashCode
COMMENT : /** 
 * Gets a suitable hash code for this builder.
 * @return a hash code
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : toString
COMMENT : /** 
 * Gets a String version of the string builder, creating a new instance each time the method is called. <p> Note that unlike StringBuffer, the string version returned is independent of the string builder.
 * @return the builder as a String
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : toStringBuffer
COMMENT : /** 
 * Gets a StringBuffer version of the string builder, creating a new instance each time the method is called.
 * @return the builder as a StringBuffer
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : validateRange
COMMENT : /** 
 * Validates parameters defining a range of the builder.
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid exceptthat if too large it is treated as end of string
 * @return the new string
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : validateIndex
COMMENT : /** 
 * Validates parameters defining a single index in the builder.
 * @param index  the index, must be valid
 * @throws IndexOutOfBoundsException if the index is invalid
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrBuilderTokenizer
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : tokenize
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getContent
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrBuilderReader
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : close
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : read
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : read
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : skip
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : ready
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : markSupported
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : mark
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : reset
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : StrBuilderWriter
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : close
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : flush
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : write
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : write
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : write
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : write
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : write
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : Broken1Enum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : SystemUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : getJavaVersionAsFloat
COMMENT : /** 
 * <p>Gets the Java version number as a <code>float</code>.</p> <p>Example return values:</p> <ul> <li><code>1.2f</code> for JDK 1.2 <li><code>1.31f</code> for JDK 1.3.1 </ul> <p>Patch releases are not reported. Zero is returned if  {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>
 * @return the version, for example 1.31f for JDK 1.3.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getJavaVersionAsInt
COMMENT : /** 
 * <p>Gets the Java version number as an <code>int</code>.</p> <p>Example return values:</p> <ul> <li><code>120</code> for JDK 1.2 <li><code>131</code> for JDK 1.3.1 </ul> <p>Patch releases are not reported. Zero is returned if  {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>
 * @return the version, for example 131 for JDK 1.3.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getJavaVersionTrimmed
COMMENT : /** 
 * Trims the text of the java version to start with numbers.
 * @return the trimmed java version
 */



PACKAGE : package org.apache.commons.lang;

NAME : getJavaVersionMatches
COMMENT : /** 
 * Decides if the java version matches.
 * @param versionPrefix the prefix for the java version
 * @return true if matches, or false if not or can't determine
 */



PACKAGE : package org.apache.commons.lang;

NAME : getOSMatches
COMMENT : /** 
 * Decides if the operating system matches.
 * @param osNamePrefix the prefix for the os name
 * @return true if matches, or false if not or can't determine
 */



PACKAGE : package org.apache.commons.lang;

NAME : getOSMatches
COMMENT : /** 
 * Decides if the operating system matches.
 * @param osNamePrefix the prefix for the os name
 * @param osVersionPrefix the prefix for the version
 * @return true if matches, or false if not or can't determine
 */



PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetJavaHome
COMMENT : /** 
 * Assums no security manager exists.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testGetJavaIoTmpDir
COMMENT : /** 
 * Assums no security manager exists.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testGetUserDir
COMMENT : /** 
 * Assums no security manager exists.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testGetUserHome
COMMENT : /** 
 * Assums no security manager exists.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testIS_JAVA
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIS_OS
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeprecatedJavaVersion
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJavaVersionAsFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJavaVersionAsInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJavaVersionAtLeastFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJavaVersionAtLeastInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJavaVersionMatches
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testOSMatches
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testOSMatches2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testJavaAwtHeadless
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : LongRangeTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : createRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : createRange
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor1a
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor1b
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor2a
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstructor2b
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testContainsLongBig
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testToArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : StringEscapeUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeJava
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertEscapeJava
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertEscapeJava
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeJava
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertUnescapeJava
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertUnescapeJava
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeJavaScript
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeHtml
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeHtml
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeHexCharsHtml
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeUnknownEntity
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeHtmlVersions
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeXml
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeSql
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testStandaloneAmphersand
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLang313
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeCsvString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeCsvWriter
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : checkCsvEscapeWriter
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeCsvString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeCsvWriter
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : checkCsvUnescapeWriter
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : Validate
COMMENT : /** 
 * Constructor. This class should not normally be instantiated.
 */



PACKAGE : package org.apache.commons.lang;

NAME : isTrue
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the test result is <code>false</code>.</p> <p>This is used when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation  expression.</p> <pre> Validate.isTrue( myObject.isOk(), "The object is not OK: ", myObject); </pre> <p>For performance reasons, the object is passed as a separate parameter and appended to the message string only in the case of an error.</p>
 * @param expression  a boolean expression
 * @param message  the exception message you would like to see if theexpression is <code>false</code>
 * @param value  the value to append to the message in case of error
 * @throws IllegalArgumentException if expression is <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : isTrue
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the test result is <code>false</code>.</p> <p>This is used when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation  expression.</p> <pre> Validate.isTrue( i > 0, "The value must be greater than zero: ", i); </pre> <p>For performance reasons, the long value is passed as a separate parameter and appended to the message string only in the case of an error.</p>
 * @param expression  a boolean expression
 * @param message  the exception message you would like to see if the expression is <code>false</code>
 * @param value  the value to append to the message in case of error
 * @throws IllegalArgumentException if expression is <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : isTrue
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the test result is <code>false</code>.</p> <p>This is used when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation  expression.</p> <pre> Validate.isTrue( d > 0.0, "The value must be greater than zero: ", d); </pre> <p>For performance reasons, the double value is passed as a separate parameter and appended to the message string only in the case of an error.</p>
 * @param expression  a boolean expression
 * @param message  the exception message you would like to see if the expressionis <code>false</code>
 * @param value  the value to append to the message in case of error
 * @throws IllegalArgumentException if expression is <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : isTrue
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the test result is <code>false</code>.</p> <p>This is used when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation  expression.</p> <pre> Validate.isTrue( (i > 0), "The value must be greater than zero"); Validate.isTrue( myObject.isOk(), "The object is not OK"); </pre> <p>For performance reasons, the message string should not involve a string append, instead use the  {@link #isTrue(boolean,String,Object)} method.</p>
 * @param expression  a boolean expression
 * @param message  the exception message you would like to see if the expressionis <code>false</code>
 * @throws IllegalArgumentException if expression is <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : isTrue
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the test result is <code>false</code>.</p> <p>This is used when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation  expression.</p> <pre> Validate.isTrue( i > 0 ); Validate.isTrue( myObject.isOk() ); </pre> <p>The message in the exception is 'The validated expression is false'.</p>
 * @param expression  a boolean expression
 * @throws IllegalArgumentException if expression is <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : notNull
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument is <code>null</code>.</p> <pre> Validate.notNull(myObject, "The object must not be null"); </pre>
 * @param object  the object to check is not <code>null</code>
 * @param message  the exception message you would like to seeif the object is <code>null</code>
 * @throws IllegalArgumentException if the object is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : notNull
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument is <code>null</code>.</p> <pre> Validate.notNull(myObject); </pre> <p>The message in the exception is 'The validated object is null'.</p>
 * @param object  the object to check is not <code>null</code>
 * @throws IllegalArgumentException if the object is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : notEmpty
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument array is empty (<code>null</code> or no elements).</p> <pre> Validate.notEmpty(myArray, "The array must not be empty"); </pre>
 * @param array  the array to check is not empty
 * @param message  the exception message you would like to see if the array is empty
 * @throws IllegalArgumentException if the array is empty
 */



PACKAGE : package org.apache.commons.lang;

NAME : notEmpty
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument array is empty (<code>null</code> or no elements).</p> <pre> Validate.notEmpty(myArray); </pre> <p>The message in the exception is 'The validated array is empty'.
 * @param array  the array to check is not empty
 * @throws IllegalArgumentException if the array is empty
 */



PACKAGE : package org.apache.commons.lang;

NAME : notEmpty
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument Collection is empty (<code>null</code> or no elements).</p> <pre> Validate.notEmpty(myCollection, "The collection must not be empty"); </pre>
 * @param collection  the collection to check is not empty
 * @param message  the exception message you would like to see if the collection is empty
 * @throws IllegalArgumentException if the collection is empty
 */



PACKAGE : package org.apache.commons.lang;

NAME : notEmpty
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument Collection is empty (<code>null</code> or no elements).</p> <pre> Validate.notEmpty(myCollection); </pre> <p>The message in the exception is 'The validated collection is empty'.</p>
 * @param collection  the collection to check is not empty
 * @throws IllegalArgumentException if the collection is empty
 */



PACKAGE : package org.apache.commons.lang;

NAME : notEmpty
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument Map is empty (<code>null</code> or no elements).</p> <pre> Validate.notEmpty(myMap, "The map must not be empty"); </pre>
 * @param map  the map to check is not empty
 * @param message  the exception message you would like to see if the map is empty
 * @throws IllegalArgumentException if the map is empty
 */



PACKAGE : package org.apache.commons.lang;

NAME : notEmpty
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument Map is empty (<code>null</code> or no elements).</p> <pre> Validate.notEmpty(myMap); </pre> <p>The message in the exception is 'The validated map is empty'.</p>
 * @param map  the map to check is not empty
 * @throws IllegalArgumentException if the map is empty
 */



PACKAGE : package org.apache.commons.lang;

NAME : notEmpty
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument String is empty (<code>null</code> or zero length).</p> <pre> Validate.notEmpty(myString, "The string must not be empty"); </pre>
 * @param string  the string to check is not empty
 * @param message  the exception message you would like to see if the string is empty
 * @throws IllegalArgumentException if the string is empty
 */



PACKAGE : package org.apache.commons.lang;

NAME : notEmpty
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument String is empty (<code>null</code> or zero length).</p> <pre> Validate.notEmpty(myString); </pre> <p>The message in the exception is 'The validated string is empty'.</p>
 * @param string  the string to check is not empty
 * @throws IllegalArgumentException if the string is empty
 */



PACKAGE : package org.apache.commons.lang;

NAME : noNullElements
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument array has <code>null</code> elements or is <code>null</code>.</p> <pre> Validate.noNullElements(myArray, "The array must not contain null elements"); </pre> <p>If the array is null then the message in the exception is 'The validated object is null'.</p>
 * @param array  the array to check
 * @param message  the exception message if the array has<code>null</code> elements
 * @throws IllegalArgumentException if the array has <code>null</code>elements or is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : noNullElements
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument array has <code>null</code> elements or is <code>null</code>.</p> <pre> Validate.noNullElements(myArray); </pre> <p>If the array has a null element the message in the exception is 'The validated array contains null element at index: '.</p> <p>If the array is null then the message in the exception is 'The validated object is null'.</p>
 * @param array  the array to check
 * @throws IllegalArgumentException if the array has <code>null</code>elements or is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : noNullElements
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument Collection has <code>null</code> elements or is <code>null</code>.</p> <pre> Validate.noNullElements(myCollection, "The collection must not contain null elements"); </pre> <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>
 * @param collection  the collection to check
 * @param message  the exception message if the collection has<code>null</code> elements
 * @throws IllegalArgumentException if the collection has<code>null</code> elements or is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : noNullElements
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument Collection has <code>null</code> elements or is <code>null</code>.</p> <pre> Validate.noNullElements(myCollection); </pre> <p>The message in the exception is 'The validated collection contains null element at index: '.</p> <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>
 * @param collection  the collection to check
 * @throws IllegalArgumentException if the collection has<code>null</code> elements or is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : allElementsOfType
COMMENT : /** 
 * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the argument collection  is <code>null</code> or has elements that are not of type <code>clazz</code> or a subclass.</p> <pre> Validate.allElementsOfType(collection, String.class, "Collection has invalid elements"); </pre>
 * @param collection  the collection to check, not null
 * @param clazz  the <code>Class</code> which the collection's elements are expected to be, not null
 * @param message  the exception message if the <code>Collection</code> has elements not of type <code>clazz</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : allElementsOfType
COMMENT : /** 
 * <p> Validate an argument, throwing <code>IllegalArgumentException</code> if the argument collection is <code>null</code> or has elements that are not of type <code>clazz</code> or a subclass. </p> <pre> Validate.allElementsOfType(collection, String.class); </pre> <p> The message in the exception is 'The validated collection contains an element not of type clazz at index: '. </p>
 * @param collection the collection to check, not null
 * @param clazz the <code>Class</code> which the collection's elements are expected to be, not null
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : NameKeyedMetaFormat
COMMENT : /** 
 * Create a new NameKeyedMetaFormat.
 * @param keyedFormats String->Format map.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : format
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : parseObject
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : iterateKeys
COMMENT : /** 
 * Extension point to alter the iteration order of the delegate format keys.
 * @return Iterator.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : put
COMMENT : /** 
 * Add the specified format with the specified string key.
 * @param key String
 * @param format Format
 * @return Builder reference to this object
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : toNameKeyedMetaFormat
COMMENT : /** 
 * Render the  {@link NameKeyedMetaFormat} instance from this Builder.
 * @return NameKeyedMetaFormat
 */



PACKAGE : package org.apache.commons.lang;

NAME : EntitiesTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeNamedEntity
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : doTestEscapeNamedEntity
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeNamedEntity
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeUnknownEntity
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeMiscellaneous
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : doTestUnescapeEntity
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAddEntitiesArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEntitiesXmlObject
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testArrayIntMap
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testTreeIntMap
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testHashIntMap
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testBinaryIntMap
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testPrimitiveIntMap
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : checkSomeEntityMap
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testHtml40Nbsp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNumberOverflow
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : StringUtilsSubstringTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubstring_StringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubstring_StringIntInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLeft_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testRight_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testMid_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubstringBefore_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubstringAfter_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubstringBeforeLast_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubstringAfterLast_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubstringBetween_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubstringBetween_StringStringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSubstringsBetween_StringStringString
COMMENT : /** 
 * Tests the substringsBetween method that returns an String Array of substrings.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testCountMatches_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeprecatedGetNestedString_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeprecatedGetNestedString_StringStringString
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : StopWatch
COMMENT : /** 
 * <p> Constructor. </p>
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : start
COMMENT : /** 
 * <p> Start the stopwatch. </p> <p> This method starts a new timing session, clearing any previous values. </p>
 * @throws IllegalStateException if the StopWatch is already running.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : stop
COMMENT : /** 
 * <p> Stop the stopwatch. </p> <p> This method ends a new timing session, allowing the time to be retrieved. </p>
 * @throws IllegalStateException if the StopWatch is not running.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : reset
COMMENT : /** 
 * <p> Resets the stopwatch. Stops it if need be. </p> <p> This method clears the internal values to allow the object to be reused. </p>
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : split
COMMENT : /** 
 * <p> Split the time. </p> <p> This method sets the stop time of the watch to allow a time to be extracted. The start time is unaffected, enabling  {@link #unsplit()} to continue the timing from the original start point.</p>
 * @throws IllegalStateException if the StopWatch is not running.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : unsplit
COMMENT : /** 
 * <p> Remove a split. </p> <p> This method clears the stop time. The start time is unaffected, enabling timing from the original start point to continue. </p>
 * @throws IllegalStateException if the StopWatch has not been split.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : suspend
COMMENT : /** 
 * <p> Suspend the stopwatch for later resumption. </p> <p> This method suspends the watch until it is resumed. The watch will not include time between the suspend and resume calls in the total time. </p>
 * @throws IllegalStateException if the StopWatch is not currently running.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : resume
COMMENT : /** 
 * <p> Resume the stopwatch after a suspend. </p> <p> This method resumes the watch after it was suspended. The watch will not include time between the suspend and resume calls in the total time. </p>
 * @throws IllegalStateException if the StopWatch has not been suspended.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getTime
COMMENT : /** 
 * <p> Get the time on the stopwatch. </p> <p> This is either the time between the start and the moment this method is called, or the amount of time between start and stop. </p>
 * @return the time in milliseconds
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getSplitTime
COMMENT : /** 
 * <p> Get the split time on the stopwatch. </p> <p> This is the time between start and latest split. </p>
 * @return the split time in milliseconds
 * @throws IllegalStateException if the StopWatch has not yet been split.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : getStartTime
COMMENT : /** 
 * Returns the time this stopwatch was started.
 * @return the time this stopwatch was started
 * @throws IllegalStateException if this StopWatch has not been started
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : toString
COMMENT : /** 
 * <p> Gets a summary of the time that the stopwatch recorded as a string. </p> <p> The format used is ISO8601-like, <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>. </p>
 * @return the time as a String
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : toSplitString
COMMENT : /** 
 * <p> Gets a summary of the split time that the stopwatch recorded as a string. </p> <p> The format used is ISO8601-like, <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>. </p>
 * @return the split time as a String
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : SerializationUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testException
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSerializeStream
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSerializeStreamUnserializable
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSerializeStreamNullObj
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSerializeStreamObjNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSerializeStreamNullNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSerializeIOException
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeserializeStream
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeserializeStreamOfNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeserializeStreamNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeserializeStreamBadStream
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeserializeStreamClassNotFound
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSerializeBytes
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSerializeBytesUnserializable
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testSerializeBytesNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeserializeBytes
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeserializeBytesOfNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeserializeBytesNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testDeserializeBytesBadStream
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testClone
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCloneNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testCloneUnserializable
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : readObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableError
COMMENT : /** 
 * Constructs a new <code>NestableError</code> without specified detail message.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableError
COMMENT : /** 
 * Constructs a new <code>NestableError</code> with specified detail message.
 * @param msg The error message.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableError
COMMENT : /** 
 * Constructs a new <code>NestableError</code> with specified nested <code>Throwable</code>.
 * @param cause the exception or error that caused this exception to bethrown
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableError
COMMENT : /** 
 * Constructs a new <code>NestableError</code> with specified detail message and nested <code>Throwable</code>.
 * @param msg    the error message
 * @param cause  the exception or error that caused this exception to bethrown
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getCause
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * Returns the detail message string of this throwable. If it was created with a null message, returns the following: (cause==null ? null : cause.toString()).
 * @return String message string of the throwable
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessage
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getMessages
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableCount
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowables
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : indexOfThrowable
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printStackTrace
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : printPartialStackTrace
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang;

NAME : CharSetUtils
COMMENT : /** 
 * <p>CharSetUtils instances should NOT be constructed in standard programming. Instead, the class should be used as <code>CharSetUtils.evaluateSet(null);</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : evaluateSet
COMMENT : /** 
 * <p>Creates a <code>CharSet</code> instance which allows a certain amount of set logic to be performed.</p> <p>The syntax is:</p> <ul> <li>&quot;aeio&quot; which implies 'a','e',..</li> <li>&quot;^e&quot; implies not e.</li> <li>&quot;ej-m&quot; implies e,j-&gt;m. e,j,k,l,m.</li> </ul> <pre> CharSetUtils.evaluateSet(null)    = null CharSetUtils.evaluateSet([])      = CharSet matching nothing CharSetUtils.evaluateSet(["a-e"]) = CharSet matching a,b,c,d,e </pre>
 * @param set  the set, may be null
 * @return a CharSet instance, <code>null</code> if null input
 * @deprecated Use {@link CharSet#getInstance(String[])}. Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang;

NAME : squeeze
COMMENT : /** 
 * <p>Squeezes any repetitions of a character that is mentioned in the supplied set.</p> <pre> CharSetUtils.squeeze(null, *)        = null CharSetUtils.squeeze("", *)          = "" CharSetUtils.squeeze(*, null)        =  CharSetUtils.squeeze(*, "")          =  CharSetUtils.squeeze("hello", "k-p") = "helo" CharSetUtils.squeeze("hello", "a-e") = "hello" </pre>
 * @see #evaluateSet(java.lang.String[]) for set-syntax.
 * @param str  the string to squeeze, may be null
 * @param set  the character set to use for manipulation, may be null
 * @return modified String, <code>null</code> if null string input
 */



PACKAGE : package org.apache.commons.lang;

NAME : squeeze
COMMENT : /** 
 * <p>Squeezes any repetitions of a character that is mentioned in the supplied set.</p> <p>An example is:</p> <ul> <li>squeeze(&quot;hello&quot;, {&quot;el&quot;}) => &quot;helo&quot;</li> </ul>
 * @see #evaluateSet(java.lang.String[]) for set-syntax.
 * @param str  the string to squeeze, may be null
 * @param set  the character set to use for manipulation, may be null
 * @return modified String, <code>null</code> if null string input
 */



PACKAGE : package org.apache.commons.lang;

NAME : count
COMMENT : /** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and returns the number of characters present in the specified string.</p> <pre> CharSetUtils.count(null, *)        = 0 CharSetUtils.count("", *)          = 0 CharSetUtils.count(*, null)        = 0 CharSetUtils.count(*, "")          = 0 CharSetUtils.count("hello", "k-p") = 3 CharSetUtils.count("hello", "a-e") = 1 </pre>
 * @see #evaluateSet(java.lang.String[]) for set-syntax.
 * @param str  String to count characters in, may be null
 * @param set  String set of characters to count, may be null
 * @return character count, zero if null string input
 */



PACKAGE : package org.apache.commons.lang;

NAME : count
COMMENT : /** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and returns the number of characters present in the specified string.</p> <p>An example would be:</p> <ul> <li>count(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns 2.</li> </ul>
 * @see #evaluateSet(java.lang.String[]) for set-syntax.
 * @param str  String to count characters in, may be null
 * @param set  String[] set of characters to count, may be null
 * @return character count, zero if null string input
 */



PACKAGE : package org.apache.commons.lang;

NAME : keep
COMMENT : /** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and keeps any of characters present in the specified string.</p> <pre> CharSetUtils.keep(null, *)        = null CharSetUtils.keep("", *)          = "" CharSetUtils.keep(*, null)        = "" CharSetUtils.keep(*, "")          = "" CharSetUtils.keep("hello", "hl")  = "hll" CharSetUtils.keep("hello", "le")  = "ell" </pre>
 * @see #evaluateSet(java.lang.String[]) for set-syntax.
 * @param str  String to keep characters from, may be null
 * @param set  String set of characters to keep, may be null
 * @return modified String, <code>null</code> if null string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : keep
COMMENT : /** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and keeps any of characters present in the specified string.</p> <p>An example would be:</p> <ul> <li>keep(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns &quot;eo&quot;</li> </ul>
 * @see #evaluateSet(java.lang.String[]) for set-syntax.
 * @param str  String to keep characters from, may be null
 * @param set  String[] set of characters to keep, may be null
 * @return modified String, <code>null</code> if null string input
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang;

NAME : delete
COMMENT : /** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and deletes any of characters present in the specified string.</p> <pre> CharSetUtils.delete(null, *)        = null CharSetUtils.delete("", *)          = "" CharSetUtils.delete(*, null)        =  CharSetUtils.delete(*, "")          =  CharSetUtils.delete("hello", "hl")  = "eo" CharSetUtils.delete("hello", "le")  = "ho" </pre>
 * @see #evaluateSet(java.lang.String[]) for set-syntax.
 * @param str  String to delete characters from, may be null
 * @param set  String set of characters to delete, may be null
 * @return modified String, <code>null</code> if null string input
 */



PACKAGE : package org.apache.commons.lang;

NAME : delete
COMMENT : /** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and deletes any of characters present in the specified string.</p> <p>An example would be:</p> <ul> <li>delete(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns &quot;hll&quot;</li> </ul>
 * @see #evaluateSet(java.lang.String[]) for set-syntax.
 * @param str  String to delete characters from, may be null
 * @param set  String[] set of characters to delete, may be null
 * @return modified String, <code>null</code> if null string input
 */



PACKAGE : package org.apache.commons.lang;

NAME : modify
COMMENT : /** 
 * Implementation of delete and keep
 * @param str String to modify characters within
 * @param set String[] set of characters to modify
 * @param expect whether to evaluate on match, or non-match
 * @return modified String
 */



PACKAGE : package org.apache.commons.lang;

NAME : translate
COMMENT : /** 
 * <p>Translate characters in a String. This is a multi character search and replace routine.</p> <p>An example is:</p> <ul> <li>translate(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;) =&gt; jelly</li> </ul> <p>If the length of characters to search for is greater than the length of characters to replace, then the last character is  used.</p> <pre> CharSetUtils.translate(null, *, *) = null CharSetUtils.translate("", *, *)   = "" </pre>
 * @param str  String to replace characters in, may be null
 * @param searchChars   a set of characters to search for, must not be null
 * @param replaceChars  a set of characters to replace, must not be null or empty (&quot;&quot;)
 * @return translated String, <code>null</code> if null string input
 * @throws NullPointerException if <code>searchChars</code> or <code>replaceChars</code> is <code>null</code>
 * @throws ArrayIndexOutOfBoundsException if <code>replaceChars</code> is empty (&quot;&quot;)
 * @deprecated Use {@link StringUtils#replaceChars(String,String,String)}. Method will be removed in Commons Lang 3.0. NOTE: StringUtils#replaceChars behaves differently when 'searchChars' is longer than 'replaceChars'. CharSetUtils#translate will use the last char of the replacement string whereas StringUtils#replaceChars will delete
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : BuilderTestSuite
COMMENT : /** 
 * Construct a new instance.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : main
COMMENT : /** 
 * Command-line interface.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : suite
COMMENT : /** 
 * Get the suite of tests
 */



PACKAGE : package org.apache.commons.lang;

NAME : BitField
COMMENT : /** 
 * <p>Creates a BitField instance.</p>
 * @param mask the mask specifying which bits apply to thisBitField. Bits that are set in this mask are the bits that this BitField operates on
 */



PACKAGE : package org.apache.commons.lang;

NAME : getValue
COMMENT : /** 
 * <p>Obtains the value for the specified BitField, appropriately shifted right.</p> <p>Many users of a BitField will want to treat the specified bits as an int value, and will not want to be aware that the value is stored as a BitField (and so shifted left so many bits).</p>
 * @see #setValue(int,int)
 * @param holder the int data containing the bits we're interestedin
 * @return the selected bits, shifted right appropriately
 */



PACKAGE : package org.apache.commons.lang;

NAME : getShortValue
COMMENT : /** 
 * <p>Obtains the value for the specified BitField, appropriately shifted right, as a short.</p> <p>Many users of a BitField will want to treat the specified bits as an int value, and will not want to be aware that the value is stored as a BitField (and so shifted left so many bits).</p>
 * @see #setShortValue(short,short)
 * @param holder the short data containing the bits we'reinterested in
 * @return the selected bits, shifted right appropriately
 */



PACKAGE : package org.apache.commons.lang;

NAME : getRawValue
COMMENT : /** 
 * <p>Obtains the value for the specified BitField, unshifted.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @return the selected bits
 */



PACKAGE : package org.apache.commons.lang;

NAME : getShortRawValue
COMMENT : /** 
 * <p>Obtains the value for the specified BitField, unshifted.</p>
 * @param holder the short data containing the bits we'reinterested in
 * @return the selected bits
 */



PACKAGE : package org.apache.commons.lang;

NAME : isSet
COMMENT : /** 
 * <p>Returns whether the field is set or not.</p> <p>This is most commonly used for a single-bit field, which is often used to represent a boolean value; the results of using it for a multi-bit field is to determine whether *any* of its bits are set.</p>
 * @param holder the int data containing the bits we're interestedin
 * @return <code>true</code> if any of the bits are set,else <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : isAllSet
COMMENT : /** 
 * <p>Returns whether all of the bits are set or not.</p> <p>This is a stricter test than  {@link #isSet(int)}, in that all of the bits in a multi-bit set must be set for this method to return <code>true</code>.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @return <code>true</code> if all of the bits are set,else <code>false</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : setValue
COMMENT : /** 
 * <p>Replaces the bits with new values.</p>
 * @see #getValue(int)
 * @param holder the int data containing the bits we'reinterested in
 * @param value the new value for the specified bits
 * @return the value of holder with the bits from the valueparameter replacing the old bits
 */



PACKAGE : package org.apache.commons.lang;

NAME : setShortValue
COMMENT : /** 
 * <p>Replaces the bits with new values.</p>
 * @see #getShortValue(short)
 * @param holder the short data containing the bits we'reinterested in
 * @param value the new value for the specified bits
 * @return the value of holder with the bits from the valueparameter replacing the old bits
 */



PACKAGE : package org.apache.commons.lang;

NAME : clear
COMMENT : /** 
 * <p>Clears the bits.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @return the value of holder with the specified bits cleared(set to <code>0</code>)
 */



PACKAGE : package org.apache.commons.lang;

NAME : clearShort
COMMENT : /** 
 * <p>Clears the bits.</p>
 * @param holder the short data containing the bits we'reinterested in
 * @return the value of holder with the specified bits cleared(set to <code>0</code>)
 */



PACKAGE : package org.apache.commons.lang;

NAME : clearByte
COMMENT : /** 
 * <p>Clears the bits.</p>
 * @param holder the byte data containing the bits we'reinterested in
 * @return the value of holder with the specified bits cleared(set to <code>0</code>)
 */



PACKAGE : package org.apache.commons.lang;

NAME : set
COMMENT : /** 
 * <p>Sets the bits.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @return the value of holder with the specified bits setto <code>1</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : setShort
COMMENT : /** 
 * <p>Sets the bits.</p>
 * @param holder the short data containing the bits we'reinterested in
 * @return the value of holder with the specified bits setto <code>1</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : setByte
COMMENT : /** 
 * <p>Sets the bits.</p>
 * @param holder the byte data containing the bits we'reinterested in
 * @return the value of holder with the specified bits setto <code>1</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : setBoolean
COMMENT : /** 
 * <p>Sets a boolean BitField.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @param flag indicating whether to set or clear the bits
 * @return the value of holder with the specified bits set orcleared
 */



PACKAGE : package org.apache.commons.lang;

NAME : setShortBoolean
COMMENT : /** 
 * <p>Sets a boolean BitField.</p>
 * @param holder the short data containing the bits we'reinterested in
 * @param flag indicating whether to set or clear the bits
 * @return the value of holder with the specified bits set orcleared
 */



PACKAGE : package org.apache.commons.lang;

NAME : setByteBoolean
COMMENT : /** 
 * <p>Sets a boolean BitField.</p>
 * @param holder the byte data containing the bits we'reinterested in
 * @param flag indicating whether to set or clear the bits
 * @return the value of holder with the specified bits set orcleared
 */



PACKAGE : package org.apache.commons.lang;

NAME : StringUtilsEqualsIndexOfTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEqualsIgnoreCase
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOf_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOf_charInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOf_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testOrdinalIndexOf
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOf_StringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOf_char
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOf_charInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOf_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOf_StringInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsIgnoreCase_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfAny_StringStringarray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLastIndexOfAny_StringStringarray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfAny_StringChararray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfAny_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsAny_StringChararray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsAny_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfAnyBut_StringChararray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIndexOfAnyBut_StringString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsOnly_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsOnly_Chararray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsNone_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testContainsNone_Chararray
COMMENT : null


PACKAGE : null
NAME : Extended1Enum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testNullDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testNullCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testInvalidFragmentWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testInvalidFragmentWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondFragmentInLargerUnitWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondFragmentInLargerUnitWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSecondFragmentInLargerUnitWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSecondFragmentInLargerUnitWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMinuteFragmentInLargerUnitWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMinuteFragmentInLargerUnitWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testHourOfDayFragmentInLargerUnitWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testHourOfDayFragmentInLargerUnitWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testDayOfYearFragmentInLargerUnitWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testDayOfYearFragmentInLargerUnitWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testDateFragmentInLargerUnitWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testDateFragmentInLargerUnitWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondsOfSecondWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondsOfSecondWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondsOfMinuteWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondsOfMinuteWithCalender
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSecondsofMinuteWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSecondsofMinuteWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondsOfHourWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondsOfHourWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSecondsofHourWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSecondsofHourWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMinutesOfHourWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMinutesOfHourWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondsOfDayWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondsOfDayWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSecondsOfDayWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSecondsOfDayWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMinutesOfDayWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMinutesOfDayWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testHoursOfDayWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testHoursOfDayWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondsOfMonthWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondsOfMonthWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSecondsOfMonthWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSecondsOfMonthWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMinutesOfMonthWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMinutesOfMonthWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testHoursOfMonthWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testHoursOfMonthWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondsOfYearWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMillisecondsOfYearWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSecondsOfYearWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSecondsOfYearWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMinutesOfYearWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testMinutesOfYearWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testHoursOfYearWithDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testHoursOfYearWithCalendar
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : StrTokenizerTest
COMMENT : /** 
 * JUnit constructor.
 * @param name
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : checkClone
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : test1
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : test2
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : test3
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : test4
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : test5
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : test6
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : test7
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : test8
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasic1
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasic2
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasic3
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasic4
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasic5
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicDelim1
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicDelim2
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicEmpty1
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicEmpty2
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicQuoted1
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicQuoted2
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicQuoted3
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicQuoted4
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicQuoted5
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicQuoted6
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicQuoted7
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicQuotedTrimmed1
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicTrimmed1
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicTrimmed2
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicIgnoreTrimmed1
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicIgnoreTrimmed2
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicIgnoreTrimmed3
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testBasicIgnoreTrimmed4
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testListArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCSV
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCSVEmpty
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCSVSimple
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCSVSimpleNeedsTrim
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testEmpty
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testGetContent
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testChaining
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCloneNotSupportedException
COMMENT : /** 
 * Tests that the  {@link StrTokenizer#clone()} clone method catches {@link CloneNotSupportedException} and returns<code>null</code>.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testCloneNull
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testCloneReset
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testConstructor_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testConstructor_String_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testConstructor_String_char_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testConstructor_charArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testConstructor_charArray_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testConstructor_charArray_char_char
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReset
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReset_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testReset_charArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testTSV
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testTSVEmpty
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testXSVAbc
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testIteration
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testTokenizeSubclassInputChange
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testTokenizeSubclassOutputChange
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testToString
COMMENT : null


PACKAGE : null
NAME : Extended3Enum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : IncompleteArgumentExceptionTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test1arg_nullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test1arg_validInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test2arg_allNullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test2arg_nullString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test2arg_nullArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test2arg_validInput
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : getRegistry
COMMENT : /** 
 * <p> Returns the registry of objects being traversed by the <code>reflectionToString</code> methods in the current thread. </p>
 * @return Set the registry of objects being traversed
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isRegistered
COMMENT : /** 
 * <p> Returns <code>true</code> if the registry contains the given object. Used by the reflection methods to avoid infinite loops. </p>
 * @param value The object to lookup in the registry.
 * @return boolean <code>true</code> if the registry contains the givenobject.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : register
COMMENT : /** 
 * <p> Registers the given object. Used by the reflection methods to avoid infinite loops. </p>
 * @param value The object to register.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : unregister
COMMENT : /** 
 * <p> Unregisters the given object. </p> <p> Used by the reflection methods to avoid infinite loops. </p>
 * @param value The object to unregister.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : ToStringStyle
COMMENT : /** 
 * <p>Constructor.</p>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSuper
COMMENT : /** 
 * <p>Append to the <code>toString</code> the superclass toString.</p> <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p> <p>A <code>null</code> <code>superToString</code> is ignored.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param superToString  the <code>super.toString()</code>
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendToString
COMMENT : /** 
 * <p>Append to the <code>toString</code> another toString.</p> <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p> <p>A <code>null</code> <code>toString</code> is ignored.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param toString  the additional <code>toString</code>
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendStart
COMMENT : /** 
 * <p>Append to the <code>toString</code> the start of data indicator.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param object  the <code>Object</code> to build a <code>toString</code> for
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendEnd
COMMENT : /** 
 * <p>Append to the <code>toString</code> the end of data indicator.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param object  the <code>Object</code> to build a<code>toString</code> for.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : removeLastFieldSeparator
COMMENT : /** 
 * <p>Remove the last field separator from the buffer.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>Object</code> value, printing the full <code>toString</code> of the <code>Object</code> passed in.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info, <code>null</code> for style decides
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendInternal
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>Object</code>, correctly interpreting its type.</p> <p>This method performs the main lookup by Class type to correctly route arrays, <code>Collections</code>, <code>Maps</code> and <code>Objects</code> to the appropriate method.</p> <p>Either detail or summary views can be specified.</p> <p>If a cycle is detected, an object will be appended with the <code>Object.toString()</code> format.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>,not <code>null</code>
 * @param detail  output detail or not
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendCyclicObject
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>Object</code> value that has been detected to participate in a cycle. This implementation will print the standard string value of the value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>,not <code>null</code>
 * @since 2.2
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>Object</code> value, printing the full detail of the <code>Object</code>.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>Collection</code>.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param coll  the <code>Collection</code> to add to the<code>toString</code>, not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>Map<code>.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param map  the <code>Map</code> to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSummary
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>Object</code> value, printing a summary of the <code>Object</code>.</P>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>long</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>long</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>int</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>int</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>short</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>short</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>byte</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>byte</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>char</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>char</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>double</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>double</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>float</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>float</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>boolean</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>boolean</code> value.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>Object</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the toString
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info, <code>null</code> for style decides
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> the detail of an <code>Object</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionAppendArrayDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> the detail of an array type.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSummary
COMMENT : /** 
 * <p>Append to the <code>toString</code> a summary of an <code>Object</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>long</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info, <code>null</code> for style decides
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> the detail of a <code>long</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSummary
COMMENT : /** 
 * <p>Append to the <code>toString</code> a summary of a <code>long</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> an <code>int</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info, <code>null</code> for style decides
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> the detail of an <code>int</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSummary
COMMENT : /** 
 * <p>Append to the <code>toString</code> a summary of an <code>int</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>short</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info, <code>null</code> for style decides
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> the detail of a <code>short</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSummary
COMMENT : /** 
 * <p>Append to the <code>toString</code> a summary of a <code>short</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>byte</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info, <code>null</code> for style decides
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> the detail of a <code>byte</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSummary
COMMENT : /** 
 * <p>Append to the <code>toString</code> a summary of a <code>byte</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>char</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info, <code>null</code> for style decides
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> the detail of a <code>char</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSummary
COMMENT : /** 
 * <p>Append to the <code>toString</code> a summary of a <code>char</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>double</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the toString
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info, <code>null</code> for style decides
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> the detail of a <code>double</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSummary
COMMENT : /** 
 * <p>Append to the <code>toString</code> a summary of a <code>double</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>float</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the toString
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info, <code>null</code> for style decides
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> the detail of a <code>float</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSummary
COMMENT : /** 
 * <p>Append to the <code>toString</code> a summary of a <code>float</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Append to the <code>toString</code> a <code>boolean</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the toString
 * @param fullDetail  <code>true</code> for detail, <code>false</code>for summary info, <code>null</code> for style decides
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendDetail
COMMENT : /** 
 * <p>Append to the <code>toString</code> the detail of a <code>boolean</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSummary
COMMENT : /** 
 * <p>Append to the <code>toString</code> a summary of a <code>boolean</code> array.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,not <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendClassName
COMMENT : /** 
 * <p>Append to the <code>toString</code> the class name.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param object  the <code>Object</code> whose name to output
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendIdentityHashCode
COMMENT : /** 
 * <p>Append the  {@link System#identityHashCode(java.lang.Object)}.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param object  the <code>Object</code> whose id to output
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendContentStart
COMMENT : /** 
 * <p>Append to the <code>toString</code> the content start.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendContentEnd
COMMENT : /** 
 * <p>Append to the <code>toString</code> the content end.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendNullText
COMMENT : /** 
 * <p>Append to the <code>toString</code> an indicator for <code>null</code>.</p> <p>The default indicator is <code>'&lt;null&gt;'</code>.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendFieldSeparator
COMMENT : /** 
 * <p>Append to the <code>toString</code> the field separator.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendFieldStart
COMMENT : /** 
 * <p>Append to the <code>toString</code> the field start.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendFieldEnd
COMMENT : /** 
 * <p>Append to the <code>toString<code> the field end.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSummarySize
COMMENT : /** 
 * <p>Append to the <code>toString</code> a size summary.</p> <p>The size summary is used to summarize the contents of <code>Collections</code>, <code>Maps</code> and arrays.</p> <p>The output consists of a prefix, the passed in size and a suffix.</p> <p>The default format is <code>'&lt;size=n&gt;'<code>.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param size  the size to append
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isFullDetail
COMMENT : /** 
 * <p>Is this field to be output in full detail.</p> <p>This method converts a detail request into a detail level. The calling code may request full detail (<code>true</code>), but a subclass might ignore that and always return <code>false</code>. The calling code may pass in <code>null</code> indicating that it doesn't care about the detail level. In this case the default detail level is used.</p>
 * @param fullDetailRequest  the detail level requested
 * @return whether full detail is to be shown
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getShortClassName
COMMENT : /** 
 * <p>Gets the short class name for a class.</p> <p>The short class name is the classname excluding the package name.</p>
 * @param cls  the <code>Class</code> to get the short name of
 * @return the short name
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isUseClassName
COMMENT : /** 
 * <p>Gets whether to use the class name.</p>
 * @return the current useClassName flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setUseClassName
COMMENT : /** 
 * <p>Sets whether to use the class name.</p>
 * @param useClassName  the new useClassName flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isUseShortClassName
COMMENT : /** 
 * <p>Gets whether to output short or long class names.</p>
 * @return the current useShortClassName flag
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isShortClassName
COMMENT : /** 
 * <p>Gets whether to output short or long class names.</p>
 * @return the current shortClassName flag
 * @deprecated Use {@link #isUseShortClassName()}Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setUseShortClassName
COMMENT : /** 
 * <p>Sets whether to output short or long class names.</p>
 * @param useShortClassName  the new useShortClassName flag
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setShortClassName
COMMENT : /** 
 * <p>Sets whether to output short or long class names.</p>
 * @param shortClassName  the new shortClassName flag
 * @deprecated Use {@link #setUseShortClassName(boolean)}Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isUseIdentityHashCode
COMMENT : /** 
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setUseIdentityHashCode
COMMENT : /** 
 * <p>Sets whether to use the identity hash code.</p>
 * @param useIdentityHashCode  the new useIdentityHashCode flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isUseFieldNames
COMMENT : /** 
 * <p>Gets whether to use the field names passed in.</p>
 * @return the current useFieldNames flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setUseFieldNames
COMMENT : /** 
 * <p>Sets whether to use the field names passed in.</p>
 * @param useFieldNames  the new useFieldNames flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isDefaultFullDetail
COMMENT : /** 
 * <p>Gets whether to use full detail when the caller doesn't specify.</p>
 * @return the current defaultFullDetail flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setDefaultFullDetail
COMMENT : /** 
 * <p>Sets whether to use full detail when the caller doesn't specify.</p>
 * @param defaultFullDetail  the new defaultFullDetail flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isArrayContentDetail
COMMENT : /** 
 * <p>Gets whether to output array content detail.</p>
 * @return the current array content detail setting
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setArrayContentDetail
COMMENT : /** 
 * <p>Sets whether to output array content detail.</p>
 * @param arrayContentDetail  the new arrayContentDetail flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getArrayStart
COMMENT : /** 
 * <p>Gets the array start text.</p>
 * @return the current array start text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setArrayStart
COMMENT : /** 
 * <p>Sets the array start text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param arrayStart  the new array start text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getArrayEnd
COMMENT : /** 
 * <p>Gets the array end text.</p>
 * @return the current array end text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setArrayEnd
COMMENT : /** 
 * <p>Sets the array end text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param arrayEnd  the new array end text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getArraySeparator
COMMENT : /** 
 * <p>Gets the array separator text.</p>
 * @return the current array separator text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setArraySeparator
COMMENT : /** 
 * <p>Sets the array separator text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param arraySeparator  the new array separator text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getContentStart
COMMENT : /** 
 * <p>Gets the content start text.</p>
 * @return the current content start text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setContentStart
COMMENT : /** 
 * <p>Sets the content start text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param contentStart  the new content start text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getContentEnd
COMMENT : /** 
 * <p>Gets the content end text.</p>
 * @return the current content end text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setContentEnd
COMMENT : /** 
 * <p>Sets the content end text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param contentEnd  the new content end text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getFieldNameValueSeparator
COMMENT : /** 
 * <p>Gets the field name value separator text.</p>
 * @return the current field name value separator text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setFieldNameValueSeparator
COMMENT : /** 
 * <p>Sets the field name value separator text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param fieldNameValueSeparator  the new field name value separator text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getFieldSeparator
COMMENT : /** 
 * <p>Gets the field separator text.</p>
 * @return the current field separator text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setFieldSeparator
COMMENT : /** 
 * <p>Sets the field separator text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param fieldSeparator  the new field separator text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isFieldSeparatorAtStart
COMMENT : /** 
 * <p>Gets whether the field separator should be added at the start  of each buffer.</p>
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setFieldSeparatorAtStart
COMMENT : /** 
 * <p>Sets whether the field separator should be added at the start  of each buffer.</p>
 * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isFieldSeparatorAtEnd
COMMENT : /** 
 * <p>Gets whether the field separator should be added at the end  of each buffer.</p>
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setFieldSeparatorAtEnd
COMMENT : /** 
 * <p>Sets whether the field separator should be added at the end  of each buffer.</p>
 * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getNullText
COMMENT : /** 
 * <p>Gets the text to output when <code>null</code> found.</p>
 * @return the current text to output when null found
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setNullText
COMMENT : /** 
 * <p>Sets the text to output when <code>null</code> found.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param nullText  the new text to output when null found
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getSizeStartText
COMMENT : /** 
 * <p>Gets the start text to output when a <code>Collection</code>, <code>Map</code> or array size is output.</p> <p>This is output before the size value.</p>
 * @return the current start of size text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setSizeStartText
COMMENT : /** 
 * <p>Sets the start text to output when a <code>Collection</code>, <code>Map</code> or array size is output.</p> <p>This is output before the size value.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param sizeStartText  the new start of size text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getSizeEndText
COMMENT : /** 
 * <p>Gets the end text to output when a <code>Collection</code>, <code>Map</code> or array size is output.</p> <p>This is output after the size value.</p>
 * @return the current end of size text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setSizeEndText
COMMENT : /** 
 * <p>Sets the end text to output when a <code>Collection</code>, <code>Map</code> or array size is output.</p> <p>This is output after the size value.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param sizeEndText  the new end of size text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getSummaryObjectStartText
COMMENT : /** 
 * <p>Gets the start text to output when an <code>Object</code> is output in summary mode.</p> <p>This is output before the size value.</p>
 * @return the current start of summary text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setSummaryObjectStartText
COMMENT : /** 
 * <p>Sets the start text to output when an <code>Object</code> is output in summary mode.</p> <p>This is output before the size value.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param summaryObjectStartText  the new start of summary text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getSummaryObjectEndText
COMMENT : /** 
 * <p>Gets the end text to output when an <code>Object</code> is output in summary mode.</p> <p>This is output after the size value.</p>
 * @return the current end of summary text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setSummaryObjectEndText
COMMENT : /** 
 * <p>Sets the end text to output when an <code>Object</code> is output in summary mode.</p> <p>This is output after the size value.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param summaryObjectEndText  the new end of summary text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : DefaultToStringStyle
COMMENT : /** 
 * <p>Constructor.</p> <p>Use the static constant rather than instantiating.</p>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : readResolve
COMMENT : /** 
 * <p>Ensure <code>Singleton</code> after serialization.</p>
 * @return the singleton
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : NoFieldNameToStringStyle
COMMENT : /** 
 * <p>Constructor.</p> <p>Use the static constant rather than instantiating.</p>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : readResolve
COMMENT : /** 
 * <p>Ensure <code>Singleton</code> after serialization.</p>
 * @return the singleton
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : ShortPrefixToStringStyle
COMMENT : /** 
 * <p>Constructor.</p> <p>Use the static constant rather than instantiating.</p>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : readResolve
COMMENT : /** 
 * <p>Ensure <code>Singleton</ode> after serialization.</p>
 * @return the singleton
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : SimpleToStringStyle
COMMENT : /** 
 * <p>Constructor.</p> <p>Use the static constant rather than instantiating.</p>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : readResolve
COMMENT : /** 
 * <p>Ensure <code>Singleton</ode> after serialization.</p>
 * @return the singleton
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : MultiLineToStringStyle
COMMENT : /** 
 * <p>Constructor.</p> <p>Use the static constant rather than instantiating.</p>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : readResolve
COMMENT : /** 
 * <p>Ensure <code>Singleton</code> after serialization.</p>
 * @return the singleton
 */



PACKAGE : null
NAME : Broken2Enum
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : FractionTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConstants
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testFactory_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testFactory_int_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testReducedFactory_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testFactory_double
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testFactory_String
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testFactory_String_double
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testFactory_String_proper
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testFactory_String_improper
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testGets
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testConversions
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testReduce
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testInvert
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testNegate
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testAbs
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testPow
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testAdd
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testSubtract
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testMultiply
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testDivide
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testCompareTo
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : testToProperString
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : ExceptionTestSuite
COMMENT : /** 
 * Construct a new instance.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : main
COMMENT : /** 
 * Command-line interface.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : BooleanUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_negate_Boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_isTrue_Boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_isNotTrue_Boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_isFalse_Boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_isNotFalse_Boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBooleanObject_boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBoolean_Boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBooleanDefaultIfNull_Boolean_boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBoolean_int
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBooleanObject_int
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBooleanObject_Integer
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBoolean_int_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBoolean_Integer_Integer_Integer
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBooleanObject_int_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBooleanObject_Integer_Integer_Integer_Integer
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toInteger_boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toIntegerObject_boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toIntegerObject_Boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toInteger_boolean_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toInteger_Boolean_int_int_int
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toIntegerObject_boolean_Integer_Integer
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toIntegerObject_Boolean_Integer_Integer_Integer
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBooleanObject_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBooleanObject_String_String_String_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBoolean_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toBoolean_String_String_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toStringTrueFalse_Boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toStringOnOff_Boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toStringYesNo_Boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toString_Boolean_String_String_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toStringTrueFalse_boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toStringOnOff_boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toStringYesNo_boolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : test_toString_boolean_String_String_String
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testXor_primitive_nullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testXor_primitive_emptyInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testXor_primitive_validInput_2items
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testXor_primitive_validInput_3items
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testXor_object_nullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testXor_object_emptyInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testXor_object_nullElementInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testXor_object_validInput_2items
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testXor_object_validInput_3items
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : ChoiceMetaFormat
COMMENT : /** 
 * Create a new ChoiceMetaFormat.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : format
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : parseObject
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : DateMetaFormatSupport
COMMENT : /** 
 * Create a new AbstractDateMetaFormat.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : DateMetaFormatSupport
COMMENT : /** 
 * Create a new AbstractDateMetaFormat.
 * @param locale Locale
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : format
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getSubformatName
COMMENT : /** 
 * Get the subformat name for the given object.
 * @param subformat Object
 * @return subformat name.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : parseObject
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getSubformat
COMMENT : /** 
 * Get the named subformat.
 * @param subformat name
 * @return Format designated by <code>name</code>, if any
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * Get the locale in use by this DateMetaFormatSupport.
 * @return Locale
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : initialize
COMMENT : /** 
 * Initialize this DateMetaFormatSupport.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : createSubformatInstance
COMMENT : /** 
 * Create a subformat for the given <code>DateFormat</code> style constant.
 * @param style DateFormat style constant
 * @return a DateFormat instance.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : isHandlePatterns
COMMENT : /** 
 * Get whether this metaformat can parse date/time pattern formats in addition to named formats.
 * @return boolean.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : setHandlePatterns
COMMENT : /** 
 * Set whether this metaformat can parse date/time pattern formats in addition to named formats.
 * @param handlePatterns the boolean handlePatterns to set.
 * @return <code>this</code> for fluent usage.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : createStyleMap
COMMENT : /** 
 * Create the style map.
 * @return Map
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : createInverseStyleMap
COMMENT : /** 
 * Create the inverse style map.
 * @return Map
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableLongTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testConstructors
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testGetSet
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testCompareTo
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testPrimitiveValues
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testIncrement
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testDecrement
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testAddValuePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testAddValueObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testSubtractValuePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testSubtractValueObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : EnumUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testIterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testIteratorEx
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testListEx
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testMapEx
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testGet
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testGetEx
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testGetValue
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testGetValueEx
COMMENT : null


PACKAGE : null
NAME : ValuedEnum
COMMENT : /** 
 * Constructor for enum item.
 * @param name  the name of enum item
 * @param value  the value of enum item
 */



PACKAGE : null
NAME : getEnum
COMMENT : /** 
 * <p>Gets an <code>Enum</code> object by class and value.</p> <p>This method loops through the list of <code>Enum</code>, thus if there are many <code>Enum</code>s this will be slow.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @param value  the value of the <code>Enum</code> to get
 * @return the enum object, or null if the enum does not exist
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 */



PACKAGE : null
NAME : getValue
COMMENT : /** 
 * <p>Get value of enum item.</p>
 * @return the enum item's value.
 */



PACKAGE : null
NAME : compareTo
COMMENT : /** 
 * <p>Tests for order.</p> <p>The default ordering is numeric by value, but this can be overridden by subclasses.</p>
 * @see java.lang.Comparable#compareTo(Object)
 * @param other  the other object to compare to
 * @return -ve if this is less than the other object, +ve if greater than,<code>0</code> of equal
 * @throws ClassCastException if other is not an <code>Enum</code>
 * @throws NullPointerException if other is <code>null</code>
 */



PACKAGE : null
NAME : toString
COMMENT : /** 
 * <p>Human readable description of this <code>Enum</code> item.</p>
 * @return String in the form <code>type[name=value]</code>, for example:<code>JavaVersion[Java 1.0=100]</code>. Note that the package name is stripped from the type name.
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : Broken1OperationEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumClass
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : PlusOperation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : MinusOperation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : Range
COMMENT : /** 
 * <p>Constructs a new range.</p>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumNumber
COMMENT : /** 
 * <p>Gets the minimum number in this range.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumLong
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>long</code>.</p> <p>This implementation uses the  {@link #getMinimumNumber()} method. Subclasses may be able to optimise this.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumInteger
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>int</code>.</p> <p>This implementation uses the  {@link #getMinimumNumber()} method. Subclasses may be able to optimise this.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumDouble
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>double</code>.</p> <p>This implementation uses the  {@link #getMinimumNumber()} method. Subclasses may be able to optimise this.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMinimumFloat
COMMENT : /** 
 * <p>Gets the minimum number in this range as a <code>float</code>.</p> <p>This implementation uses the  {@link #getMinimumNumber()} method. Subclasses may be able to optimise this.</p>
 * @return the minimum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumNumber
COMMENT : /** 
 * <p>Gets the maximum number in this range.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumLong
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>long</code>.</p> <p>This implementation uses the  {@link #getMaximumNumber()} method. Subclasses may be able to optimise this.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumInteger
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>int</code>.</p> <p>This implementation uses the  {@link #getMaximumNumber()} method. Subclasses may be able to optimise this.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumDouble
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>double</code>.</p> <p>This implementation uses the  {@link #getMaximumNumber()} method. Subclasses may be able to optimise this.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getMaximumFloat
COMMENT : /** 
 * <p>Gets the maximum number in this range as a <code>float</code>.</p> <p>This implementation uses the  {@link #getMaximumNumber()} method. Subclasses may be able to optimise this.</p>
 * @return the maximum number in this range
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsNumber
COMMENT : /** 
 * <p>Tests whether the specified <code>Number</code> occurs within this range.</p> <p>The exact comparison implementation varies by subclass. It is intended that an <code>int</code> specific subclass will compare using <code>int</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p>
 * @param number  the number to test, may be <code>null</code>
 * @return <code>true</code> if the specified number occurs within this range
 * @throws IllegalArgumentException if the <code>Number</code> cannot be compared
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsLong
COMMENT : /** 
 * <p>Tests whether the specified <code>Number</code> occurs within this range using <code>long</code> comparison..</p> <p><code>null</code> is handled and returns <code>false</code>.</p> <p>This implementation forwards to the  {@link #containsLong(long)} method.</p>
 * @param value  the long to test, may be <code>null</code>
 * @return <code>true</code> if the specified number occurs within thisrange by <code>long</code> comparison
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsLong
COMMENT : /** 
 * <p>Tests whether the specified <code>long</code> occurs within this range using <code>long</code> comparison.</p> <p>This implementation uses the  {@link #getMinimumLong()} and {@link #getMaximumLong()} methods and should be good for most uses.</p>
 * @param value  the long to test
 * @return <code>true</code> if the specified number occurs within thisrange by <code>long</code> comparison
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsInteger
COMMENT : /** 
 * <p>Tests whether the specified <code>Number</code> occurs within this range using <code>int</code> comparison..</p> <p><code>null</code> is handled and returns <code>false</code>.</p> <p>This implementation forwards to the  {@link #containsInteger(int)} method.</p>
 * @param value  the integer to test, may be <code>null</code>
 * @return <code>true</code> if the specified number occurs within thisrange by <code>int</code> comparison
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsInteger
COMMENT : /** 
 * <p>Tests whether the specified <code>int</code> occurs within this range using <code>int</code> comparison.</p> <p>This implementation uses the  {@link #getMinimumInteger()} and {@link #getMaximumInteger()} methods and should be good for most uses.</p>
 * @param value  the int to test
 * @return <code>true</code> if the specified number occurs within thisrange by <code>int</code> comparison
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsDouble
COMMENT : /** 
 * <p>Tests whether the specified <code>Number</code> occurs within this range using <code>double</code> comparison..</p> <p><code>null</code> is handled and returns <code>false</code>.</p> <p>This implementation forwards to the  {@link #containsDouble(double)} method.</p>
 * @param value  the double to test, may be <code>null</code>
 * @return <code>true</code> if the specified number occurs within thisrange by <code>double</code> comparison
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsDouble
COMMENT : /** 
 * <p>Tests whether the specified <code>double</code> occurs within this range using <code>double</code> comparison.</p> <p>This implementation uses the  {@link #getMinimumDouble()} and {@link #getMaximumDouble()} methods and should be good for most uses.</p>
 * @param value  the double to test
 * @return <code>true</code> if the specified number occurs within thisrange by <code>double</code> comparison
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsFloat
COMMENT : /** 
 * <p>Tests whether the specified <code>Number</code> occurs within this range using <code>float</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p> <p>This implementation forwards to the  {@link #containsFloat(float)} method.</p>
 * @param value  the float to test, may be <code>null</code>
 * @return <code>true</code> if the specified number occurs within thisrange by <code>float</code> comparison
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsFloat
COMMENT : /** 
 * <p>Tests whether the specified <code>float</code> occurs within this range using <code>float</code> comparison.</p> <p>This implementation uses the  {@link #getMinimumFloat()} and {@link #getMaximumFloat()} methods and should be good for most uses.</p>
 * @param value  the float to test
 * @return <code>true</code> if the specified number occurs within thisrange by <code>float</code> comparison
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : containsRange
COMMENT : /** 
 * <p>Tests whether the specified range occurs entirely within this range.</p> <p>The exact comparison implementation varies by subclass. It is intended that an <code>int</code> specific subclass will compare using <code>int</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p> <p>This implementation uses the  {@link #containsNumber(Number)} method.Subclasses may be able to optimise this.</p>
 * @param range  the range to test, may be <code>null</code>
 * @return <code>true</code> if the specified range occurs entirely withinthis range; otherwise, <code>false</code>
 * @throws IllegalArgumentException if the <code>Range</code> cannot be compared
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : overlapsRange
COMMENT : /** 
 * <p>Tests whether the specified range overlaps with this range.</p> <p>The exact comparison implementation varies by subclass. It is intended that an <code>int</code> specific subclass will compare using <code>int</code> comparison.</p> <p><code>null</code> is handled and returns <code>false</code>.</p> <p>This implementation uses the  {@link #containsNumber(Number)} and{@link #containsRange(Range)} methods.Subclasses may be able to optimise this.</p>
 * @param range  the range to test, may be <code>null</code>
 * @return <code>true</code> if the specified range overlaps with thisrange; otherwise, <code>false</code>
 * @throws IllegalArgumentException if the <code>Range</code> cannot be compared
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : equals
COMMENT : /** 
 * <p>Compares this range to another object to test if they are equal.</p>. <p>To be equal, the class, minimum and maximum must be equal.</p> <p>This implementation uses the  {@link #getMinimumNumber()} and {@link #getMaximumNumber()} methods. Subclasses may be able to optimise this.</p>
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : hashCode
COMMENT : /** 
 * <p>Gets a hashCode for the range.</p> <p>This implementation uses the  {@link #getMinimumNumber()} and {@link #getMaximumNumber()} methods. Subclasses may be able to optimise this.</p>
 * @return a hash code value for this object
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toString
COMMENT : /** 
 * <p>Gets the range as a <code>String</code>.</p> <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p> <p>This implementation uses the  {@link #getMinimumNumber()} and {@link #getMaximumNumber()} methods. Subclasses may be able to optimise this.</p>
 * @return the <code>String</code> representation of this range
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : DurationFormatUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testFormatDurationWords
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testFormatDurationPluralWords
COMMENT : /** 
 * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : testFormatDurationHMS
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testFormatDurationISO
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testFormatDuration
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testFormatPeriodISO
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testFormatPeriod
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testLexx
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testBugzilla38401
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testJiraLang281
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testLowDurations
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testEdgeDurations
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testDurationsByBruteForce
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : bruteForce
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : assertEqualDuration
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : assertEqualDuration
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : assertArrayEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : LangTestSuite
COMMENT : /** 
 * Construct a new instance.
 */



PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : /** 
 * Command-line interface.
 */



PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : /** 
 * Get the suite of tests
 */



PACKAGE : package org.apache.commons.lang;

NAME : ValidateTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsTrue1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsTrue2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsTrue3
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsTrue4
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsTrue5
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNotNull1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNotNull2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNotEmptyArray1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNotEmptyArray2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNotEmptyCollection1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNotEmptyCollection2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNotEmptyMap1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNotEmptyMap2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNotEmptyString1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNotEmptyString2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNoNullElementsArray1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNoNullElementsArray2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNoNullElementsCollection1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNoNullElementsCollection2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAllElementsOfType
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeExceptionTestCase
COMMENT : /** 
 * Construct a new instance of <code>NestableRuntimeExceptionTestCase</code>.
 * @param name test case name
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : setUp
COMMENT : /** 
 * Sets up instance variables required by this test case.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : suite
COMMENT : /** 
 * Returns the test suite
 * @return the test suite
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : tearDown
COMMENT : /** 
 * Tears down instance variables required by this test case.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : main
COMMENT : /** 
 * Command line entry point for running the test suite.
 * @param args array of command line arguments
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(String)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(String,Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(String,Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1(Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1(Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1(String,Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1(String,Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1Class
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1Class()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester2
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester2(String,Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester2
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester2(String,Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester2Class
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester2Class()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * @see AbstractNestableTestCase#getThrowable(String)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableClass
COMMENT : /** 
 * @see AbstractNestableTestCase#getThrowableClass()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getBaseThrowableClass
COMMENT : /** 
 * @see AbstractNestableTestCase#getBaseThrowableClass()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : testSpecificPrintStackTrace
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeExceptionTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeExceptionTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeExceptionTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeExceptionTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeExceptionTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeExceptionTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeExceptionTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableRuntimeExceptionTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : NumberRangeTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testMaxMin
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEqualsWithOtherObject
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEqualsWithSameReference
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEqualsNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIncludesNumber
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIncludesNumberNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIncludesRange
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIncludesRangeNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorNullParameters
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructorWithMaxLessThanMin
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testOverlap
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testOverlapNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToStringWithNegatives
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : TimeTestSuite
COMMENT : /** 
 * Construct a new instance.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : main
COMMENT : /** 
 * Command-line interface.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : suite
COMMENT : /** 
 * Get the suite of tests
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : EnumTestSuite
COMMENT : /** 
 * Construct a new instance.
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : main
COMMENT : /** 
 * Command-line interface.
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : suite
COMMENT : /** 
 * Get the suite of tests
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : EnumUtils
COMMENT : /** 
 * Public constructor. This class should not normally be instantiated.
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : /** 
 * <p>Gets an <code>Enum</code> object by class and name.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @param name  the name of the Enum to get, may be <code>null</code>
 * @return the enum object
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : /** 
 * <p>Gets a <code>ValuedEnum</code> object by class and value.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @param value  the value of the <code>Enum</code> to get
 * @return the enum object, or null if the enum does not exist
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : /** 
 * <p>Gets the <code>Map</code> of <code>Enum</code> objects by name using the <code>Enum</code> class.</p> <p>If the requested class has no enum objects an empty <code>Map</code> is returned. The <code>Map</code> is unmodifiable.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @return the enum object Map
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 * @throws IllegalArgumentException if the enum class is not a subclassof <code>Enum</code>
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : /** 
 * <p>Gets the <code>List</code> of <code>Enum</code> objects using the <code>Enum</code> class.</p> <p>The list is in the order that the objects were created (source code order).</p> <p>If the requested class has no enum objects an empty <code>List</code> is returned. The <code>List</code> is unmodifiable.</p>
 * @param enumClass  the class of the Enum to get
 * @return the enum object Map
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 * @throws IllegalArgumentException if the enum class is not a subclassof <code>Enum</code>
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : /** 
 * <p>Gets an <code>Iterator</code> over the <code>Enum</code> objects in an <code>Enum</code> class.</p> <p>The iterator is in the order that the objects were created (source code order).</p> <p>If the requested class has no enum objects an empty <code>Iterator</code> is returned. The <code>Iterator</code> is unmodifiable.</p>
 * @param enumClass  the class of the <code>Enum</code> to get
 * @return an <code>Iterator</code> of the <code>Enum</code> objects
 * @throws IllegalArgumentException if the enum class is <code>null</code>
 * @throws IllegalArgumentException if the enum class is not a subclass of <code>Enum</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : EntitiesPerformanceTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : html40value
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : isovalue
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testBuildHash
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testBuildTree
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testBuildArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testBuildBinary
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testBuildPrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : buildPrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testBuildLookup
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : buildLookup
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : build
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLookupHash
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLookupTree
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLookupArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLookupBinary
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLookupPrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testLookupLookup
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeHash
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeTree
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeBinary
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEscapeLookup
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeHash
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeTree
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testUnescapeBinary
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : lookup
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : escapeIt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : unescapeIt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : IntHashMap
COMMENT : /** 
 * <p>Constructs a new, empty hashtable with a default capacity and load factor, which is <code>20</code> and <code>0.75</code> respectively.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : IntHashMap
COMMENT : /** 
 * <p>Constructs a new, empty hashtable with the specified initial capacity and default load factor, which is <code>0.75</code>.</p>
 * @param initialCapacity the initial capacity of the hashtable.
 * @throws IllegalArgumentException if the initial capacity is lessthan zero.
 */



PACKAGE : package org.apache.commons.lang;

NAME : IntHashMap
COMMENT : /** 
 * <p>Constructs a new, empty hashtable with the specified initial capacity and the specified load factor.</p>
 * @param initialCapacity the initial capacity of the hashtable.
 * @param loadFactor the load factor of the hashtable.
 * @throws IllegalArgumentException  if the initial capacity is lessthan zero, or if the load factor is nonpositive.
 */



PACKAGE : package org.apache.commons.lang;

NAME : size
COMMENT : /** 
 * <p>Returns the number of keys in this hashtable.</p>
 * @return  the number of keys in this hashtable.
 */



PACKAGE : package org.apache.commons.lang;

NAME : isEmpty
COMMENT : /** 
 * <p>Tests if this hashtable maps no keys to values.</p>
 * @return  <code>true</code> if this hashtable maps no keys to values;<code>false</code> otherwise.
 */



PACKAGE : package org.apache.commons.lang;

NAME : contains
COMMENT : /** 
 * <p>Tests if some key maps into the specified value in this hashtable. This operation is more expensive than the <code>containsKey</code> method.</p> <p>Note that this method is identical in functionality to containsValue, (which is part of the Map interface in the collections framework).</p>
 * @param value   a value to search for.
 * @return     <code>true</code> if and only if some key maps to the<code>value</code> argument in this hashtable as determined by the <tt>equals</tt> method; <code>false</code> otherwise.
 * @throws NullPointerException  if the value is <code>null</code>.
 * @see #containsKey(int)
 * @see #containsValue(Object)
 * @see java.util.Map
 */



PACKAGE : package org.apache.commons.lang;

NAME : containsValue
COMMENT : /** 
 * <p>Returns <code>true</code> if this HashMap maps one or more keys to this value.</p> <p>Note that this method is identical in functionality to contains (which predates the Map interface).</p>
 * @param value value whose presence in this HashMap is to be tested.
 * @return boolean <code>true</code> if the value is contained
 * @see java.util.Map
 * @since JDK1.2
 */



PACKAGE : package org.apache.commons.lang;

NAME : containsKey
COMMENT : /** 
 * <p>Tests if the specified object is a key in this hashtable.</p>
 * @param key  possible key.
 * @return <code>true</code> if and only if the specified object is akey in this hashtable, as determined by the <tt>equals</tt> method; <code>false</code> otherwise.
 * @see #contains(Object)
 */



PACKAGE : package org.apache.commons.lang;

NAME : get
COMMENT : /** 
 * <p>Returns the value to which the specified key is mapped in this map.</p>
 * @param key   a key in the hashtable.
 * @return  the value to which the key is mapped in this hashtable;<code>null</code> if the key is not mapped to any value in this hashtable.
 * @see #put(int,Object)
 */



PACKAGE : package org.apache.commons.lang;

NAME : rehash
COMMENT : /** 
 * <p>Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently.</p> <p>This method is called automatically when the number of keys in the hashtable exceeds this hashtable's capacity and load factor.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : put
COMMENT : /** 
 * <p>Maps the specified <code>key</code> to the specified <code>value</code> in this hashtable. The key cannot be <code>null</code>. </p> <p>The value can be retrieved by calling the <code>get</code> method with a key that is equal to the original key.</p>
 * @param key     the hashtable key.
 * @param value   the value.
 * @return the previous value of the specified key in this hashtable,or <code>null</code> if it did not have one.
 * @throws NullPointerException  if the key is <code>null</code>.
 * @see #get(int)
 */



PACKAGE : package org.apache.commons.lang;

NAME : remove
COMMENT : /** 
 * <p>Removes the key (and its corresponding value) from this hashtable.</p> <p>This method does nothing if the key is not present in the hashtable.</p>
 * @param key   the key that needs to be removed.
 * @return  the value to which the key had been mapped in this hashtable,or <code>null</code> if the key did not have a mapping.
 */



PACKAGE : package org.apache.commons.lang;

NAME : clear
COMMENT : /** 
 * <p>Clears this hashtable so that it contains no keys.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : Entry
COMMENT : /** 
 * <p>Create a new entry with the given values.</p>
 * @param hash The code used to hash the object with
 * @param key The key used to enter this in the table
 * @param value The value for this key
 * @param next A reference to the next entry in the table
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : OperationEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumClass
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : PlusOperation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : MinusOperation
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : IllegalClassExceptionTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_classArgs_allNullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_classArgs_nullExpected
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_classArgs_nullActual
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_stringArg_nullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_classObjectArgs_allNullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_classObjectArgs_nullExpected
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor_classObjectArgs_nullActual
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetMessage_classArgs_nullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetMessage_classArgs_normalInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetMessage_classObjectArgs_nullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetMessage_classObjectArgs_normalInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetMessage_stringArg_nullInput
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testGetMessage_stringArg_validInput
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableErrorTestCase
COMMENT : /** 
 * Construct a new instance of <code>NestableErrorTestCase</code>.
 * @param name test case name
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : setUp
COMMENT : /** 
 * Sets up instance variables required by this test case.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : suite
COMMENT : /** 
 * Returns the test suite
 * @return the test suite
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : tearDown
COMMENT : /** 
 * Tears down instance variables required by this test case.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : main
COMMENT : /** 
 * Command line entry point for running the test suite.
 * @param args array of command line arguments
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(String)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(String,Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(String,Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1(Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1(Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1(String,Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1(String,Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1Class
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1Class()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester2
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester2(String,Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester2
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester2(String,Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester2Class
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester2Class()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * @see AbstractNestableTestCase#getThrowable(String)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableClass
COMMENT : /** 
 * @see AbstractNestableTestCase#getThrowableClass()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getBaseThrowableClass
COMMENT : /** 
 * @see AbstractNestableTestCase#getBaseThrowableClass()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableErrorTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableErrorTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableErrorTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableErrorTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableErrorTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableErrorTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableErrorTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableErrorTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableByteTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testConstructors
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testGetSet
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testCompareTo
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testPrimitiveValues
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToByte
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testIncrement
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testDecrement
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testAddValuePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testAddValueObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testSubtractValuePrimitive
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testSubtractValueObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : StringEscapeUtils
COMMENT : /** 
 * <p><code>StringEscapeUtils</code> instances should NOT be constructed in standard programming.</p> <p>Instead, the class should be used as: <pre>StringEscapeUtils.escapeJava("foo");</pre></p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeJava
COMMENT : /** 
 * <p>Escapes the characters in a <code>String</code> using Java String rules.</p> <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p> <p>So a tab becomes the characters <code>'\\'</code> and <code>'t'</code>.</p> <p>The only difference between Java strings and JavaScript strings is that in JavaScript, a single quote must be escaped.</p> <p>Example: <pre> input string: He didn't say, "Stop!" output string: He didn't say, \"Stop!\" </pre> </p>
 * @param str  String to escape values in, may be null
 * @return String with escaped values, <code>null</code> if null string input
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeJava
COMMENT : /** 
 * <p>Escapes the characters in a <code>String</code> using Java String rules to a <code>Writer</code>.</p> <p>A <code>null</code> string input has no effect.</p>
 * @see #escapeJava(java.lang.String)
 * @param out  Writer to write escaped string into
 * @param str  String to escape values in, may be null
 * @throws IllegalArgumentException if the Writer is <code>null</code>
 * @throws IOException if error occurs on underlying Writer
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeJavaScript
COMMENT : /** 
 * <p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p> <p>Escapes any values it finds into their JavaScript String form. Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p> <p>So a tab becomes the characters <code>'\\'</code> and <code>'t'</code>.</p> <p>The only difference between Java strings and JavaScript strings is that in JavaScript, a single quote must be escaped.</p> <p>Example: <pre> input string: He didn't say, "Stop!" output string: He didn\'t say, \"Stop!\" </pre> </p>
 * @param str  String to escape values in, may be null
 * @return String with escaped values, <code>null</code> if null string input
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeJavaScript
COMMENT : /** 
 * <p>Escapes the characters in a <code>String</code> using JavaScript String rules to a <code>Writer</code>.</p> <p>A <code>null</code> string input has no effect.</p>
 * @see #escapeJavaScript(java.lang.String)
 * @param out  Writer to write escaped string into
 * @param str  String to escape values in, may be null
 * @throws IllegalArgumentException if the Writer is <code>null</code>
 * @throws IOException if error occurs on underlying Writer
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeJavaStyleString
COMMENT : /** 
 * <p>Worker method for the  {@link #escapeJavaScript(String)} method.</p>
 * @param str String to escape values in, may be null
 * @param escapeSingleQuotes escapes single quotes if <code>true</code>
 * @return the escaped string
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeJavaStyleString
COMMENT : /** 
 * <p>Worker method for the  {@link #escapeJavaScript(String)} method.</p>
 * @param out write to receieve the escaped string
 * @param str String to escape values in, may be null
 * @param escapeSingleQuote escapes single quotes if <code>true</code>
 * @throws IOException if an IOException occurs
 */



PACKAGE : package org.apache.commons.lang;

NAME : hex
COMMENT : /** 
 * <p>Returns an upper case hexadecimal <code>String</code> for the given character.</p>
 * @param ch The character to convert.
 * @return An upper case hexadecimal <code>String</code>
 */



PACKAGE : package org.apache.commons.lang;

NAME : unescapeJava
COMMENT : /** 
 * <p>Unescapes any Java literals found in the <code>String</code>. For example, it will turn a sequence of <code>'\'</code> and <code>'n'</code> into a newline character, unless the <code>'\'</code> is preceded by another <code>'\'</code>.</p>
 * @param str  the <code>String</code> to unescape, may be null
 * @return a new unescaped <code>String</code>, <code>null</code> if null string input
 */



PACKAGE : package org.apache.commons.lang;

NAME : unescapeJava
COMMENT : /** 
 * <p>Unescapes any Java literals found in the <code>String</code> to a <code>Writer</code>.</p> <p>For example, it will turn a sequence of <code>'\'</code> and <code>'n'</code> into a newline character, unless the <code>'\'</code> is preceded by another <code>'\'</code>.</p> <p>A <code>null</code> string input has no effect.</p>
 * @param out  the <code>Writer</code> used to output unescaped characters
 * @param str  the <code>String</code> to unescape, may be null
 * @throws IllegalArgumentException if the Writer is <code>null</code>
 * @throws IOException if error occurs on underlying Writer
 */



PACKAGE : package org.apache.commons.lang;

NAME : unescapeJavaScript
COMMENT : /** 
 * <p>Unescapes any JavaScript literals found in the <code>String</code>.</p> <p>For example, it will turn a sequence of <code>'\'</code> and <code>'n'</code> into a newline character, unless the <code>'\'</code> is preceded by another <code>'\'</code>.</p>
 * @see #unescapeJava(String)
 * @param str  the <code>String</code> to unescape, may be null
 * @return A new unescaped <code>String</code>, <code>null</code> if null string input
 */



PACKAGE : package org.apache.commons.lang;

NAME : unescapeJavaScript
COMMENT : /** 
 * <p>Unescapes any JavaScript literals found in the <code>String</code> to a <code>Writer</code>.</p> <p>For example, it will turn a sequence of <code>'\'</code> and <code>'n'</code> into a newline character, unless the <code>'\'</code> is preceded by another <code>'\'</code>.</p> <p>A <code>null</code> string input has no effect.</p>
 * @see #unescapeJava(Writer,String)
 * @param out  the <code>Writer</code> used to output unescaped characters
 * @param str  the <code>String</code> to unescape, may be null
 * @throws IllegalArgumentException if the Writer is <code>null</code>
 * @throws IOException if error occurs on underlying Writer
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeHtml
COMMENT : /** 
 * <p>Escapes the characters in a <code>String</code> using HTML entities.</p> <p> For example: </p>  <p><code>"bread" & "butter"</code></p> becomes: <p> <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>. </p> <p>Supports all known HTML 4.0 entities, including funky accents. Note that the commonly used apostrophe escape character (&amp;apos;) is not a legal entity and so is not supported). </p>
 * @param str  the <code>String</code> to escape, may be null
 * @return a new escaped <code>String</code>, <code>null</code> if null string input
 * @see #unescapeHtml(String)
 * @see <a href="http://hotwired.lycos.com/webmonkey/reference/special_characters/">ISO Entities</a>
 * @see <a href="http://www.w3.org/TR/REC-html32#latin1">HTML 3.2 Character Entities for ISO Latin-1</a>
 * @see <a href="http://www.w3.org/TR/REC-html40/sgml/entities.html">HTML 4.0 Character entity references</a>
 * @see <a href="http://www.w3.org/TR/html401/charset.html#h-5.3">HTML 4.01 Character References</a>
 * @see <a href="http://www.w3.org/TR/html401/charset.html#code-position">HTML 4.01 Code positions</a>
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeHtml
COMMENT : /** 
 * <p>Escapes the characters in a <code>String</code> using HTML entities and writes them to a <code>Writer</code>.</p> <p> For example: </p>  <code>"bread" & "butter"</code> <p>becomes:</p> <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>. <p>Supports all known HTML 4.0 entities, including funky accents. Note that the commonly used apostrophe escape character (&amp;apos;) is not a legal entity and so is not supported). </p>
 * @param writer  the writer receiving the escaped string, not null
 * @param string  the <code>String</code> to escape, may be null
 * @throws IllegalArgumentException if the writer is null
 * @throws IOException when <code>Writer</code> passed throws the exception fromcalls to the  {@link Writer#write(int)} methods.
 * @see #escapeHtml(String)
 * @see #unescapeHtml(String)
 * @see <a href="http://hotwired.lycos.com/webmonkey/reference/special_characters/">ISO Entities</a>
 * @see <a href="http://www.w3.org/TR/REC-html32#latin1">HTML 3.2 Character Entities for ISO Latin-1</a>
 * @see <a href="http://www.w3.org/TR/REC-html40/sgml/entities.html">HTML 4.0 Character entity references</a>
 * @see <a href="http://www.w3.org/TR/html401/charset.html#h-5.3">HTML 4.01 Character References</a>
 * @see <a href="http://www.w3.org/TR/html401/charset.html#code-position">HTML 4.01 Code positions</a>
 */



PACKAGE : package org.apache.commons.lang;

NAME : unescapeHtml
COMMENT : /** 
 * <p>Unescapes a string containing entity escapes to a string containing the actual Unicode characters corresponding to the escapes. Supports HTML 4.0 entities.</p> <p>For example, the string "&amp;lt;Fran&amp;ccedil;ais&amp;gt;" will become "&lt;Fran&ccedil;ais&gt;"</p> <p>If an entity is unrecognized, it is left alone, and inserted verbatim into the result string. e.g. "&amp;gt;&amp;zzzz;x" will become "&gt;&amp;zzzz;x".</p>
 * @param str  the <code>String</code> to unescape, may be null
 * @return a new unescaped <code>String</code>, <code>null</code> if null string input
 * @see #escapeHtml(Writer,String)
 */



PACKAGE : package org.apache.commons.lang;

NAME : unescapeHtml
COMMENT : /** 
 * <p>Unescapes a string containing entity escapes to a string containing the actual Unicode characters corresponding to the escapes. Supports HTML 4.0 entities.</p> <p>For example, the string "&amp;lt;Fran&amp;ccedil;ais&amp;gt;" will become "&lt;Fran&ccedil;ais&gt;"</p> <p>If an entity is unrecognized, it is left alone, and inserted verbatim into the result string. e.g. "&amp;gt;&amp;zzzz;x" will become "&gt;&amp;zzzz;x".</p>
 * @param writer  the writer receiving the unescaped string, not null
 * @param string  the <code>String</code> to unescape, may be null
 * @throws IllegalArgumentException if the writer is null
 * @throws IOException if an IOException occurs
 * @see #escapeHtml(String)
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeXml
COMMENT : /** 
 * <p>Escapes the characters in a <code>String</code> using XML entities.</p> <p>For example: <tt>"bread" & "butter"</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>. </p> <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos). Does not support DTDs or external entities.</p> <p>Note that unicode characters greater than 0x7f are currently escaped to  their numerical \\u equivalent. This may change in future releases. </p>
 * @param writer  the writer receiving the unescaped string, not null
 * @param str  the <code>String</code> to escape, may be null
 * @throws IllegalArgumentException if the writer is null
 * @throws IOException if there is a problem writing
 * @see #unescapeXml(java.lang.String)
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeXml
COMMENT : /** 
 * <p>Escapes the characters in a <code>String</code> using XML entities.</p> <p>For example: <tt>"bread" & "butter"</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>. </p> <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos). Does not support DTDs or external entities.</p> <p>Note that unicode characters greater than 0x7f are currently escaped to  their numerical \\u equivalent. This may change in future releases. </p>
 * @param str  the <code>String</code> to escape, may be null
 * @return a new escaped <code>String</code>, <code>null</code> if null string input
 * @see #unescapeXml(java.lang.String)
 */



PACKAGE : package org.apache.commons.lang;

NAME : unescapeXml
COMMENT : /** 
 * <p>Unescapes a string containing XML entity escapes to a string containing the actual Unicode characters corresponding to the escapes.</p> <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos). Does not support DTDs or external entities.</p> <p>Note that numerical \\u unicode codes are unescaped to their respective  unicode characters. This may change in future releases. </p>
 * @param writer  the writer receiving the unescaped string, not null
 * @param str  the <code>String</code> to unescape, may be null
 * @throws IllegalArgumentException if the writer is null
 * @throws IOException if there is a problem writing
 * @see #escapeXml(String)
 */



PACKAGE : package org.apache.commons.lang;

NAME : unescapeXml
COMMENT : /** 
 * <p>Unescapes a string containing XML entity escapes to a string containing the actual Unicode characters corresponding to the escapes.</p> <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos). Does not support DTDs or external entities.</p> <p>Note that numerical \\u unicode codes are unescaped to their respective  unicode characters. This may change in future releases. </p>
 * @param str  the <code>String</code> to unescape, may be null
 * @return a new unescaped <code>String</code>, <code>null</code> if null string input
 * @see #escapeXml(String)
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeSql
COMMENT : /** 
 * <p>Escapes the characters in a <code>String</code> to be suitable to pass to an SQL query.</p> <p>For example, <pre>statement.executeQuery("SELECT * FROM MOVIES WHERE TITLE='" +  StringEscapeUtils.escapeSql("McHale's Navy") +  "'");</pre> </p> <p>At present, this method only turns single-quotes into doubled single-quotes (<code>"McHale's Navy"</code> => <code>"McHale''s Navy"</code>). It does not handle the cases of percent (%) or underscore (_) for use in LIKE clauses.</p> see http://www.jguru.com/faq/view.jsp?EID=8881
 * @param str  the string to escape, may be null
 * @return a new String, escaped for SQL, <code>null</code> if null string input
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeCsv
COMMENT : /** 
 * <p>Returns a <code>String</code> value for a CSV column enclosed in double quotes, if required.</p> <p>If the value contains a comma, newline or double quote, then the String value is returned enclosed in double quotes.</p> </p> <p>Any double quote characters in the value are escaped with another double quote.</p> <p>If the value does not contain a comma, newline or double quote, then the String value is returned unchanged.</p> </p> see <a href="http://en.wikipedia.org/wiki/Comma-separated_values">Wikipedia</a> and <a href="http://tools.ietf.org/html/rfc4180">RFC 4180</a>.
 * @param str the input CSV column String, may be null
 * @return the input String, enclosed in double quotes if the value contains a comma,newline or double quote, <code>null</code> if null string input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : escapeCsv
COMMENT : /** 
 * <p>Writes a <code>String</code> value for a CSV column enclosed in double quotes, if required.</p> <p>If the value contains a comma, newline or double quote, then the String value is written enclosed in double quotes.</p> </p> <p>Any double quote characters in the value are escaped with another double quote.</p> <p>If the value does not contain a comma, newline or double quote, then the String value is written unchanged (null values are ignored).</p> </p> see <a href="http://en.wikipedia.org/wiki/Comma-separated_values">Wikipedia</a> and <a href="http://tools.ietf.org/html/rfc4180">RFC 4180</a>.
 * @param str the input CSV column String, may be null
 * @param out Writer to write input string to, enclosed in double quotes if it containsa comma, newline or double quote
 * @throws IOException if error occurs on underlying Writer
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : unescapeCsv
COMMENT : /** 
 * <p>Returns a <code>String</code> value for an unescaped CSV column. </p> <p>If the value is enclosed in double quotes, and contains a comma, newline  or double quote, then quotes are removed.  </p> <p>Any double quote escaped characters (a pair of double quotes) are unescaped  to just one double quote. </p> <p>If the value is not enclosed in double quotes, or is and does not contain a  comma, newline or double quote, then the String value is returned unchanged.</p> </p> see <a href="http://en.wikipedia.org/wiki/Comma-separated_values">Wikipedia</a> and <a href="http://tools.ietf.org/html/rfc4180">RFC 4180</a>.
 * @param str the input CSV column String, may be null
 * @return the input String, with enclosing double quotes removed and embedded double quotes unescaped, <code>null</code> if null string input
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : unescapeCsv
COMMENT : /** 
 * <p>Returns a <code>String</code> value for an unescaped CSV column. </p> <p>If the value is enclosed in double quotes, and contains a comma, newline  or double quote, then quotes are removed.  </p> <p>Any double quote escaped characters (a pair of double quotes) are unescaped  to just one double quote. </p> <p>If the value is not enclosed in double quotes, or is and does not contain a  comma, newline or double quote, then the String value is returned unchanged.</p> </p> see <a href="http://en.wikipedia.org/wiki/Comma-separated_values">Wikipedia</a> and <a href="http://tools.ietf.org/html/rfc4180">RFC 4180</a>.
 * @param str the input CSV column String, may be null
 * @param out Writer to write the input String to, with enclosing double quotes removed and embedded double quotes unescaped, <code>null</code> if null string input
 * @throws IOException if error occurs on underlying Writer
 * @since 2.4
 */



PACKAGE : package org.apache.commons.lang;

NAME : ObjectUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIsNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testIdentityToString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAppendIdentityToString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToString_Object
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testToString_ObjectString
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNull
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testMax
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testMin
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : MathTestSuite
COMMENT : /** 
 * Construct a new instance.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : main
COMMENT : /** 
 * Command-line interface.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : suite
COMMENT : /** 
 * Get the suite of tests
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : createMessageFormat
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testProperName
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : testMixed
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : getLocale
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : format
COMMENT : /** 
 * {@inheritDoc}
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : parseObject
COMMENT : /** 
 * Unable to do much; return the String.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : seekDelimiter
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : next
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : NotImplementedException
COMMENT : /** 
 * Constructs a new <code>NotImplementedException</code> with default message.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : NotImplementedException
COMMENT : /** 
 * Constructs a new <code>NotImplementedException</code> with specified detail message.
 * @param msg  the error message.
 */



PACKAGE : package org.apache.commons.lang;

NAME : NotImplementedException
COMMENT : /** 
 * Constructs a new <code>NotImplementedException</code> with specified nested <code>Throwable</code> and default message.
 * @param cause  the exception that caused this exception to be thrown
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : NotImplementedException
COMMENT : /** 
 * Constructs a new <code>NotImplementedException</code> with specified detail message and nested <code>Throwable</code>.
 * @param msg  the error message
 * @param cause  the exception that caused this exception to be thrown
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : NotImplementedException
COMMENT : /** 
 * Constructs a new <code>NotImplementedException</code> referencing the specified class.
 * @param clazz the <code>Class</code> that has not implemented the method
 */



PACKAGE : package org.apache.commons.lang;

NAME : getCause
COMMENT : /** 
 * Gets the root cause of this exception.
 * @return the root cause of this exception.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getMessage
COMMENT : /** 
 * Gets the combined the error message of this and any nested errors.
 * @return the error message
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getMessage
COMMENT : /** 
 * Returns the error message of the <code>Throwable</code> in the chain of <code>Throwable</code>s at the specified index, numbered from 0.
 * @param index  the index of the <code>Throwable</code> in the chain
 * @return the error message, or null if the <code>Throwable</code> at thespecified index in the chain does not contain a message
 * @throws IndexOutOfBoundsException if the <code>index</code> argument isnegative or not less than the count of <code>Throwable</code>s in the chain
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getMessages
COMMENT : /** 
 * Returns the error message of this and any nested <code>Throwable</code> objects. Each throwable returns a message, a null string is included in the array if there is no message for a particular <code>Throwable</code>.
 * @return the error messages
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getThrowable
COMMENT : /** 
 * Returns the <code>Throwable</code> in the chain by index.
 * @param index  the index to retrieve
 * @return the <code>Throwable</code>
 * @throws IndexOutOfBoundsException if the <code>index</code> argument isnegative or not less than the count of <code>Throwable</code>s in the chain
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getThrowableCount
COMMENT : /** 
 * Returns the number of nested <code>Throwable</code>s represented by this <code>Nestable</code>, including this <code>Nestable</code>.
 * @return the throwable count
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : getThrowables
COMMENT : /** 
 * Returns this <code>Nestable</code> and any nested <code>Throwable</code>s in an array of <code>Throwable</code>s, one element for each <code>Throwable</code>.
 * @return the <code>Throwable</code>s
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOfThrowable
COMMENT : /** 
 * Returns the index of the first occurrence of the specified type. If there is no match, <code>-1</code> is returned.
 * @param type  the type to search for
 * @return index of the first occurrence of the type in the chain, or -1 ifthe type is not found
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : indexOfThrowable
COMMENT : /** 
 * Returns the index of the first occurrence of the specified type starting from the specified index. If there is no match, <code>-1</code> is returned.
 * @param type  the type to search for
 * @param fromIndex  the index of the starting position in the chain to be searched
 * @return index of the first occurrence of the type in the chain, or -1 ifthe type is not found
 * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argumentis negative or not less than the count of <code>Throwable</code>s in the chain
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : printStackTrace
COMMENT : /** 
 * Prints the stack trace of this exception. Includes information from the exception, if any, which caused this exception.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : printStackTrace
COMMENT : /** 
 * Prints the stack trace of this exception to the specified stream. Includes information from the exception, if any, which caused this exception.
 * @param out  the stream to write to
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : printStackTrace
COMMENT : /** 
 * Prints the stack trace of this exception to the specified writer. Includes information from the exception, if any, which caused this exception.
 * @param out  the writer to write to
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang;

NAME : printPartialStackTrace
COMMENT : /** 
 * Prints the stack trace for this exception only (root cause not included) using the specified writer.
 * @param out  the writer to write to
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.mutable;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : MutableBooleanTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testCompareTo
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testConstructors
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testGetSet
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testHashCode
COMMENT : null


PACKAGE : package org.apache.commons.lang.mutable;

NAME : testToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : StandardToStringStyle
COMMENT : /** 
 * <p>Constructor.</p>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isUseClassName
COMMENT : /** 
 * <p>Gets whether to use the class name.</p>
 * @return the current useClassName flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setUseClassName
COMMENT : /** 
 * <p>Sets whether to use the class name.</p>
 * @param useClassName  the new useClassName flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isUseShortClassName
COMMENT : /** 
 * <p>Gets whether to output short or long class names.</p>
 * @return the current useShortClassName flag
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isShortClassName
COMMENT : /** 
 * <p>Gets whether to output short or long class names.</p>
 * @return the current shortClassName flag
 * @deprecated Use {@link #isUseShortClassName()}Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setUseShortClassName
COMMENT : /** 
 * <p>Sets whether to output short or long class names.</p>
 * @param useShortClassName  the new useShortClassName flag
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setShortClassName
COMMENT : /** 
 * <p>Sets whether to output short or long class names.</p>
 * @param shortClassName  the new shortClassName flag
 * @deprecated Use {@link #setUseShortClassName(boolean)}Method will be removed in Commons Lang 3.0.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isUseIdentityHashCode
COMMENT : /** 
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setUseIdentityHashCode
COMMENT : /** 
 * <p>Sets whether to use the identity hash code.</p>
 * @param useIdentityHashCode  the new useIdentityHashCode flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isUseFieldNames
COMMENT : /** 
 * <p>Gets whether to use the field names passed in.</p>
 * @return the current useFieldNames flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setUseFieldNames
COMMENT : /** 
 * <p>Sets whether to use the field names passed in.</p>
 * @param useFieldNames  the new useFieldNames flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isDefaultFullDetail
COMMENT : /** 
 * <p>Gets whether to use full detail when the caller doesn't specify.</p>
 * @return the current defaultFullDetail flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setDefaultFullDetail
COMMENT : /** 
 * <p>Sets whether to use full detail when the caller doesn't specify.</p>
 * @param defaultFullDetail  the new defaultFullDetail flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isArrayContentDetail
COMMENT : /** 
 * <p>Gets whether to output array content detail.</p>
 * @return the current array content detail setting
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setArrayContentDetail
COMMENT : /** 
 * <p>Sets whether to output array content detail.</p>
 * @param arrayContentDetail  the new arrayContentDetail flag
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getArrayStart
COMMENT : /** 
 * <p>Gets the array start text.</p>
 * @return the current array start text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setArrayStart
COMMENT : /** 
 * <p>Sets the array start text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param arrayStart  the new array start text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getArrayEnd
COMMENT : /** 
 * <p>Gets the array end text.</p>
 * @return the current array end text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setArrayEnd
COMMENT : /** 
 * <p>Sets the array end text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param arrayEnd  the new array end text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getArraySeparator
COMMENT : /** 
 * <p>Gets the array separator text.</p>
 * @return the current array separator text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setArraySeparator
COMMENT : /** 
 * <p>Sets the array separator text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param arraySeparator  the new array separator text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getContentStart
COMMENT : /** 
 * <p>Gets the content start text.</p>
 * @return the current content start text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setContentStart
COMMENT : /** 
 * <p>Sets the content start text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param contentStart  the new content start text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getContentEnd
COMMENT : /** 
 * <p>Gets the content end text.</p>
 * @return the current content end text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setContentEnd
COMMENT : /** 
 * <p>Sets the content end text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param contentEnd  the new content end text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getFieldNameValueSeparator
COMMENT : /** 
 * <p>Gets the field name value separator text.</p>
 * @return the current field name value separator text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setFieldNameValueSeparator
COMMENT : /** 
 * <p>Sets the field name value separator text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param fieldNameValueSeparator  the new field name value separator text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getFieldSeparator
COMMENT : /** 
 * <p>Gets the field separator text.</p>
 * @return the current field separator text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setFieldSeparator
COMMENT : /** 
 * <p>Sets the field separator text.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param fieldSeparator  the new field separator text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isFieldSeparatorAtStart
COMMENT : /** 
 * <p>Gets whether the field separator should be added at the start  of each buffer.</p>
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setFieldSeparatorAtStart
COMMENT : /** 
 * <p>Sets whether the field separator should be added at the start  of each buffer.</p>
 * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isFieldSeparatorAtEnd
COMMENT : /** 
 * <p>Gets whether the field separator should be added at the end  of each buffer.</p>
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setFieldSeparatorAtEnd
COMMENT : /** 
 * <p>Sets whether the field separator should be added at the end  of each buffer.</p>
 * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getNullText
COMMENT : /** 
 * <p>Gets the text to output when <code>null</code> found.</p>
 * @return the current text to output when <code>null</code> found
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setNullText
COMMENT : /** 
 * <p>Sets the text to output when <code>null</code> found.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param nullText  the new text to output when <code>null</code> found
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getSizeStartText
COMMENT : /** 
 * <p>Gets the text to output when a <code>Collection</code>, <code>Map</code> or <code>Array</code> size is output.</p> <p>This is output before the size value.</p>
 * @return the current start of size text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setSizeStartText
COMMENT : /** 
 * <p>Sets the start text to output when a <code>Collection</code>, <code>Map</code> or <code>Array</code> size is output.</p> <p>This is output before the size value.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param sizeStartText  the new start of size text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getSizeEndText
COMMENT : /** 
 * Gets the end text to output when a <code>Collection</code>, <code>Map</code> or <code>Array</code> size is output.</p> <p>This is output after the size value.</p>
 * @return the current end of size text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setSizeEndText
COMMENT : /** 
 * <p>Sets the end text to output when a <code>Collection</code>, <code>Map</code> or <code>Array</code> size is output.</p> <p>This is output after the size value.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param sizeEndText  the new end of size text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getSummaryObjectStartText
COMMENT : /** 
 * <p>Gets the start text to output when an <code>Object</code> is output in summary mode.</p> <P>This is output before the size value.</p>
 * @return the current start of summary text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setSummaryObjectStartText
COMMENT : /** 
 * <p>Sets the start text to output when an <code>Object</code> is output in summary mode.</p> <p>This is output before the size value.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param summaryObjectStartText  the new start of summary text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getSummaryObjectEndText
COMMENT : /** 
 * <p>Gets the end text to output when an <code>Object</code> is output in summary mode.</p> <p>This is output after the size value.</p>
 * @return the current end of summary text
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setSummaryObjectEndText
COMMENT : /** 
 * <p>Sets the end text to output when an <code>Object</code> is output in summary mode.</p> <p>This is output after the size value.</p> <p><code>null</code> is accepted, but will be converted to an empty String.</p>
 * @param summaryObjectEndText  the new end of summary text
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableExceptionTestCase
COMMENT : /** 
 * Construct a new instance of <code>NestableExceptionTestCase</code>.
 * @param name test case name
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : setUp
COMMENT : /** 
 * Sets up instance variables required by this test case.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : suite
COMMENT : /** 
 * Returns the test suite
 * @return the test suite
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : tearDown
COMMENT : /** 
 * Tears down instance variables required by this test case.
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : main
COMMENT : /** 
 * Command line entry point for running the test suite.
 * @param args array of command line arguments
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(String)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(String,Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getNestable
COMMENT : /** 
 * @see AbstractNestableTestCase#getNestable(String,Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1(Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1(Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1(String,Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1(String,Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester1Class
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester1Class()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester2
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester2(String,Throwable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester2
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester2(String,Nestable)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getTester2Class
COMMENT : /** 
 * @see AbstractNestableTestCase#getTester2Class()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowable
COMMENT : /** 
 * @see AbstractNestableTestCase#getThrowable(String)
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getThrowableClass
COMMENT : /** 
 * @see AbstractNestableTestCase#getThrowableClass()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : getBaseThrowableClass
COMMENT : /** 
 * @see AbstractNestableTestCase#getBaseThrowableClass()
 */



PACKAGE : package org.apache.commons.lang.exception;

NAME : testSpecificPrintStackTrace
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : testSerialization
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableExceptionTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableExceptionTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableExceptionTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableExceptionTester1
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableExceptionTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableExceptionTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableExceptionTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.exception;

NAME : NestableExceptionTester2
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : NestReferenced
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : ColorEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAddObjectArrayBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAddObjectArrayByte
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAddObjectArrayChar
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAddObjectArrayDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAddObjectArrayFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAddObjectArrayInt
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAddObjectArrayLong
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAddObjectArrayShort
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAddObjectArrayObject
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAddObjectArrayToObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testAddObjectAtIndex
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : ToStringBuilderTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testConstructorEx1
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testConstructorEx2
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testConstructorEx3
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testGetSetDefault
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetDefaultEx
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBlank
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionInteger
COMMENT : /** 
 * Test wrapper for int primitive.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionCharacter
COMMENT : /** 
 * Test wrapper for char primitive.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionBoolean
COMMENT : /** 
 * Test wrapper for char boolean.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toBaseString
COMMENT : /** 
 * Create the same toString() as Object.toString().
 * @param o the object to create the string for.
 * @return a String in the Object.toString format.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : assertReflectionArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionIntArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionShortArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionyteArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionCharArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionDoubleArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionFloatArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionBooleanArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionFloatArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionLongArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionIntArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionhortArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionByteArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionCharArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionDoubleArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionBooleanArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHierarchyArrayList
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionHierarchy
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testInnerClassReflection
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionArrayCycle
COMMENT : /** 
 * Test an array element pointing to its container.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionArrayCycleLevel2
COMMENT : /** 
 * Test an array element pointing to its container.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionArrayArrayCycle
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSimpleReflectionObjectCycle
COMMENT : /** 
 * Test an Object pointing to itself, the simplest test.
 * @throws Exception
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testSelfInstanceVarReflectionObjectCycle
COMMENT : /** 
 * Test a class that defines an ivar pointing to itself.
 * @throws Exception
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testSelfInstanceTwoVarsReflectionObjectCycle
COMMENT : /** 
 * Test a class that defines an ivar pointing to itself.  This test was  created to show that handling cyclical object resulted in a missing endFieldSeparator call.
 * @throws Exception
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionObjectCycle
COMMENT : /** 
 * Test Objects pointing to each other.
 * @throws Exception
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionArrayAndObjectCycle
COMMENT : /** 
 * Test a nasty combination of arrays and Objects pointing to each other. objects[0] -> SimpleReflectionTestFixture[ o -> objects ]
 * @throws Exception
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : validateEmptyToStringStyleRegistry
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testAppendSuper
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testAppendToString
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testInt
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testShort
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testChar
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testByte
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testDouble
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFloat
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBoolean
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testIntArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testShortArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testByteArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testCharArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testDoubleArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFloatArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBooleanArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testIntArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testShortArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testByteArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testCharArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testDoubleArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testFloatArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBooleanArrayArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectCycle
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSimpleReflectionStatics
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionStatics
COMMENT : /** 
 * Tests ReflectionToStringBuilder.toString() for statics.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testInheritedReflectionStatics
COMMENT : /** 
 * Tests ReflectionToStringBuilder.toString() for statics.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toStringWithStatics
COMMENT : /** 
 * <p>This method uses reflection to build a suitable <code>toString</code> value which includes static fields.</p> <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p>Transient fields are not output.</p> <p>Superclass fields will be appended up to and including the specified superclass.  A null superclass is treated as <code>java.lang.Object</code>.</p> <p>If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.</p>
 * @param object  the Object to be output
 * @param style  the style of the <code>toString</code> to create,may be <code>null</code>
 * @param reflectUpToClass  the superclass to reflect up to (inclusive),may be <code>null</code>
 * @return the String result
 * @throws IllegalArgumentException if the Object is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : testReflectionNull
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testAppendToStringUsingMultiLineStyle
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : SimpleReflectionTestFixture
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : SimpleReflectionTestFixture
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : SelfInstanceVarReflectionTestFixture
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : SelfInstanceTwoVarsReflectionTestFixture
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : getOtherType
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : Nest
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : ColorEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : EqualsBuilder
COMMENT : /** 
 * <p>Constructor for EqualsBuilder.</p> <p>Starts off assuming that equals is <code>true</code>.</p>
 * @see Object#equals(Object)
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionEquals
COMMENT : /** 
 * <p>This method uses reflection to determine if the two <code>Object</code>s are equal.</p> <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly.</p> <p>Transient members will be not be tested, as they are likely derived fields, and not part of the value of the Object.</p> <p>Static fields will not be tested. Superclass fields will be included.</p>
 * @param lhs  <code>this</code> object
 * @param rhs  the other object
 * @return <code>true</code> if the two Objects have tested equals.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionEquals
COMMENT : /** 
 * <p>This method uses reflection to determine if the two <code>Object</code>s are equal.</p> <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly.</p> <p>Transient members will be not be tested, as they are likely derived fields, and not part of the value of the Object.</p> <p>Static fields will not be tested. Superclass fields will be included.</p>
 * @param lhs  <code>this</code> object
 * @param rhs  the other object
 * @param excludeFields  Collection of String field names to exclude from testing
 * @return <code>true</code> if the two Objects have tested equals.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionEquals
COMMENT : /** 
 * <p>This method uses reflection to determine if the two <code>Object</code>s are equal.</p> <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly.</p> <p>Transient members will be not be tested, as they are likely derived fields, and not part of the value of the Object.</p> <p>Static fields will not be tested. Superclass fields will be included.</p>
 * @param lhs  <code>this</code> object
 * @param rhs  the other object
 * @param excludeFields  array of field names to exclude from testing
 * @return <code>true</code> if the two Objects have tested equals.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionEquals
COMMENT : /** 
 * <p>This method uses reflection to determine if the two <code>Object</code>s are equal.</p> <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly.</p> <p>If the TestTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>.</p> <p>Static fields will not be tested. Superclass fields will be included.</p>
 * @param lhs  <code>this</code> object
 * @param rhs  the other object
 * @param testTransients  whether to include transient fields
 * @return <code>true</code> if the two Objects have tested equals.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionEquals
COMMENT : /** 
 * <p>This method uses reflection to determine if the two <code>Object</code>s are equal.</p> <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly.</p> <p>If the testTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>.</p> <p>Static fields will not be included. Superclass fields will be appended up to and including the specified superclass. A null superclass is treated as java.lang.Object.</p>
 * @param lhs  <code>this</code> object
 * @param rhs  the other object
 * @param testTransients  whether to include transient fields
 * @param reflectUpToClass  the superclass to reflect up to (inclusive),may be <code>null</code>
 * @return <code>true</code> if the two Objects have tested equals.
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionEquals
COMMENT : /** 
 * <p>This method uses reflection to determine if the two <code>Object</code>s are equal.</p> <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly.</p> <p>If the testTransients parameter is set to <code>true</code>, transient members will be tested, otherwise they are ignored, as they are likely derived fields, and not part of the value of the <code>Object</code>.</p> <p>Static fields will not be included. Superclass fields will be appended up to and including the specified superclass. A null superclass is treated as java.lang.Object.</p>
 * @param lhs  <code>this</code> object
 * @param rhs  the other object
 * @param testTransients  whether to include transient fields
 * @param reflectUpToClass  the superclass to reflect up to (inclusive),may be <code>null</code>
 * @param excludeFields  array of field names to exclude from testing
 * @return <code>true</code> if the two Objects have tested equals.
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionAppend
COMMENT : /** 
 * <p>Appends the fields and values defined by the given object of the given Class.</p>
 * @param lhs  the left hand object
 * @param rhs  the right hand object
 * @param clazz  the class to append details of
 * @param builder  the builder to append to
 * @param useTransients  whether to test transient fields
 * @param excludeFields  array of field names to exclude from testing
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendSuper
COMMENT : /** 
 * <p>Adds the result of <code>super.equals()</code> to this builder.</p>
 * @param superEquals  the result of calling <code>super.equals()</code>
 * @return EqualsBuilder - used to chain calls.
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Test if two <code>Object</code>s are equal using their <code>equals</code> method.</p>
 * @param lhs  the left hand object
 * @param rhs  the right hand object
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p> Test if two <code>long</code> s are equal. </p>
 * @param lhs the left hand <code>long</code>
 * @param rhs the right hand <code>long</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Test if two <code>int</code>s are equal.</p>
 * @param lhs  the left hand <code>int</code>
 * @param rhs  the right hand <code>int</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Test if two <code>short</code>s are equal.</p>
 * @param lhs  the left hand <code>short</code>
 * @param rhs  the right hand <code>short</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Test if two <code>char</code>s are equal.</p>
 * @param lhs  the left hand <code>char</code>
 * @param rhs  the right hand <code>char</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Test if two <code>byte</code>s are equal.</p>
 * @param lhs  the left hand <code>byte</code>
 * @param rhs  the right hand <code>byte</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Test if two <code>double</code>s are equal by testing that the pattern of bits returned by <code>doubleToLong</code> are equal.</p> <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p> <p>It is compatible with the hash code generated by <code>HashCodeBuilder</code>.</p>
 * @param lhs  the left hand <code>double</code>
 * @param rhs  the right hand <code>double</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Test if two <code>float</code>s are equal byt testing that the pattern of bits returned by doubleToLong are equal.</p> <p>This handles NaNs, Infinities, and <code>-0.0</code>.</p> <p>It is compatible with the hash code generated by <code>HashCodeBuilder</code>.</p>
 * @param lhs  the left hand <code>float</code>
 * @param rhs  the right hand <code>float</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Test if two <code>booleans</code>s are equal.</p>
 * @param lhs  the left hand <code>boolean</code>
 * @param rhs  the right hand <code>boolean</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Performs a deep comparison of two <code>Object</code> arrays.</p> <p>This also will be called for the top level of multi-dimensional, ragged, and multi-typed arrays.</p>
 * @param lhs  the left hand <code>Object[]</code>
 * @param rhs  the right hand <code>Object[]</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Deep comparison of array of <code>long</code>. Length and all values are compared.</p> <p>The method  {@link #append(long,long)} is used.</p>
 * @param lhs  the left hand <code>long[]</code>
 * @param rhs  the right hand <code>long[]</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Deep comparison of array of <code>int</code>. Length and all values are compared.</p> <p>The method  {@link #append(int,int)} is used.</p>
 * @param lhs  the left hand <code>int[]</code>
 * @param rhs  the right hand <code>int[]</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Deep comparison of array of <code>short</code>. Length and all values are compared.</p> <p>The method  {@link #append(short,short)} is used.</p>
 * @param lhs  the left hand <code>short[]</code>
 * @param rhs  the right hand <code>short[]</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Deep comparison of array of <code>char</code>. Length and all values are compared.</p> <p>The method  {@link #append(char,char)} is used.</p>
 * @param lhs  the left hand <code>char[]</code>
 * @param rhs  the right hand <code>char[]</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Deep comparison of array of <code>byte</code>. Length and all values are compared.</p> <p>The method  {@link #append(byte,byte)} is used.</p>
 * @param lhs  the left hand <code>byte[]</code>
 * @param rhs  the right hand <code>byte[]</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Deep comparison of array of <code>double</code>. Length and all values are compared.</p> <p>The method  {@link #append(double,double)} is used.</p>
 * @param lhs  the left hand <code>double[]</code>
 * @param rhs  the right hand <code>double[]</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Deep comparison of array of <code>float</code>. Length and all values are compared.</p> <p>The method  {@link #append(float,float)} is used.</p>
 * @param lhs  the left hand <code>float[]</code>
 * @param rhs  the right hand <code>float[]</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : append
COMMENT : /** 
 * <p>Deep comparison of array of <code>boolean</code>. Length and all values are compared.</p> <p>The method  {@link #append(boolean,boolean)} is used.</p>
 * @param lhs  the left hand <code>boolean[]</code>
 * @param rhs  the right hand <code>boolean[]</code>
 * @return EqualsBuilder - used to chain calls.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isEquals
COMMENT : /** 
 * <p>Returns <code>true</code> if the fields that have been checked are all equal.</p>
 * @return boolean
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setEquals
COMMENT : /** 
 * Sets the <code>isEquals</code> value.
 * @param isEquals The value to set.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : MultiLineToStringStyleTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testBlank
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testAppendSuper
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObject
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testPerson
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLong
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testObjectArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArray
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testLongArrayArray
COMMENT : null


PACKAGE : null
NAME : Broken5OperationEnum
COMMENT : null


PACKAGE : null
NAME : getEnumClass
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : getEnum
COMMENT : null


PACKAGE : null
NAME : getEnumMap
COMMENT : null


PACKAGE : null
NAME : getEnumList
COMMENT : null


PACKAGE : null
NAME : iterator
COMMENT : null


PACKAGE : null
NAME : PlusOperation
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : null
NAME : MinusOperation
COMMENT : null


PACKAGE : null
NAME : eval
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : ValuedLanguageEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : main
COMMENT : /** 
 * Main method.
 * @param args  command line arguments, ignored
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : suite
COMMENT : /** 
 * Return a new test suite containing this test case.
 * @return a new test suite containing this test case
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : CompositeFormatTest
COMMENT : /** 
 * Create a new test case with the specified name.
 * @param name name
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testCompositeFormat
COMMENT : /** 
 * Ensures that the parse/format separation is correctly maintained. 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : testUsage
COMMENT : null


PACKAGE : package org.apache.commons.lang.math;

NAME : Fraction
COMMENT : /** 
 * <p>Constructs a <code>Fraction</code> instance with the 2 parts of a fraction Y/Z.</p>
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getFraction
COMMENT : /** 
 * <p>Creates a <code>Fraction</code> instance with the 2 parts of a fraction Y/Z.</p> <p>Any negative signs are resolved to be on the numerator.</p>
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance
 * @throws ArithmeticException if the denomiator is <code>zero</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getFraction
COMMENT : /** 
 * <p>Creates a <code>Fraction</code> instance with the 3 parts of a fraction X Y/Z.</p> <p>The negative sign must be passed in on the whole number part.</p>
 * @param whole  the whole number, for example the one in 'one and three sevenths'
 * @param numerator  the numerator, for example the three in 'one and three sevenths'
 * @param denominator  the denominator, for example the seven in 'one and three sevenths'
 * @return a new fraction instance
 * @throws ArithmeticException if the denomiator is <code>zero</code>
 * @throws ArithmeticException if the denominator is negative
 * @throws ArithmeticException if the numerator is negative
 * @throws ArithmeticException if the resulting numerator exceeds <code>Integer.MAX_VALUE</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getReducedFraction
COMMENT : /** 
 * <p>Creates a reduced <code>Fraction</code> instance with the 2 parts of a fraction Y/Z.</p> <p>For example, if the input parameters represent 2/4, then the created fraction will be 1/2.</p> <p>Any negative signs are resolved to be on the numerator.</p>
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws ArithmeticException if the denominator is <code>zero</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getFraction
COMMENT : /** 
 * <p>Creates a <code>Fraction</code> instance from a <code>double</code> value.</p> <p>This method uses the <a href="http://archives.math.utk.edu/articles/atuyl/confrac/"> continued fraction algorithm</a>, computing a maximum of 25 convergents and bounding the denominator by 10,000.</p>
 * @param value  the double value to convert
 * @return a new fraction instance that is close to the value
 * @throws ArithmeticException if <code>|value| > Integer.MAX_VALUE</code> or <code>value = NaN</code>
 * @throws ArithmeticException if the calculated denominator is <code>zero</code>
 * @throws ArithmeticException if the the algorithm does not converge
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getFraction
COMMENT : /** 
 * <p>Creates a Fraction from a <code>String</code>.</p> <p>The formats accepted are:</p> <ol> <li><code>double</code> String containing a dot</li> <li>'X Y/Z'</li> <li>'Y/Z'</li> <li>'X' (a simple whole number)</li> </ol> and a .</p>
 * @param str  the string to parse, must not be <code>null</code>
 * @return the new <code>Fraction</code> instance
 * @throws IllegalArgumentException if the string is <code>null</code>
 * @throws NumberFormatException if the number format is invalid
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getNumerator
COMMENT : /** 
 * <p>Gets the numerator part of the fraction.</p> <p>This method may return a value greater than the denominator, an improper fraction, such as the seven in 7/4.</p>
 * @return the numerator fraction part
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getDenominator
COMMENT : /** 
 * <p>Gets the denominator part of the fraction.</p>
 * @return the denominator fraction part
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getProperNumerator
COMMENT : /** 
 * <p>Gets the proper numerator, always positive.</p> <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4. This method returns the 3 from the proper fraction.</p> <p>If the fraction is negative such as -7/4, it can be resolved into -1 3/4, so this method returns the positive proper numerator, 3.</p>
 * @return the numerator fraction part of a proper fraction, always positive
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : getProperWhole
COMMENT : /** 
 * <p>Gets the proper whole part of the fraction.</p> <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4. This method returns the 1 from the proper fraction.</p> <p>If the fraction is negative such as -7/4, it can be resolved into -1 3/4, so this method returns the positive whole part -1.</p>
 * @return the whole fraction part of a proper fraction, that includes the sign
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : intValue
COMMENT : /** 
 * <p>Gets the fraction as an <code>int</code>. This returns the whole number part of the fraction.</p>
 * @return the whole number fraction part
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : longValue
COMMENT : /** 
 * <p>Gets the fraction as a <code>long</code>. This returns the whole number part of the fraction.</p>
 * @return the whole number fraction part
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : floatValue
COMMENT : /** 
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction as the numerator divided by denominator.</p>
 * @return the fraction as a <code>float</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : doubleValue
COMMENT : /** 
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction as the numerator divided by denominator.</p>
 * @return the fraction as a <code>double</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : reduce
COMMENT : /** 
 * <p>Reduce the fraction to the smallest values for the numerator and denominator, returning the result.</p> <p>For example, if this fraction represents 2/4, then the result will be 1/2.</p>
 * @return a new reduced fraction instance, or this if no simplification possible
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : invert
COMMENT : /** 
 * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p> <p>The returned fraction is not reduced.</p>
 * @return a new fraction instance with the numerator and denominatorinverted.
 * @throws ArithmeticException if the fraction represents zero.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : negate
COMMENT : /** 
 * <p>Gets a fraction that is the negative (-fraction) of this one.</p> <p>The returned fraction is not reduced.</p>
 * @return a new fraction instance with the opposite signed numerator
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : abs
COMMENT : /** 
 * <p>Gets a fraction that is the positive equivalent of this one.</p> <p>More precisely: <code>(fraction >= 0 ? this : -fraction)</code></p> <p>The returned fraction is not reduced.</p>
 * @return <code>this</code> if it is positive, or a new positive fractioninstance with the opposite signed numerator
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : pow
COMMENT : /** 
 * <p>Gets a fraction that is raised to the passed in power.</p> <p>The returned fraction is in reduced form.</p>
 * @param power  the power to raise the fraction to
 * @return <code>this</code> if the power is one, <code>ONE</code> if the poweris zero (even if the fraction equals ZERO) or a new fraction instance  raised to the appropriate power
 * @throws ArithmeticException if the resulting numerator or denominator exceeds<code>Integer.MAX_VALUE</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : greatestCommonDivisor
COMMENT : /** 
 * <p>Gets the greatest common divisor of the absolute value of two numbers, using the "binary gcd" method which avoids division and modulo operations.  See Knuth 4.5.2 algorithm B. This algorithm is due to Josef Stein (1961).</p>
 * @param u  a non-zero number
 * @param v  a non-zero number
 * @return the greatest common divisor, never zero
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : mulAndCheck
COMMENT : /** 
 * Multiply two integers, checking for overflow.
 * @param x a factor
 * @param y a factor
 * @return the product <code>x*y</code>
 * @throws ArithmeticException if the result can not be represented asan int
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : mulPosAndCheck
COMMENT : /** 
 * Multiply two non-negative integers, checking for overflow.
 * @param x a non-negative factor
 * @param y a non-negative factor
 * @return the product <code>x*y</code>
 * @throws ArithmeticException if the result can not be represented asan int
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : addAndCheck
COMMENT : /** 
 * Add two integers, checking for overflow.
 * @param x an addend
 * @param y an addend
 * @return the sum <code>x+y</code>
 * @throws ArithmeticException if the result can not be represented asan int
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : subAndCheck
COMMENT : /** 
 * Subtract two integers, checking for overflow.
 * @param x the minuend
 * @param y the subtrahend
 * @return the difference <code>x-y</code>
 * @throws ArithmeticException if the result can not be represented asan int
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : add
COMMENT : /** 
 * <p>Adds the value of this fraction to another, returning the result in reduced form. The algorithm follows Knuth, 4.5.1.</p>
 * @param fraction  the fraction to add, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the resulting numerator or denominator exceeds<code>Integer.MAX_VALUE</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : subtract
COMMENT : /** 
 * <p>Subtracts the value of another fraction from the value of this one,  returning the result in reduced form.</p>
 * @param fraction  the fraction to subtract, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the resulting numerator or denominatorcannot be represented in an <code>int</code>.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : addSub
COMMENT : /** 
 * Implement add and subtract using algorithm described in Knuth 4.5.1.
 * @param fraction the fraction to subtract, must not be <code>null</code>
 * @param isAdd true to add, false to subtract
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the resulting numerator or denominatorcannot be represented in an <code>int</code>.
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : multiplyBy
COMMENT : /** 
 * <p>Multiplies the value of this fraction by another, returning the  result in reduced form.</p>
 * @param fraction  the fraction to multiply by, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the resulting numerator or denominator exceeds<code>Integer.MAX_VALUE</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : divideBy
COMMENT : /** 
 * <p>Divide the value of this fraction by another.</p>
 * @param fraction  the fraction to divide by, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the fraction to divide by is zero
 * @throws ArithmeticException if the resulting numerator or denominator exceeds<code>Integer.MAX_VALUE</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : equals
COMMENT : /** 
 * <p>Compares this fraction to another object to test if they are equal.</p>. <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : hashCode
COMMENT : /** 
 * <p>Gets a hashCode for the fraction.</p>
 * @return a hash code value for this object
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : compareTo
COMMENT : /** 
 * <p>Compares this object to another based on size.</p> <p>Note: this class has a natural ordering that is inconsistent with equals, because, for example, equals treats 1/2 and 2/4 as different, whereas compareTo treats them as equal.
 * @param object  the object to compare to
 * @return -1 if this is less, 0 if equal, +1 if greater
 * @throws ClassCastException if the object is not a <code>Fraction</code>
 * @throws NullPointerException if the object is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toString
COMMENT : /** 
 * <p>Gets the fraction as a <code>String</code>.</p> <p>The format used is '<i>numerator</i>/<i>denominator</i>' always.
 * @return a <code>String</code> form of the fraction
 */



PACKAGE : package org.apache.commons.lang.math;

NAME : toProperString
COMMENT : /** 
 * <p>Gets the fraction as a proper <code>String</code> in the format X Y/Z.</p> <p>The format used in '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>'. If the whole number is zero it will be ommitted. If the numerator is zero, only the whole number is returned.</p>
 * @return a <code>String</code> form of the fraction
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : ToStringStyleTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetArrayStart
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetArrayEnd
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetArraySeparator
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetContentStart
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetContentEnd
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetFieldNameValueSeparator
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetFieldSeparator
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetNullText
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetSizeStartText
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetSizeEndText
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetSummaryObjectStartText
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : testSetSummaryObjectEndText
COMMENT : null


PACKAGE : null
NAME : ValuedEnumTest
COMMENT : null


PACKAGE : null
NAME : setUp
COMMENT : null


PACKAGE : null
NAME : suite
COMMENT : null


PACKAGE : null
NAME : testName
COMMENT : null


PACKAGE : null
NAME : testValue
COMMENT : null


PACKAGE : null
NAME : testCompareTo
COMMENT : null


PACKAGE : null
NAME : testEquals
COMMENT : null


PACKAGE : null
NAME : testToString
COMMENT : null


PACKAGE : null
NAME : testIterator
COMMENT : null


PACKAGE : null
NAME : testList
COMMENT : null


PACKAGE : null
NAME : testMap
COMMENT : null


PACKAGE : null
NAME : testGet
COMMENT : null


PACKAGE : null
NAME : testGetValue
COMMENT : null


PACKAGE : null
NAME : testSerialization
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : DateUtilsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : tearDown
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testConstructor
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testIsSameDay_Date
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testIsSameDay_Cal
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testIsSameInstant_Date
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testIsSameInstant_Cal
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testIsSameLocalTime_Cal
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testParseDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testAddYears
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testAddMonths
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testAddWeeks
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testAddDays
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testAddHours
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testAddMinutes
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testAddSeconds
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testAddMilliseconds
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testAddByField
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSetYears
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSetMonths
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSetDays
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSetHours
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSetMinutes
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSetSeconds
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testSetMilliseconds
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : assertDate
COMMENT : null


PACKAGE : package org.apache.commons.lang.time;

NAME : testRound
COMMENT : /** 
 * Tests various values with the round method
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : testRoundLang346
COMMENT : /** 
 * Tests the Changes Made by LANG-346 to the DateUtils.modify() private method invoked by DateUtils.round().
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : testTruncate
COMMENT : /** 
 * Tests various values with the trunc method
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : testTruncateLang59
COMMENT : /** 
 * Tests for LANG-59 see http://issues.apache.org/jira/browse/LANG-59
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : testIteratorEx
COMMENT : /** 
 * Tests the iterator exceptions
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : testWeekIterator
COMMENT : /** 
 * Tests the calendar iterator for week ranges
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : testMonthIterator
COMMENT : /** 
 * Tests the calendar iterator for month-based ranges
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : assertWeekIterator
COMMENT : /** 
 * This checks that this is a 7 element iterator of Calendar objects that are dates (no time), and exactly 1 day spaced after each other.
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : assertWeekIterator
COMMENT : /** 
 * Convenience method for when working with Date objects
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : assertWeekIterator
COMMENT : /** 
 * This checks that this is a 7 divisble iterator of Calendar objects that are dates (no time), and exactly 1 day spaced after each other (in addition to the proper start and stop dates)
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : assertEquals
COMMENT : /** 
 * Used to check that Calendar objects are close enough delta is in milliseconds
 */



PACKAGE : package org.apache.commons.lang.time;

NAME : warn
COMMENT : null


PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : /** 
 * <p> Builds a <code>toString</code> value using the default <code>ToStringStyle</code> through reflection. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> Transient members will be not be included, as they are likely derived. Static fields will not be included. Superclass fields will be appended. </p>
 * @param object the Object to be output
 * @return the String result
 * @throws IllegalArgumentException if the Object is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : /** 
 * <p> Builds a <code>toString</code> value through reflection. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> Transient members will be not be included, as they are likely derived. Static fields will not be included. Superclass fields will be appended. </p> <p> If the style is <code>null</code>, the default <code>ToStringStyle</code> is used. </p>
 * @param object the Object to be output
 * @param style the style of the <code>toString</code> to create, may be <code>null</code>
 * @return the String result
 * @throws IllegalArgumentException if the Object or <code>ToStringStyle</code> is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : /** 
 * <p> Builds a <code>toString</code> value through reflection. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> If the <code>outputTransients</code> is <code>true</code>, transient members will be output, otherwise they are ignored, as they are likely derived fields, and not part of the value of the Object. </p> <p> Static fields will not be included. Superclass fields will be appended. </p> <p> If the style is <code>null</code>, the default <code>ToStringStyle</code> is used. </p>
 * @param object the Object to be output
 * @param style the style of the <code>toString</code> to create, may be <code>null</code>
 * @param outputTransients whether to include transient fields
 * @return the String result
 * @throws IllegalArgumentException if the Object is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : /** 
 * <p> Builds a <code>toString</code> value through reflection. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> If the <code>outputTransients</code> is <code>true</code>, transient fields will be output, otherwise they are ignored, as they are likely derived fields, and not part of the value of the Object. </p> <p> If the <code>outputStatics</code> is <code>true</code>, static fields will be output, otherwise they are ignored. </p> <p> Static fields will not be included. Superclass fields will be appended. </p> <p> If the style is <code>null</code>, the default <code>ToStringStyle</code> is used. </p>
 * @param object the Object to be output
 * @param style the style of the <code>toString</code> to create, may be <code>null</code>
 * @param outputTransients whether to include transient fields
 * @param outputStatics whether to include transient fields
 * @return the String result
 * @throws IllegalArgumentException if the Object is <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : /** 
 * <p> Builds a <code>toString</code> value through reflection. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> If the <code>outputTransients</code> is <code>true</code>, transient fields will be output, otherwise they are ignored, as they are likely derived fields, and not part of the value of the Object. </p> <p> If the <code>outputStatics</code> is <code>true</code>, static fields will be output, otherwise they are ignored. </p> <p> Superclass fields will be appended up to and including the specified superclass. A null superclass is treated as <code>java.lang.Object</code>. </p> <p> If the style is <code>null</code>, the default <code>ToStringStyle</code> is used. </p>
 * @param object the Object to be output
 * @param style the style of the <code>toString</code> to create, may be <code>null</code>
 * @param outputTransients whether to include transient fields
 * @param outputStatics whether to include static fields
 * @param reflectUpToClass the superclass to reflect up to (inclusive), may be <code>null</code>
 * @return the String result
 * @throws IllegalArgumentException if the Object is <code>null</code>
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : /** 
 * <p> Builds a <code>toString</code> value through reflection. </p> <p> It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will throw a security exception if run under a security manager, if the permissions are not set up correctly. It is also not as efficient as testing explicitly. </p> <p> If the <code>outputTransients</code> is <code>true</code>, transient members will be output, otherwise they are ignored, as they are likely derived fields, and not part of the value of the Object. </p> <p> Static fields will not be included. Superclass fields will be appended up to and including the specified superclass. A null superclass is treated as <code>java.lang.Object</code>. </p> <p> If the style is <code>null</code>, the default <code>ToStringStyle</code> is used. </p>
 * @deprecated Use {@link #toString(Object,ToStringStyle,boolean,boolean,Class)}
 * @param object the Object to be output
 * @param style the style of the <code>toString</code> to create, may be <code>null</code>
 * @param outputTransients whether to include transient fields
 * @param reflectUpToClass the superclass to reflect up to (inclusive), may be <code>null</code>
 * @return the String result
 * @throws IllegalArgumentException if the Object is <code>null</code>
 * @since 2.0
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toStringExclude
COMMENT : /** 
 * Builds a String for a toString method excluding the given field name.
 * @param object The object to "toString".
 * @param excludeFieldName The field name to exclude
 * @return The toString value.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toStringExclude
COMMENT : /** 
 * Builds a String for a toString method excluding the given field names.
 * @param object The object to "toString".
 * @param excludeFieldNames The field names to exclude. Null excludes nothing.
 * @return The toString value.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toNoNullStringArray
COMMENT : /** 
 * Converts the given Collection into an array of Strings. The returned array does not contain <code>null</code> entries. Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an array element is <code>null</code>.
 * @param collection The collection to convert
 * @return A new array of Strings.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toNoNullStringArray
COMMENT : /** 
 * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists (arrays and collections). Note that  {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an array element is <code>null</code>.
 * @param array The array to check
 * @return The given array or a new array without null.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toStringExclude
COMMENT : /** 
 * Builds a String for a toString method excluding the given field names.
 * @param object The object to "toString".
 * @param excludeFieldNames The field names to exclude
 * @return The toString value.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : ReflectionToStringBuilder
COMMENT : /** 
 * <p> Constructor. </p> <p> This constructor outputs using the default style set with <code>setDefaultStyle</code>. </p>
 * @param object the Object to build a <code>toString</code> for, must not be <code>null</code>
 * @throws IllegalArgumentException if the Object passed in is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : ReflectionToStringBuilder
COMMENT : /** 
 * <p> Constructor. </p> <p> If the style is <code>null</code>, the default style is used. </p>
 * @param object the Object to build a <code>toString</code> for, must not be <code>null</code>
 * @param style the style of the <code>toString</code> to create, may be <code>null</code>
 * @throws IllegalArgumentException if the Object passed in is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : ReflectionToStringBuilder
COMMENT : /** 
 * <p> Constructor. </p> <p> If the style is <code>null</code>, the default style is used. </p> <p> If the buffer is <code>null</code>, a new one is created. </p>
 * @param object the Object to build a <code>toString</code> for
 * @param style the style of the <code>toString</code> to create, may be <code>null</code>
 * @param buffer the <code>StringBuffer</code> to populate, may be <code>null</code>
 * @throws IllegalArgumentException if the Object passed in is <code>null</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : ReflectionToStringBuilder
COMMENT : /** 
 * Constructor.
 * @deprecated Use {@link #ReflectionToStringBuilder(Object,ToStringStyle,StringBuffer,Class,boolean,boolean)}.
 * @param object the Object to build a <code>toString</code> for
 * @param style the style of the <code>toString</code> to create, may be <code>null</code>
 * @param buffer the <code>StringBuffer</code> to populate, may be <code>null</code>
 * @param reflectUpToClass the superclass to reflect up to (inclusive), may be <code>null</code>
 * @param outputTransients whether to include transient fields
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : ReflectionToStringBuilder
COMMENT : /** 
 * Constructor.
 * @param object the Object to build a <code>toString</code> for
 * @param style the style of the <code>toString</code> to create, may be <code>null</code>
 * @param buffer the <code>StringBuffer</code> to populate, may be <code>null</code>
 * @param reflectUpToClass the superclass to reflect up to (inclusive), may be <code>null</code>
 * @param outputTransients whether to include transient fields
 * @param outputStatics whether to include static fields
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : accept
COMMENT : /** 
 * Returns whether or not to append the given <code>Field</code>. <ul> <li>Transient fields are appended only if  {@link #isAppendTransients()} returns <code>true</code>.<li>Static fields are appended only if  {@link #isAppendStatics()} returns <code>true</code>.<li>Inner class fields are not appened.</li> </ul>
 * @param field The Field to test.
 * @return Whether or not to append the given <code>Field</code>.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : appendFieldsIn
COMMENT : /** 
 * <p> Appends the fields and values defined by the given object of the given Class. </p> <p> If a cycle is detected as an object is &quot;toString()'ed&quot;, such an object is rendered as if <code>Object.toString()</code> had been called and not implemented by the object. </p>
 * @param clazz The class of object parameter
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getExcludeFieldNames
COMMENT : /** 
 * @return Returns the excludeFieldNames.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getUpToClass
COMMENT : /** 
 * <p> Gets the last super class to stop appending fields for. </p>
 * @return The last super class to stop appending fields for.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : getValue
COMMENT : /** 
 * <p> Calls <code>java.lang.reflect.Field.get(Object)</code>. </p>
 * @param field The Field to query.
 * @return The Object from the given Field.
 * @throws IllegalArgumentException see  {@link java.lang.reflect.Field#get(Object)}
 * @throws IllegalAccessException see  {@link java.lang.reflect.Field#get(Object)}
 * @see java.lang.reflect.Field#get(Object)
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isAppendStatics
COMMENT : /** 
 * <p> Gets whether or not to append static fields. </p>
 * @return Whether or not to append static fields.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : isAppendTransients
COMMENT : /** 
 * <p> Gets whether or not to append transient fields. </p>
 * @return Whether or not to append transient fields.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : reflectionAppendArray
COMMENT : /** 
 * <p> Append to the <code>toString</code> an <code>Object</code> array. </p>
 * @param array the array to add to the <code>toString</code>
 * @return this
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setAppendStatics
COMMENT : /** 
 * <p> Sets whether or not to append static fields. </p>
 * @param appendStatics Whether or not to append static fields.
 * @since 2.1
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setAppendTransients
COMMENT : /** 
 * <p> Sets whether or not to append transient fields. </p>
 * @param appendTransients Whether or not to append transient fields.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setExcludeFieldNames
COMMENT : /** 
 * Sets the field names to exclude.
 * @param excludeFieldNamesParam The excludeFieldNames to excluding from toString or <code>null</code>.
 * @return <code>this</code>
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : setUpToClass
COMMENT : /** 
 * <p> Sets the last super class to stop appending fields for. </p>
 * @param clazz The last super class to stop appending fields for.
 */



PACKAGE : package org.apache.commons.lang.builder;

NAME : toString
COMMENT : /** 
 * <p> Gets the String built by this builder. </p>
 * @return the built string
 */



PACKAGE : package org.apache.commons.lang.enums;

NAME : Extended1Enum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : main
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : assertSupportedEncoding
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testConstructor
COMMENT : /** 
 * The class can be instantiated.
 */



PACKAGE : package org.apache.commons.lang;

NAME : testMustBeSupportedJava1_3_1
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testNotSupported
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testWorksOnJava1_1_8
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : testWorksOnJava1_2_2
COMMENT : null


PACKAGE : package org.apache.commons.lang;

NAME : warn
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : EnumEqualsTest
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : setUp
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : suite
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testEquals
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testEquals_classloader_equal
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testEquals_classloader_different
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : testCompareTo
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : CarColorEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : TrafficlightColorEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : TotallyUnrelatedClass
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getName
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : Broken2Enum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnum
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumMap
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : getEnumList
COMMENT : null


PACKAGE : package org.apache.commons.lang.enums;

NAME : iterator
COMMENT : null


PACKAGE : package org.apache.commons.lang.text;

NAME : TimeMetaFormat
COMMENT : /** 
 * Create a new TimeMetaFormat.
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : TimeMetaFormat
COMMENT : /** 
 * Create a new NumberMetaFormat.
 * @param locale Locale
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : createSubformatInstance
COMMENT : /** 
 * {@inheritDoc} 
 */



PACKAGE : package org.apache.commons.lang.text;

NAME : createInverseStyleMap
COMMENT : /** 
 * {@inheritDoc} 
 */


